<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zyan.Communication</name>
    </assembly>
    <members>
        <member name="T:Zyan.Communication.Security.NullAuthenticationProvider">
            <summary>
            Null-Authentifizierungsanbieter. 
            Wird benötigt, wenn keine Authentifizierung benötigt wird.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Security.IAuthenticationProvider">
            <summary>
            Schnittstelle für Authentifzierungs-Anbieter.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Security.IAuthenticationProvider.Authenticate(Zyan.Communication.Security.AuthRequestMessage)">
            <summary>
            Authentifiziert einen bestimmten Benutzer anhand seiner Anmeldeinformationen.
            </summary>
            <param name="authRequest">Authentifizierungs-Anfragenachricht mit Anmeldeinformationen</param>
            <returns>Antwortnachricht des Authentifizierungssystems</returns>
        </member>
        <member name="M:Zyan.Communication.Security.NullAuthenticationProvider.Authenticate(Zyan.Communication.Security.AuthRequestMessage)">
            <summary>
            Authentifiziert einen bestimmten Benutzer anhand seiner Anmeldeinformationen.
            </summary>
            <param name="authRequest">Authentifizierungs-Anfragenachricht mit Anmeldeinformationen</param>
            <returns>Antwortnachricht des Authentifizierungssystems</returns>
        </member>
        <member name="T:Zyan.Communication.ZyanConnectionSetup">
            <summary>
            Beschreibt Konfigurationseinstellungen für eine einzelne Zyan-Verbindung.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanConnectionSetup.#ctor">
            <summary>
            Ersellt eine neue Instanz von ZyanConnectionSetup.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanConnectionSetup.AddCredential(System.String,System.String)">
            <summary>
            Fügt ein neue Anmeldeinformation hinzu.
            </summary>
            <param name="name">Name</param>
            <param name="value">Wert</param>
        </member>
        <member name="P:Zyan.Communication.ZyanConnectionSetup.ServerUrl">
            <summary>
            Gibt den Server-URL (z.B. "tcp://server1:46123/host1") zurück oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnectionSetup.ProtocolSetup">
            <summary>
            Gibt die Protokollkonfiguration zurück oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnectionSetup.Credentials">
            <summary>
            Gibt die Anmeldeinformationen zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnectionSetup.AutoLoginOnExpiredSession">
            <summary>
            Gibt zurück, ob sich die Verbindung automatisch neu anmelden soll, wenn die Sitzung abgelaufen ist, oder legt diest fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnectionSetup.KeepSessionAlive">
            <summary>
            Gibt zurück, ob die Sitzung automatisch turnusgemäß verlängert werden soll, oder legt dies fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.IZyanDispatcher">
            <summary>
            Schnittstelle für Fabriken zur Produktion verteilbarer Komponenten.
            </summary>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.Invoke(System.Guid,System.String,System.Collections.Generic.List{Zyan.Communication.Delegates.DelegateCorrelationInfo},System.String,System.Type[],System.Type[],System.Object[])">
            <summary>
            Processes remote method invocation.
            </summary>
            <param name="trackingID">Key for call tracking</param>
            <param name="interfaceName">Name of the component interface</param>
            <param name="delegateCorrelationSet">Correlation set for dynamic event and delegate wiring</param>
            <param name="methodName">Name of the invoked method</param>
            <param name="genericArguments">Generic arguments of the invoked method</param>
            <param name="paramTypes">Parameter types</param>
            <param name="args">Parameter values</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.GetRegisteredComponents">
            <summary>
            Returns an array with metadata about all registered components.
            </summary>
            <returns>Array with registered component metadata</returns>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.Logon(System.Guid,System.Collections.Hashtable)">
            <summary>
            Processes logon.
            </summary>
            <param name="sessionID">Unique session key (created on client side)</param>
            <param name="credentials">Logon credentials</param>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.Logoff(System.Guid)">
            <summary>
            Process logoff.
            </summary>
            <param name="sessionID">Unique session key</param>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.ExistSession(System.Guid)">
            <summary>
            Returns true, if a specified Session ID is valid, otherwis false.
            </summary>
            <param name="sessionID">Session ID to check</param>
            <returns>Session check result</returns>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.Subscribe(System.String,System.EventHandler{Zyan.Communication.Notification.NotificationEventArgs})">
            <summary>
            Subscribe to a specified NotificationService event.
            </summary>
            <param name="eventName">Event name</param>
            <param name="handler">Delegate to client side event handler</param>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.Unsubscribe(System.String,System.EventHandler{Zyan.Communication.Notification.NotificationEventArgs})">
            <summary>
            Unsubscribe from a specified NotificationService event.
            </summary>
            <param name="eventName">Event name</param>
            <param name="handler">Delegate to client side event handler</param>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.RenewSession">
            <summary>
            Extends the lifetime of the current session and returs the current session age limit.
            </summary>
            <returns>Session age limit (in minutes)</returns>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.AddEventHandler(System.String,Zyan.Communication.Delegates.DelegateCorrelationInfo,System.String)">
            <summary>
            Adds a handler to an event of a server component.
            </summary>
            <param name="interfaceName">Name of the server component interface</param>
            <param name="correlation">Correlation information</param>
            <param name="uniqueName">Unique name of the server component instance (May left empty, if component isn´t registered with a unique name)</param>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.RemoveEventHandler(System.String,Zyan.Communication.Delegates.DelegateCorrelationInfo,System.String)">
            <summary>
            Removes a handler from an event of a server component.
            </summary>
            <param name="interfaceName">Name of the server component interface</param>
            <param name="correlation">Correlation information</param>
            <param name="uniqueName">Unique name of the server component instance (May left empty, if component isn´t registered with a unique name)</param>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.ReceiveClientHeartbeat(System.Guid)">
            <summary>
            Called from client to send a heartbeat signal.
            </summary>
            <param name="sessionID">Client´s session key</param>
        </member>
        <member name="P:Zyan.Communication.IZyanDispatcher.SessionAgeLimit">
            <summary>
            Gets the maximum sesseion age (in minutes).
            </summary>
        </member>
        <member name="E:Zyan.Communication.IZyanDispatcher.ClientHeartbeatReceived">
            <summary>
            Event: Occours when a heartbeat signal is received from a client.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.DynamicTypeBinder">
            <summary>
            Custom serialization binder that uses TypeHelper to resolve types.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.DynamicTypeBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
            <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
        </member>
        <member name="T:Zyan.InterLinq.Types.TypeConverter">
            <summary>
            The <see cref="T:Zyan.InterLinq.Types.TypeConverter"/> is a helper class providing
            several static methods to convert <see cref="T:Zyan.InterLinq.Types.Anonymous.AnonymousObject"/> to
            C# Anonymous Types and back.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.TypeConverter.ConvertFromSerializable(System.Type,System.Object)">
            <summary>
            Converts an <see langword="object"/> into a target <see cref="T:System.Type"/>.
            </summary>
            <param name="wantedType">Target <see cref="T:System.Type"/>.</param>
            <param name="objectToConvert"><see langword="object"/> to convert.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.TypeConverter.ConvertFromSerializableCollection``1(System.Collections.IEnumerable)">
            <summary>
            Converts each element of an <see cref="T:System.Collections.IEnumerable"/> 
            into a target <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">Target <see cref="T:System.Type"/>.</typeparam>
            <param name="enumerable"><see cref="T:System.Collections.IEnumerable"/>.</param>
            <returns>Returns the converted <see cref="T:System.Collections.IEnumerable"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.TypeConverter.ConvertToSerializable(System.Object)">
            <summary>
            Converts an object to an <see cref="T:Zyan.InterLinq.Types.Anonymous.AnonymousObject"/> 
            or an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="objectToConvert"><see langword="object"/> to convert.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.TypeConverter.ConvertToSerializableCollection``1(System.Collections.IEnumerable)">
            <summary>
            Converts each element of an <see cref="T:System.Collections.IEnumerable"/> to 
            an <see cref="T:System.Collections.Generic.IEnumerable`1"/> 
            </summary>
            <typeparam name="T">Target <see cref="T:System.Type"/>.</typeparam>
            <param name="enumerable"><see cref="T:System.Collections.IEnumerable"/>.</param>
            <returns>Returns the converted <see cref="T:System.Collections.IEnumerable"/>.</returns>
        </member>
        <member name="T:Zyan.InterLinq.Types.InterLinqMethodBase">
            <summary>
            InterLINQ representation of <see cref="T:System.Reflection.MethodBase"/>.
            </summary>
            <seealso cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/>
            <seealso cref="T:System.Reflection.MethodBase"/>
        </member>
        <member name="T:Zyan.InterLinq.Types.InterLinqMemberInfo">
            <summary>
            InterLINQ representation of <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <seealso cref="T:System.Reflection.MemberInfo"/>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqMemberInfo.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqMemberInfo.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="memberInfo">Represented CLR <see cref="T:System.Reflection.MemberInfo"/>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqMemberInfo.Initialize(System.Reflection.MemberInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="memberInfo">Represented <see cref="T:System.Reflection.MemberInfo"/></param>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqMemberInfo.GetClrVersion">
            <summary>
            Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <returns>Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqMemberInfo.Equals(System.Object)">
            <summary>
            Compares <paramref name="obj"/> to this instance.
            </summary>
            <param name="obj"><see langword="object"/> to compare.</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqMemberInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see langword="object"/>.</returns>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqMemberInfo.MemberType">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberTypes">MemberType</see>.
            </summary>
            <seealso cref="P:System.Reflection.MemberInfo.MemberType"/>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqMemberInfo.Name">
            <summary>
            Gets or sets the name of this <see cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/>.
            </summary>
            <seealso cref="P:System.Reflection.MemberInfo.Name"/>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqMemberInfo.DeclaringType">
            <summary>
            Gets or sets the class that declares this <see cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/>.
            </summary>
            <seealso cref="P:System.Reflection.MemberInfo.DeclaringType"/>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqMethodBase.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqMethodBase.#ctor(System.Reflection.MethodBase)">
            <summary>
            Initializes this class.
            </summary>
            <param name="methodBase">Represented CLR <see cref="T:System.Reflection.MethodBase"/>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqMethodBase.Initialize(System.Reflection.MemberInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="memberInfo">Represented <see cref="T:System.Reflection.MemberInfo"/></param>
            <seealso cref="M:Zyan.InterLinq.Types.InterLinqMemberInfo.Initialize(System.Reflection.MemberInfo)"/>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqMethodBase.Equals(System.Object)">
            <summary>
            Compares <paramref name="obj"/> to this instance.
            </summary>
            <param name="obj"><see langword="object"/> to compare.</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqMethodBase.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see langword="object"/>.</returns>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqMethodBase.ParameterTypes">
            <summary>
            Gets or sets the ParameterTypes.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Types.Anonymous.DynamicAssemblyHolder">
            <summary>
            A class that holds a <see cref="T:System.Reflection.Emit.AssemblyBuilder">dynamic assembly</see>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.DynamicAssemblyHolder.#ctor">
            <summary>
            Private constructor to avoid external instantiation.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.DynamicAssemblyHolder.Initialize">
            <summary>
            Initializes the <see cref="T:Zyan.InterLinq.Types.Anonymous.DynamicAssemblyHolder"/>.
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Types.Anonymous.DynamicAssemblyHolder.Instance">
            <summary>
            Singleton instance of the <see cref="T:Zyan.InterLinq.Types.Anonymous.DynamicAssemblyHolder"/>.
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Types.Anonymous.DynamicAssemblyHolder.ModuleBuilder">
            <summary>
            Gets a <see cref="P:Zyan.InterLinq.Types.Anonymous.DynamicAssemblyHolder.ModuleBuilder"/> to create types in it. 
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableElementInit">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.ElementInit"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypes.SerializableElementInit.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypes.SerializableElementInit.#ctor(System.Linq.Expressions.ElementInit,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.ElementInit"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="elementInit">The original, not serializable <see cref="T:System.Linq.Expressions.ElementInit"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypes.SerializableElementInit.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.ElementInit"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypes.SerializableElementInit.ToString">
            <summary>
            Returns a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.ElementInit"/>.
            </summary>
            <returns>Returns a <see langword="string"/> representing this object.</returns>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableTypes.SerializableElementInit.Arguments">
            <summary>
            See <see cref="P:System.Linq.Expressions.ElementInit.Arguments"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableTypes.SerializableElementInit.AddMethod">
            <summary>
            See <see cref="P:System.Linq.Expressions.ElementInit.AddMethod"/>
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.ExpressionSerializationHandler">
            <summary>
            Serialization handler for Linq expressions
            </summary>
        </member>
        <member name="T:Zyan.Communication.ISerializationHandler">
            <summary>
            Implementieren Sie diese Schnittstelle, um eine benutzerdefinierte Serialisierung für einen bestimmten Typen zu erstellen.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ISerializationHandler.Serialize(System.Object)">
            <summary>
            Serailisiert ein Objekt.
            </summary>
            <param name="data">Objekt</param>
            <returns>Rohdaten</returns>
        </member>
        <member name="M:Zyan.Communication.ISerializationHandler.Deserialize(System.Type,System.Byte[])">
            <summary>
            Deserialisiert Rohdaten in ein Objekt eines bestimmten Typs.
            </summary>
            <param name="dataType">Typ der Daten</param>
            <param name="data">Rohdaten</param>
            <returns>Objekt</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.ExpressionSerializationHandler.#ctor">
            <summary>
            Initializes Linq expressions serialization handler
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.ExpressionSerializationHandler.Serialize(System.Object)">
            <summary>
            Serializes Linq expression into raw byte array
            </summary>
            <param name="data">Linq expression</param>
            <returns>Raw data</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.ExpressionSerializationHandler.Deserialize(System.Type,System.Byte[])">
            <summary>
            Deserializes raw byte array
            </summary>
            <param name="dataType"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Zyan.InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractFormat">
            <summary>
            Implements methods that can be used to extend run-time behavior for an operation
            in either a service or client application.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractFormat.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
            <param name="description">
                The operation being examined. Use for examination only. 
                If the operation description is modified, the results are undefined.
            </param>
            <param name="parameters">The collection of objects that binding elements require to support the behavior.</param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractFormat.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
            <summary>
            Implements a modification or extension of the client across an operation.
            </summary>
            <param name="description">
                The operation being examined. Use for examination only. 
                If the operation description is modified, the results are undefined.
            </param>
            <param name="proxy">
                The run-time object that exposes customization properties for the operation
                described by operationDescription.
            </param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractFormat.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
            <summary>
            Implements a modification or extension of the service across an operation.
            </summary>
            <param name="description">
                The operation being examined. Use for examination only. If the operation
                description is modified, the results are undefined.
            </param>
            <param name="dispatch">
                The run-time object that exposes customization properties for the operation
                described by operationDescription.
            </param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractFormat.Validate(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Implement to confirm that the operation meets some intended criteria.
            </summary>
            <param name="description">
                The operation being examined. Use for examination only. If the operation
                description is modified, the results are undefined.
            </param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractFormat.ReplaceDataContractSerializerOperationBehavior(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Replaces the <see cref="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior">behaviour</see>
            of <paramref name="description"/> with a new instance of
            <see cref="T:Zyan.InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractSerializerOperationBehavior"/>.
            </summary>
            <param name="description">
                The <see cref="T:System.ServiceModel.Description.OperationDescription">description</see> to
                replace the <see cref="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior">behaviour</see> in.
            </param>
        </member>
        <member name="T:Zyan.Communication.Delegates.DelegateInterceptor">
            <summary>
            Interception fixture for remote delegate invocation.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.DelegateInterceptor.#ctor">
            <summary>
            Creates a new instance of the DelegateInterceptor class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.DelegateInterceptor.InvokeClientDelegate(System.Object[])">
            <summary>
            Invokes the wired client delegate.
            </summary>
            <param name="args">Parameters</param>
        </member>
        <member name="M:Zyan.Communication.Delegates.DelegateInterceptor.InitializeLifetimeService">
            <summary>
            Ensures unlimited Remoting lifetime.
            </summary>
            <returns>Always null</returns>
        </member>
        <member name="P:Zyan.Communication.Delegates.DelegateInterceptor.ClientDelegate">
            <summary>
            Gets or sets the client delegate.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Delegates.DelegateCorrelationInfo">
            <summary>
            Beschreibt Korrelationsinformationen zur Verdrahtung eines Server-Delegaten mit einer Client-Methode.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.DelegateCorrelationInfo.#ctor">
            <summary>
            Erzeugt eine neue Instanz der DelegateCorrelationInfo-Klasse.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.DelegateCorrelationInfo.DelegateMemberName">
            <summary>
            Gibt den Name der serverseitigen Delegat-Eigenschaft oder der Ereignisses zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.DelegateCorrelationInfo.IsEvent">
            <summary>
            Gibt zurück, ob es sich um ein Ereignis handelt, oder legt diest fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.DelegateCorrelationInfo.EventFilter">
            <summary>
            Gets or sets the event filter.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.DelegateCorrelationInfo.CorrelationID">
            <summary>
            Gibt den eindeutigen Korrelationsschlüssel zurück oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.DelegateCorrelationInfo.ClientDelegateInterceptor">
            <summary>
            Gibt die clientseitige Delegaten-Abfangvorrichtung zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ComponentRegistration">
            <summary>
            Describes a component registration.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Type)">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="implementationType">Implementation type of the component</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Type,System.Action{System.Object})">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="implementationType">Implementation type of the component</param>
            <param name="cleanUpHandler">Delegate of clean up method</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Type,Zyan.Communication.ActivationType)">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="implementationType">Implementation type of the component</param>
            <param name="activationType">Activation type (Singleton/SingleCall)</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Type,Zyan.Communication.ActivationType,System.Action{System.Object})">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="implementationType">Implementation type of the component</param>
            <param name="activationType">Activation type (Singleton/SingleCall)</param>
            <param name="cleanUpHandler">Delegate of clean up method</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Func{System.Object})">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="intializationHandler">Delegate of initialization method</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Func{System.Object},System.Action{System.Object})">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="intializationHandler">Delegate of initialization method</param>
            <param name="cleanUpHandler">Delegate of clean up method</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Func{System.Object},Zyan.Communication.ActivationType)">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="intializationHandler">Delegate of initialization method</param>
            <param name="activationType">Activation type (Singleton/SingleCall)</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Func{System.Object},Zyan.Communication.ActivationType,System.Action{System.Object})">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="intializationHandler">Delegate of initialization method</param>
            <param name="activationType">Activation type (Singleton/SingleCall)</param>
            <param name="cleanUpHandler">Delegate of clean up method</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Object)">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="singletonInstance">Singleton instance of the component</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Object,System.Action{System.Object})">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="singletonInstance">Singleton instance of the component</param>
            <param name="cleanUpHandler">Delegate of clean up method</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="implementationType">Implementation type of the component</param>
            <param name="uniqueName">Unique component name</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Type,System.String,System.Action{System.Object})">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="implementationType">Implementation type of the component</param>
            <param name="uniqueName">Unique component name</param>
            <param name="cleanUpHandler">Delegate of clean up method</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Type,System.String,Zyan.Communication.ActivationType)">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="implementationType">Implementation type of the component</param>
            <param name="uniqueName">Unique component name</param>
            <param name="activationType">Activation type (Singleton/SingleCall)</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Type,System.String,Zyan.Communication.ActivationType,System.Action{System.Object})">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="implementationType">Implementation type of the component</param>
            <param name="uniqueName">Unique component name</param>
            <param name="activationType">Activation type (Singleton/SingleCall)</param>
            <param name="cleanUpHandler">Delegate of clean up method</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Func{System.Object},System.String)">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="intializationHandler">Delegate of initialization method</param>
            <param name="uniqueName">Unique component name</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Func{System.Object},System.String,System.Action{System.Object})">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="intializationHandler">Delegate of initialization method</param>
            <param name="uniqueName">Unique component name</param>
            <param name="cleanUpHandler">Delegate of clean up method</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Func{System.Object},System.String,Zyan.Communication.ActivationType)">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="intializationHandler">Delegate of initialization method</param>
            <param name="uniqueName">Unique component name</param>
            <param name="activationType">Activation type (Singleton/SingleCall)</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Func{System.Object},System.String,Zyan.Communication.ActivationType,System.Action{System.Object})">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="intializationHandler">Delegate of initialization method</param>
            <param name="uniqueName">Unique component name</param>
            <param name="activationType">Activation type (Singleton/SingleCall)</param>
            <param name="cleanUpHandler">Delegate of clean up method</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Object,System.String)">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="singletonInstance">Singleton instance of the component</param>
            <param name="uniqueName">Unique component name</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Object,System.String,System.Action{System.Object})">
            <summary>
            Creates a new instance of the ComponentRegistration class.
            </summary>
            <param name="interfaceType">Interface type of the component</param>
            <param name="singletonInstance">Singleton instance of the component</param>
            <param name="uniqueName">Unique component name</param>
            <param name="cleanUpHandler">Delegate of clean up method</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>Unique name of the component</returns>
        </member>
        <member name="P:Zyan.Communication.ComponentRegistration.SyncLock">
            <summary>
            Returns the lock object for thread synchronization.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentRegistration.EventWirings">
            <summary>
            Returns a name-value-list of registered event wirings.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentRegistration.UniqueName">
            <summary>
            Gets or sets the unqiue name of the component.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentRegistration.InterfaceType">
            <summary>
            Gets or sets the interface type of the component. 
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentRegistration.ImplementationType">
            <summary>
            Gets or sets the implementation type of the component.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentRegistration.InitializationHandler">
            <summary>
            Gets or sets the delegate of the initialization method.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentRegistration.SingletonInstance">
            <summary>
            Gets or sets the current instance (Singleton activation only) of the registered component.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentRegistration.ActivationType">
            <summary>
            Gets or sets the activation type (Singleton/SingleCall)
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentRegistration.DisposeWithCatalog">
            <summary>
            Gets or sets, if the components should be disposed together with its owning component catalog.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentRegistration.CleanUpHandler">
            <summary>
            Gets or sets a delegate of a method for handling resource clean up explicitly.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink">
            <summary>
            Clientseitige Kanalsenke für verschlüsselte Kommunikation.
            <remarks>
            Benötigt auf der Serverseite CryptoServerChannelSink als Gegenstück!
            </remarks>
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.#ctor(System.Runtime.Remoting.Channels.IClientChannelSink,System.String,System.Boolean,System.Int32)">
            <summary>Erstellt eine neue Instanz von CryptoClientChannelSink</summary>
            <param name="nextSink">Nächste Kanalsenke in der Senkenkette</param>
            <param name="algorithm">Name des symmetrischen Verschlüsselungsalgorithmus</param>
            <param name="oaep">Gibt an, ob OAEP-Padding verwendet werden soll, oder nicht</param>
            <param name="maxAttempts">Maximale Anzahl der Verarbeitungsversuche</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.StartSecureTransaction(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>Startet eine neue Sicherheitstransaktion</summary>
            <param name="msg">Remoting-Nachricht</param>
            <param name="requestHeaders">Anfrage-Header-Auflistung</param>
            <returns>Eindeutige Kennung der Sicherheitstransaktion</returns>		
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.ObtainSharedKey(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Fordert einen gemeinsamen Schlüssel vom Server an.
            </summary>
            <param name="msg">Original-Remoting-Nachricht</param>
            <returns>Verschlüsselungsanbieter</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.ClearSharedKey">
            <summary>
            Löscht den gemeinsamen Schlüssel und die eindeutige Sicherheitstransaktionskennung.
            </summary>		
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.CreateSharedKeyRequest(System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>Erzeugt eine Anfrage nach einem gemeinsamen Schlüssel</summary>
            <param name="requestHeaders">Transport-Header-Auflistung</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.DecryptResponse(System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>Entschlüsselt den eingehenden Antwort-Datenstrom</summary>
            <param name="responseStream">Antwort-Datenstrom</param>
            <param name="responseHeaders">Antwort-Transportheader</param>
            <returns>Entschlüsselter Datenstrom (oder null, wenn die Verschlüsselung fehlgeschlagen ist)</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.ProcessSharedKeyResponse(System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>Verarbeitet die Antwort der Servers einer Anfrage nach einen Gemeinsamen Schlüssel</summary>
            <param name="responseHeaders">Transport-Header-Auflistung</param>
            <returns>Verschlüsselungsanbieter</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.EncryptMessage(System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>Verschlüsselt eine bestimmte Remoting-Nachricht</summary>
            <param name="requestHeaders">Anfrage-Transport-Header-Auflistung</param>
            <param name="requestStream">Anfrage-Datenstrom</param>
            <returns>Verschlüsselter Datenstrom</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.ProcessEncryptedMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            Verarbeitet die verschlüsselte Nachricht.
            </summary>
            <param name="msg">Original Remotingnachricht</param>
            <param name="requestHeaders">Original Anfrage-Header</param>
            <param name="requestStream">Original Anfrage-Datenstrom (unverschlüsselt)</param>
            <param name="responseHeaders">Antwort-Header</param>
            <param name="responseStream">Antwort-Datenstrom (unverschlüsselt nach Verarbeitung!)</param>
            <returns>Wahr, wenn Verarbeitung erfolgreich, ansonsten Falsch</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.ProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>Verarbeitet eine bestimmte Remoting-Nachricht</summary>
            <param name="msg">Remoting-Nachricht</param>
            <param name="requestHeaders">Anfrage-Header-Auflistung</param>
            <param name="requestStream">Anfrage-Datenstrom</param>
            <param name="responseHeaders">Antwort-Header-Auflistung</param>
            <param name="responseStream">Antwort-Datenstrom</param>		
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.GetRequestStream(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>
            Gibt den Anfrage-Datenstrom zurück.
            </summary>
            <param name="msg">Remoting-Nachricht</param>
            <param name="headers">Header-Informationen</param>
            <returns>Anfrage-Datenstrom</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.AsyncProcessRequest(System.Runtime.Remoting.Channels.IClientChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            Verarbeitet eine Anfragenachricht asynchron.
            </summary>
            <param name="sinkStack">Senkenstapel</param>
            <param name="msg">Remoting-Nachricht</param>
            <param name="headers">Anfrage-Header-Auflistung</param>
            <param name="stream">Anfrage-Datenstrom</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            Verarbeitet eine Antwort-Nachricht asynchron.
            </summary>
            <param name="sinkStack">Senkenstapel</param>
            <param name="state">Asynchroner Verarbeitungsstatus</param>
            <param name="headers">Anfrage-Header-Auflistung</param>
            <param name="stream">Anfrage-Datenstrom</param>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.NextChannelSink">
            <summary>
            Gibt die nächste Kanalsenke in der Senkenkette zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.AsyncProcessingState">
            <summary>
            Speichert Informationen über den asynchronen Verarbeitungsstatus.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.AsyncProcessingState.#ctor(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream@,System.Guid)">
            <summary>Erzeugt eine neue Instanz von AsyncProcessingState</summary>
            <param name="msg">Remoting-Nachricht</param>
            <param name="headers">Header-Auflistung</param>
            <param name="stream">Eingabe-Datenstrom</param>
            <param name="id">Eindeutige Kennung der Sicherheitstransaktion</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.AsyncProcessingState.DuplicateStream(System.IO.Stream@)">
            <summary>Kopiert einen bestimmten Datenstrom</summary>
            <param name="stream">Datenstrom</param>
            <returns>Kopie des Datenstroms</returns>			
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.AsyncProcessingState.Stream">
            <summary>
            Gibt den Eingabedatenstrom zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.AsyncProcessingState.Headers">
            <summary>
            Gibt die Header-Auflistung zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.AsyncProcessingState.Message">
            <summary>
            Gibt die Remoting-Nachricht zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.AsyncProcessingState.SecureTransactionID">
            <summary>
            Gibt die eindeutige Kennung der Sicherheitstransaktion zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel">
            <summary name="TcpExChannel">
            A replacement for the standard Tcp remoting channel that allows communication in both directions over a single tcp connection.
            <b>Remoting Configuration Parameters</b>
            <list type="bullet">
            <item><term>port</term><description>The tcp port the channel should listen on.  If this is specified, the channel will automatically start listening on that port.</description></item>
            <item><term>listen</term><description>Indicates the channel should start listening.  This is not required if the port parameter is specified.  If no port is specified the channel will choose a random unused port.</description></item>
            <item><term>bufferSize</term><description>The size of the buffer to use when sending data over a connection.</description></item>
            <item><term>priority</term><description>The priority of the channel.</description></item>
            </list>
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel"/> class with default settings (client mode).
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel"/> class (server mode).
            </summary>
            <param name="port">Tcp port.</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel"/> class.
            </summary>
            <param name="listen">if set to <c>true</c>, the channel will listen for incoming connections.</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.#ctor(System.Runtime.Serialization.Formatters.TypeFilterLevel,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel"/> class.
            </summary>
            <param name="filterLevel">The type filter level.</param>
            <param name="listen">if set to <c>true</c>, the channel will listen for incoming connections.</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.#ctor(System.Runtime.Serialization.Formatters.TypeFilterLevel,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel"/> class.
            </summary>
            <param name="filterLevel">The type filter level.</param>
            <param name="port">Tcp port.</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel"/> class.
            </summary>
            <param name="properties">Channel initialization properties. <see cref="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel"/></param>
            <param name="clientSinkProvider">The client sink provider.</param>
            <param name="serverSinkProvider">The server sink provider.</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.Parse(System.String,System.String@)">
            <summary>
            Returns the object URI as an out parameter, and the URI of the current channel as the return value.
            </summary>
            <param name="url">The URL of the object.</param>
            <param name="objectURI">When this method returns, contains a <see cref="T:System.String"/> that holds the object URI. This parameter is passed uninitialized.</param>
            <returns>
            The URI of the current channel, or null if the URI does not belong to this channel.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.CreateMessageSink(System.String,System.Object,System.String@)">
            <summary>
            Returns a channel message sink that delivers messages to the specified URL or channel data object.
            </summary>
            <param name="url">The URL to which the new sink will deliver messages. Can be null.</param>
            <param name="remoteChannelData">The channel data object of the remote host to which the new sink will deliver messages. Can be null.</param>
            <param name="objectURI">When this method returns, contains a URI of the new channel message sink that delivers messages to the specified URL or channel data object. This parameter is passed uninitialized.</param>
            <returns>
            A channel message sink that delivers messages to the specified URL or channel data object, or null if the channel cannot connect to the given endpoint.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.StartListening(System.Object)">
            <summary>
            Instructs the current channel to start listening for requests.
            </summary>
            <param name="data">Optional initialization information.</param>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.StopListening(System.Object)">
            <summary>
            Instructs the current channel to stop listening for requests.
            </summary>
            <param name="data">Optional state information for the channel.</param>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.GetUrlsForUri(System.String)">
            <summary>
            Returns an array of all the URLs for a URI.
            </summary>
            <param name="objectURI">The URI for which URLs are required.</param>
            <returns>
            An array of the URLs.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.TcpKeepAliveEnabled">
            <summary>
            Enables or disables TCP KeepAlive.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.TcpKeepAliveTime">
            <summary>
            Gets or sets the TCP KeepAlive time in milliseconds.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.TcpKeepAliveInterval">
            <summary>
            Gets or sets the TCP KeepAlive interval in milliseconds
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.ChannelID">
            <summary>
            Gets the unique identifier of the channel.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.Port">
            <summary>
            Gets the Tcp port.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.IsListening">
            <summary>
            Gets a value indicating whether this channel is listening to incoming connections.
            </summary>
            <value>
            	<c>true</c> if this instance is listening to incoming connections; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.MaxRetries">
            <summary>
            Gets or sets the maximum number of connection retry attempts.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.RetryDelay">
            <summary>
            Gets or sets the delay after a retry attempt in milliseconds.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.ChannelName">
            <summary>
            Gets the name of the channel.
            </summary>
            <returns>The name of the channel.</returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
            <PermissionSet>
             <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure"/>
            </PermissionSet>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.ChannelPriority">
            <summary>
            Gets the priority of the channel.
            </summary>
            <returns>An integer that indicates the priority of the channel.</returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
            <PermissionSet>
             <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure"/>
            </PermissionSet>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.ChannelData">
            <summary>
            Gets the channel-specific data.
            </summary>
            <returns>The channel data.</returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure"/>
            </PermissionSet>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.DuplicateConnectionException">
            <summary>
            This exception should be thrown, when an attempt to create a duplicate connection is detected.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.DuplicateConnectionException.#ctor(System.Guid)">
            <summary>
            Creates a new instance of the DuplicateConnectionException class.
            </summary>
            <param name="channelID">Unique channel identifier</param>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.DuplicateConnectionException.ChannelID">
            <summary>
            Gets the unique channel identifier.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Notification.NotificationEventArgs">
            <summary>
            Beschreibt Ereignisargumente für Benachrichtigungs-Ereignisse.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationEventArgs.#ctor(System.Object)">
            <summary>
            Erzeugt eine neue Instanz von NotificationEventArgs.
            </summary>
            <param name="message">Nachricht</param>
        </member>
        <member name="P:Zyan.Communication.Notification.NotificationEventArgs.Message">
            <summary>
            Gibt die Nachricht zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Types.InterLinqPropertyInfo">
            <summary>
            InterLINQ representation of <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <seealso cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/>
            <seealso cref="T:System.Reflection.PropertyInfo"/>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqPropertyInfo.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqPropertyInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="fieldInfo">Represented CLR <see cref="T:System.Reflection.PropertyInfo"/>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqPropertyInfo.Initialize(System.Reflection.MemberInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="memberInfo">Represented <see cref="T:System.Reflection.MemberInfo"/></param>
            <seealso cref="M:Zyan.InterLinq.Types.InterLinqMemberInfo.Initialize(System.Reflection.MemberInfo)"/>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqPropertyInfo.GetClrVersion">
            <summary>
            Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <returns>Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqPropertyInfo.Equals(System.Object)">
            <summary>
            Compares <paramref name="obj"/> to this instance.
            </summary>
            <param name="obj"><see langword="object"/> to compare.</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqPropertyInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see langword="object"/>.</returns>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqPropertyInfo.MemberType">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberTypes">MemberType</see>.
            </summary>
            <seealso cref="P:Zyan.InterLinq.Types.InterLinqMemberInfo.MemberType"/>
            <seealso cref="P:System.Reflection.PropertyInfo.MemberType"/>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqPropertyInfo.PropertyType">
            <summary>
            Gets or sets the <see cref="T:Zyan.InterLinq.Types.InterLinqType"/> of this property.
            </summary>
            <seealso cref="P:System.Reflection.PropertyInfo.PropertyType"/>
        </member>
        <member name="T:Zyan.Communication.Delegates.FilteredSystemEventHandler`1">
            <summary>
            Represents filtered event handler of type System.EventHandler{TEventArgs}.
            </summary>
            <typeparam name="TEventArgs">The type of the event args.</typeparam>
        </member>
        <member name="T:Zyan.Communication.Delegates.IFilteredEventHandler">
            <summary>
            Interface for filtered event handlers.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.IFilteredEventHandler.EventHandler">
            <summary>
            Gets the event handler.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.IFilteredEventHandler.EventFilter">
            <summary>
            Gets the event filter.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.IFilteredEventHandler.FilterLocally">
            <summary>
            Gets or sets a value indicating whether this event filter should also work locally.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.FilteredSystemEventHandler`1.#ctor(System.EventHandler{`0},Zyan.Communication.Delegates.IEventFilter,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Delegates.FilteredSystemEventHandler`1"/> class.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="eventFilter">The event filter.</param>
            <param name="filterLocally">Whether the filter should also work when used locally.</param>
        </member>
        <member name="M:Zyan.Communication.Delegates.FilteredSystemEventHandler`1.op_Implicit(Zyan.Communication.Delegates.FilteredSystemEventHandler{`0})~System.EventHandler{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:Zyan.Communication.Delegates.FilteredSystemEventHandler`1"/>
            to <see cref="T:System.EventHandler`1"/>.
            </summary>
            <param name="filteredEventHandler">The filtered event handler.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="P:Zyan.Communication.Delegates.FilteredSystemEventHandler`1.EventHandler">
            <summary>
            Gets the event handler.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.FilteredSystemEventHandler`1.EventFilter">
            <summary>
            Gets the event filter.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.FilteredSystemEventHandler`1.FilterLocally">
            <summary>
            Gets or sets a value indicating whether this event filter should also work locally.
            </summary>
        </member>
        <member name="T:Zyan.Communication.SessionMgmt.ISessionVariableAdapter">
            <summary>
            Interface for the session variable collection indexed by variable names.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.ISessionVariableAdapter.SetSessionVariable(System.String,System.Object)">
            <summary>
            Set the new value for a session variable with the given name.
            </summary>
            <param name="name">Variable name.</param>
            <param name="value">Variable value.</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.ISessionVariableAdapter.GetSessionVariable(System.String)">
            <summary>
            Get an untyped value of the session variable with the given name.
            </summary>
            <param name="name">Variable name</param>
            <returns>Variable value.</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.ISessionVariableAdapter.GetSessionVariable``1(System.String)">
            <summary>
            Get strongly-typed value of the session variable with the given name.
            </summary>
            <typeparam name="T">Variable type.</typeparam>
            <param name="name">Variable name.</param>
            <returns>Variable value.</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.ISessionVariableAdapter.GetSessionVariable``1(System.String,``0)">
            <summary>
            Get strongly-typed value of the session variable with the given name.
            </summary>
            <typeparam name="T">Variable type.</typeparam>
            <param name="name">Variable name.</param>
            <param name="defaultValue">Default value to return if the variable is not defined.</param>
            <returns>Variable value.</returns>
        </member>
        <member name="P:Zyan.Communication.SessionMgmt.ISessionVariableAdapter.Item(System.String)">
            <summary>
            Gets or sets the variable value.
            </summary>
            <param name="variableName">Variable name.</param>
            <returns>The value of the session variable.</returns>
        </member>
        <member name="T:Zyan.Communication.InvokeCanceledException">
            <summary>
            Ausnahme, die geworfen wird, wenn ein Methodenaufruf abgebrochen wurde.
            </summary>
        </member>
        <member name="M:Zyan.Communication.InvokeCanceledException.#ctor">
            <summary>
            Erstellt eine neue Instanz von InvokeCanceledException.
            </summary>
        </member>
        <member name="M:Zyan.Communication.InvokeCanceledException.#ctor(System.String)">
            <summary>
            Erstellt eine neue Instanz von InvokeCanceledException.
            </summary>
            <param name="message">Fehlermeldung</param>
        </member>
        <member name="M:Zyan.Communication.InvokeCanceledException.#ctor(System.String,System.Exception)">
            <summary>
            Erstellt eine neue Instanz von InvokeCanceledException.
            </summary>
            <param name="message">Fehlermeldung</param>
            <param name="innerException">Ausnahme, welche diese Ausnahme verursacht hat</param>
        </member>
        <member name="M:Zyan.Communication.InvokeCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Erstellt eine neue Instanz von InvokeCanceledException.
            </summary>
            <param name="info">Serialisierungsinformationen</param>
            <param name="context">Streaming-Kontext der Serialisierung</param>
        </member>
        <member name="M:Zyan.Communication.InvokeCanceledException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gibt Objektdaten für die Serialisierung zurück.
            </summary>
            <param name="info">Serialisierungsinformationen</param>
            <param name="context">Streaming-Kontext der Serialisierung</param>
        </member>
        <member name="T:Zyan.InterLinq.Types.InterLinqType">
            <summary>
            InterLINQ representation of <see cref="T:System.Type"/>.
            </summary>
            <seealso cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/>
            <seealso cref="T:System.Type"/>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqType.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqType.#ctor(System.Type)">
            <summary>
            Initializes this class.
            </summary>
            <param name="representedType">Represented CLR <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqType.Initialize(System.Reflection.MemberInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="memberInfo">Represented <see cref="T:System.Reflection.MemberInfo"/></param>
            <seealso cref="M:Zyan.InterLinq.Types.InterLinqMemberInfo.Initialize(System.Reflection.MemberInfo)"/>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqType.CreateClrType">
            <summary>
            Creates and returns the CLR <see cref="T:System.Type"/>.
            </summary>
            <returns>Creates and returns the CLR <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqType.GetClrVersion">
            <summary>
            Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <returns>Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqType.Equals(System.Object)">
            <summary>
            Compares <paramref name="obj"/> to this instance.
            </summary>
            <param name="obj"><see langword="object"/> to compare.</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see langword="object"/>.</returns>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqType.IsGeneric">
            <summary>
            Gets or sets if this is a generic <see cref="T:System.Type"/>.
            </summary>
            <seealso cref="P:System.Type.IsGenericType"/>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqType.MemberType">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberTypes">MemberType</see>.
            </summary>
            <seealso cref="P:System.Type.MemberType"/>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqType.RepresentedType">
            <summary>
            Gets or sets the represented <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqType.GenericArguments">
            <summary>
            Gets or sets the generic Arguments.
            </summary>
            <seealso cref="M:System.Type.GetGenericArguments"/>
        </member>
        <member name="T:Zyan.InterLinq.Types.InterLinqMethodInfo">
            <summary>
            InterLINQ representation of <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <seealso cref="T:Zyan.InterLinq.Types.InterLinqMethodBase"/>
            <seealso cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/>
            <seealso cref="T:System.Reflection.MethodInfo"/>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqMethodInfo.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqMethodInfo.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="methodInfo">Represented CLR <see cref="T:System.Reflection.MethodInfo"/>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqMethodInfo.Initialize(System.Reflection.MemberInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="memberInfo">Represented <see cref="T:System.Reflection.MemberInfo"/></param>
            <seealso cref="M:Zyan.InterLinq.Types.InterLinqMemberInfo.Initialize(System.Reflection.MemberInfo)"/>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqMethodInfo.GetClrVersion">
            <summary>
            Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <returns>Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqMethodInfo.Equals(System.Object)">
            <summary>
            Compares <paramref name="obj"/> to this instance.
            </summary>
            <param name="obj"><see langword="object"/> to compare.</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqMethodInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see langword="object"/>.</returns>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqMethodInfo.MemberType">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberTypes">MemberType</see>.
            </summary>
            <seealso cref="P:Zyan.InterLinq.Types.InterLinqMemberInfo.MemberType"/>
            <seealso cref="P:System.Reflection.MethodInfo.MemberType"/>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqMethodInfo.ReturnType">
            <summary>
            Gets or sets the <see cref="T:Zyan.InterLinq.Types.InterLinqType">ReturnType</see>.
            </summary>
            <seealso cref="P:System.Reflection.MethodInfo.ReturnType"/>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqMethodInfo.IsGeneric">
            <summary>
            Returns true if the <see cref="T:Zyan.InterLinq.Types.InterLinqMethodInfo"/> is generic.
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqMethodInfo.GenericArguments">
            <summary>
            Gets or sets the generic arguments.
            </summary>
            <seealso cref="M:System.Reflection.MethodInfo.GetGenericArguments"/>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqMethodInfo.IsStatic">
            <summary>
            Returns true if the <see cref="T:Zyan.InterLinq.Types.InterLinqMethodInfo"/> is static.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableUnaryExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.UnaryExpression"/>.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableExpression.#ctor(System.Linq.Expressions.Expression,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.Expression"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableExpression.#ctor(System.Linq.Expressions.ExpressionType,System.Type,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.ExpressionType"/>, a <see cref="P:Zyan.InterLinq.Expressions.SerializableExpression.Type"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="nodeType">The <see cref="T:System.Linq.Expressions.ExpressionType"/> of the <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="type">The <see cref="P:Zyan.InterLinq.Expressions.SerializableExpression.Type"/> of the <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableExpression.ToString">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>A <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableExpression.HashCode">
            <summary>
            The hashcode of the original <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableExpression.NodeType">
            <summary>
            See <see cref="P:System.Linq.Expressions.Expression.NodeType"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableExpression.Type">
            <summary>
            See <see cref="P:System.Linq.Expressions.Expression.Type"/>
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableUnaryExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableUnaryExpression.#ctor(System.Linq.Expressions.UnaryExpression,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.UnaryExpression"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableUnaryExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableUnaryExpression.Operand">
            <summary>
            See <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableUnaryExpression.Method">
            <summary>
            See <see cref="P:System.Linq.Expressions.UnaryExpression.Method"/>
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.MemberListBinding"/>.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberBinding">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.MemberBinding"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberBinding.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberBinding.#ctor(System.Linq.Expressions.MemberBinding,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.MemberBinding"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="memberBinding">The original, not serializable <see cref="T:System.Linq.Expressions.MemberBinding"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberBinding.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.MemberBinding"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberBinding.ToString">
            <summary>
            Returns a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.MemberBinding"/>.
            </summary>
            <returns>Returns a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.MemberBinding"/>.</returns>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberBinding.Member">
            <summary>
            See <see cref="P:System.Linq.Expressions.MemberBinding.Member"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberBinding.BindingType">
            <summary>
            See <see cref="P:System.Linq.Expressions.MemberBinding.BindingType"/>
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding.#ctor(System.Linq.Expressions.MemberListBinding,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.MemberListBinding"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="memberListBinding">The original, not serializable <see cref="T:System.Linq.Expressions.MemberBinding"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.MemberBinding"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding.Initializers">
            <summary>
            See <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers"/>
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableListInitExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.ListInitExpression"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableListInitExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableListInitExpression.#ctor(System.Linq.Expressions.ListInitExpression,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.ListInitExpression"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableListInitExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableListInitExpression.NewExpression">
            <summary>
            See <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableListInitExpression.Initializers">
            <summary>
            See <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers"/>
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor">
            <summary>
            A visitor for <see cref="P:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Expression">Expressions</see>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Creates a new <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor"/> with an <see cref="P:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/>.
            </summary>
            <param name="expression"><see cref="P:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/> to initialize the visitor.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Visit">
            <summary>
            Visit the <see cref="P:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/> in this visitor.
            </summary>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Visit``1(System.Linq.Expressions.Expression)">
            <summary>
            Visits an <see cref="P:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/> and returns a result of the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the returned value.</typeparam>
            <param name="expression"><see cref="P:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/> to visit.</param>
            <returns>Returns a result of the type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visit an <see cref="P:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/>.
            </summary>
            <param name="expression"><see cref="P:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitCollection``1(System.Collections.IEnumerable)">
            <summary>
            Visit a collection of <see cref="P:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Expression">expressions</see>.
            </summary>
            <typeparam name="T">Type of the visit results.</typeparam>
            <param name="enumerable">Collection to visit.</param>
            <returns>Returns a list of visit results.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitObject``1(System.Object)">
            <summary>
            Visits an <see langword="object"/> and returns a result of the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the returned value.</typeparam>
            <param name="objectToVisit"><see langword="object"/> to visit.</param>
            <returns>Returns a result of the type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitObject(System.Object)">
            <summary>
            Visit an <see langword="object"/>.
            </summary>
            <param name="objectToVisit"><see langword="object"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitObjectCollection``1(System.Collections.IEnumerable)">
            <summary>
            Visit a collection of <see langword="object">objects</see>.
            </summary>
            <typeparam name="T">Type of the visit results.</typeparam>
            <param name="enumerable">Collection to visit.</param>
            <returns>Returns a list of visit results.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.BinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.BinaryExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitConditionalExpression(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.ConditionalExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ConditionalExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitConstantExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ConstantExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitTypedExpression``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.Expression`1"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression`1"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitInvocationExpression(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.InvocationExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.InvocationExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitLambdaExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.LambdaExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.LambdaExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitListInitExpression(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.ListInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ListInitExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.MemberExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MemberExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberInitExpression(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.MemberInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MemberInitExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MethodCallExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitNewArrayExpression(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.NewArrayExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.NewArrayExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitNewExpression(System.Linq.Expressions.NewExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.NewExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.NewExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitParameterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.ParameterExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ParameterExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitTypeBinaryExpression(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.TypeBinaryExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitUnaryExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.UnaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.UnaryExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.ElementInit"/>.
            </summary>
            <param name="elementInit"><see cref="T:System.Linq.Expressions.ElementInit"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.MemberAssignment"/>.
            </summary>
            <param name="memberAssignment"><see cref="T:System.Linq.Expressions.MemberAssignment"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.MemberListBinding"/>.
            </summary>
            <param name="memberListBinding"><see cref="T:System.Linq.Expressions.MemberListBinding"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.MemberMemberBinding"/>.
            </summary>
            <param name="memberMemberBinding"><see cref="T:System.Linq.Expressions.MemberMemberBinding"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitObjectPrecondition(System.Object)">
            <summary>
            Precondition of the method <see cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitObject(System.Object)"/>.
            </summary>
            <param name="objectToVisit"><see langword="object"/> to visit.</param>
            <returns>True, if the condition is true. False, if not.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitObjectHandleNull">
            <summary>
            Handle when the method <see cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitObject(System.Object)"/> is <see langword="null"/>.
            </summary>
            <returns>Returns the result of a <see langword="null"/> input.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitHandleNull">
            <summary>
            Handle when the method <see cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)"/> is <see langword="null"/>.
            </summary>
            <returns>Returns the result of a <see langword="null"/> input.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitPrecondition(System.Linq.Expressions.Expression)">
            <summary>
            Precondition of the method <see cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)"/>.
            </summary>
            <param name="exp"><see cref="P:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/> to visit.</param>
            <returns>True, if the condition is true. False, if not.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitUnknownExpression(System.Linq.Expressions.Expression)">
            <summary>
            Handles the case, when the type of the <see cref="P:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/> is unkonwn.
            </summary>
            <param name="expression">The unknown <see cref="P:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/>.</param>
            <returns>Returns the result of a unknown <see cref="P:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitUnkownObject(System.Object)">
            <summary>
            Handles the case, when the type of the <see langword="object"/> is unkonwn.
            </summary>
            <param name="unknownObject">The unknown <see langword="object"/>.</param>
            <returns>Returns the result of a unknown <see langword="object"/>.</returns>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Expression">
            <summary>
            The <see cref="P:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/> to visit.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.ZyanEntityQueryHandler">
            <summary>
            Simple IQueryable server query handler
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.IQueryHandler">
            <summary>
            Interface providing methods to get <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.IQueryHandler.Get(System.Type)">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <param name="type">Type of the returned <see cref="T:System.Linq.IQueryable"/>.</param>
            <returns>Returns an <see cref="T:System.Linq.IQueryable"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.IQueryHandler.Get``1">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="T">Generic Argument of the returned <see cref="T:System.Linq.IQueryable`1"/>.</typeparam>
            <returns>Returns an <see cref="T:System.Linq.IQueryable`1"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.IQueryHandler.StartSession">
            <summary>
            Tells the <see cref="T:Zyan.InterLinq.IQueryHandler"/> to start a new the session.
            </summary>
            <returns>True, if the session creation was successful. False, if not.</returns>
        </member>
        <member name="M:Zyan.InterLinq.IQueryHandler.CloseSession">
            <summary>
            Tells the <see cref="T:Zyan.InterLinq.IQueryHandler"/> to close the current session.
            </summary>
            <returns>True, if the session closing was successful. False, if not.</returns>
        </member>
        <member name="M:Zyan.InterLinq.ZyanEntityQueryHandler.#ctor(System.Func{System.Type,System.Linq.IQueryable})">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.InterLinq.ZyanEntityQueryHandler"/> class.
            </summary>
            <param name="handler">The query handler (returns <see cref="T:System.Linq.IQueryable"/> for the given <see cref="T:System.Type"/>).</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanEntityQueryHandler.#ctor(Zyan.InterLinq.IEntitySource)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.InterLinq.ZyanEntityQueryHandler"/> class.
            </summary>
            <param name="entitySource">The entity source.</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanEntityQueryHandler.Get``1">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="T">Generic Argument of the returned <see cref="T:System.Linq.IQueryable`1"/>.</typeparam>
            <returns>
            Returns an <see cref="T:System.Linq.IQueryable`1"/>.
            </returns>
        </member>
        <member name="M:Zyan.InterLinq.ZyanEntityQueryHandler.Get(System.Type)">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <param name="type">Type of the returned <see cref="T:System.Linq.IQueryable"/>.</param>
            <returns>
            Returns an <see cref="T:System.Linq.IQueryable"/>.
            </returns>
        </member>
        <member name="M:Zyan.InterLinq.ZyanEntityQueryHandler.CloseSession">
            <summary>
            Tells the <see cref="T:Zyan.InterLinq.IQueryHandler"/> to close the current session.
            </summary>
            <returns>
            True, if the session closing was successful. False, if not.
            </returns>
        </member>
        <member name="M:Zyan.InterLinq.ZyanEntityQueryHandler.StartSession">
            <summary>
            Tells the <see cref="T:Zyan.InterLinq.IQueryHandler"/> to start a new the session.
            </summary>
            <returns>
            True, if the session creation was successful. False, if not.
            </returns>
        </member>
        <member name="T:Zyan.InterLinq.Communication.Wcf.ServiceHelper">
            <summary>
            Helper class providing different methods required by 
            WCF Clients / Servers.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.ServiceHelper.GetEndpoint">
            <summary>
            Returns the default Service <see cref="T:System.ServiceModel.EndpointAddress"/>.
            </summary>
            <returns>Returns the default Service <see cref="T:System.ServiceModel.EndpointAddress"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.ServiceHelper.GetEndpoint(System.String,System.String,System.String)">
            <summary>
            Returns a Service <see cref="T:System.ServiceModel.EndpointAddress"/>.
            </summary>
            <param name="serverAddress">Address of the Server.</param>
            <param name="serverPort">Port of the Server.</param>
            <param name="servicePath">Path of the WCF Service.</param>
            <returns>Returns a Service <see cref="T:System.ServiceModel.EndpointAddress"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.ServiceHelper.GetServiceUri">
            <summary>
            Returns the default Service URI as <see langword="string" />.
            </summary>
            <returns>Returns the default Service URI as <see langword="string" />.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.ServiceHelper.GetServiceUri(System.String,System.String,System.String)">
            <summary>
            Returns a Service URI as <see langword="string"/>.
            </summary>
            <param name="serverAddress">Address of the Server.</param>
            <param name="serverPort">Port of the Server.</param>
            <param name="servicePath">Path of the WCF Service.</param>
            <returns>Returns a Service URI as <see langword="string"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.ServiceHelper.GetDefaultBinding">
            <summary>
            Returns a default <see cref="T:System.ServiceModel.NetTcpBinding"/>.
            </summary>
            <remarks>
            The <see cref="T:System.ServiceModel.NetTcpBinding"/> looks like this:
            
            <list type="list">
                <listheader>
                    <term>Property</term>
                    <description>Value</description>
                </listheader>
                <item>
                    <term><see cref="P:System.ServiceModel.NetTcpSecurity.Mode">Security.Mode</see></term>
                    <description><see cref="F:System.ServiceModel.SecurityMode.None"/></description>
                </item>
                <item>
                    <term><see cref="P:System.ServiceModel.NetTcpBinding.MaxBufferSize"/></term>
                    <description><see cref="F:System.Int32.MaxValue"/></description>
                </item>
                <item>
                    <term><see cref="P:System.ServiceModel.NetTcpBinding.MaxReceivedMessageSize"/></term>
                    <description><see cref="F:System.Int32.MaxValue"/></description>
                </item>
                <item>
                    <term><see cref="P:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength">ReaderQuotas.MaxArrayLength</see></term>
                    <description><see cref="F:System.Int32.MaxValue"/></description>
                </item>
                <item>
                    <term><see cref="P:System.ServiceModel.Channels.Binding.OpenTimeout">OpenTimeout</see></term>
                    <description>new <see cref="T:System.TimeSpan"/>(0, 10, 0) = 10 Minutes</description>
                </item>
                <item>
                    <term><see cref="P:System.ServiceModel.Channels.Binding.CloseTimeout">CloseTimeout</see></term>
                    <description>new <see cref="T:System.TimeSpan"/>(0, 10, 0) = 10 Minutes</description>
                </item>
                <item>
                    <term><see cref="P:System.ServiceModel.Channels.Binding.SendTimeout">SendTimeout</see></term>
                    <description>new <see cref="T:System.TimeSpan"/>(0, 10, 0) = 10 Minutes</description>
                </item>
            </list>
            </remarks>
            <returns>Returns a default <see cref="T:System.ServiceModel.NetTcpBinding"/>.</returns>
        </member>
        <member name="T:Zyan.Communication.Delegates.SessionEventArgs">
            <summary>
            Base class for session-bound event arguments.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.SessionEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Delegates.SessionEventArgs"/> class.
            Session identity is taken from ServerSession.CurrentSession.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.SessionEventArgs.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Delegates.SessionEventArgs"/> class.
            </summary>
            <param name="sessionId">Target session id (Guid.Empty matches all sessions).</param>
        </member>
        <member name="P:Zyan.Communication.Delegates.SessionEventArgs.SessionID">
            <summary>
            Gets the session ID.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Delegates.FilteredEventHandler">
            <summary>
            Helper class for filtered event handlers.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.FilteredEventHandler.Create``1(System.EventHandler{``0},Zyan.Communication.Delegates.IEventFilter,System.Boolean)">
            <summary>
            Creates filtered event handler of type EventHandler{TEventArgs}.
            </summary>
            <typeparam name="TEventArgs">The type of the event args.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="eventFilter">The event filter.</param>
            <param name="filterLocally">Whether the filter should also work when used locally.</param>
        </member>
        <member name="M:Zyan.Communication.Delegates.FilteredEventHandler.Create(System.EventHandler,Zyan.Communication.Delegates.IEventFilter,System.Boolean)">
            <summary>
            Creates filtered event handler of type EventHandler.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="eventFilter">The event filter.</param>
            <param name="filterLocally">Whether the filter should also work when used locally.</param>
        </member>
        <member name="M:Zyan.Communication.Delegates.FilteredEventHandler.Create``1(``0,Zyan.Communication.Delegates.IEventFilter,System.Boolean)">
            <summary>
            Creates non-standard filtered event handler of type TDelegate.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="eventFilter">The event filter.</param>
            <param name="filterLocally">Whether the filter should also work when used locally.</param>
        </member>
        <member name="M:Zyan.Communication.Delegates.FilteredEventHandler.Create``1(System.EventHandler{``0},System.Linq.Expressions.Expression{System.Func{System.Object,``0,System.Boolean}},System.Boolean)">
            <summary>
            Creates filtered event handler of type EventHandler{TEventArgs} using the specified filter predicate.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="expression">The predicate expression.</param>
            <param name="filterLocally">Whether the filter should also work when used locally.</param>
        </member>
        <member name="M:Zyan.Communication.Delegates.FilteredEventHandler.AddFilter``1(System.EventHandler{``0},Zyan.Communication.Delegates.IEventFilter,System.Boolean)">
            <summary>
            Creates filtered event handler of type EventHandler{TEventArgs}.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="eventFilter">The event filter.</param>
            <param name="filterLocally">Whether the filter should also work when used locally.</param>
        </member>
        <member name="M:Zyan.Communication.Delegates.FilteredEventHandler.AddFilter(System.EventHandler,Zyan.Communication.Delegates.IEventFilter,System.Boolean)">
            <summary>
            Creates filtered event handler of type EventHandler.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="eventFilter">The event filter.</param>
            <param name="filterLocally">Whether the filter should also work when used locally.</param>
        </member>
        <member name="M:Zyan.Communication.Delegates.FilteredEventHandler.AddFilter``1(System.EventHandler{``0},System.Linq.Expressions.Expression{System.Func{System.Object,``0,System.Boolean}},System.Boolean)">
            <summary>
            Creates filtered event handler of type EventHandler{TEventArgs}.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="expression">The predicate expression.</param>
            <param name="filterLocally">Whether the filter should also work when used locally.</param>
        </member>
        <member name="T:Zyan.Communication.Delegates.DynamicWireBase">
            <summary>
            Base class for dynamic wires.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.DynamicWireBase.InvokeClientDelegate(System.Object[])">
            <summary>
            Invokes intercepted delegate.
            </summary>
            <param name="args">Delegate parameters.</param>
            <returns>Delegate return value.</returns>
        </member>
        <member name="F:Zyan.Communication.Delegates.DynamicWireBase.InvokeClientDelegateMethodInfo">
            <summary>
            <see cref="T:System.Reflection.MethodInfo"/> for <see cref="M:Zyan.Communication.Delegates.DynamicWireBase.InvokeClientDelegate(System.Object[])"/> method.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.DynamicWireBase.BuildDelegate``1">
            <summary>
            Builds strong-typed delegate of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Delegate type.</typeparam>
            <returns>Delegate to call <see cref="M:Zyan.Communication.Delegates.DynamicWireBase.InvokeClientDelegate(System.Object[])"/> method.</returns>
        </member>
        <member name="P:Zyan.Communication.Delegates.DynamicWireBase.Interceptor">
            <summary>
            Client delegate interceptor.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.DynamicWireBase.InDelegate">
            <summary>
            Gets the untyped In delegate.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Delegates.DynamicEventWireBase">
            <summary>
            Base class for event wires.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.DynamicEventWireBase.InvokeClientDelegate(System.Object[])">
            <summary>
            Invokes client event handler.
            If the handler throws an exception, event subsription is cancelled.
            </summary>
            <param name="args">Event handler parameters.</param>
            <returns>Event handler return value.</returns>
        </member>
        <member name="P:Zyan.Communication.Delegates.DynamicEventWireBase.Component">
            <summary>
            Server component.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.DynamicEventWireBase.ServerEventInfo">
            <summary>
            Server component's event descriptor.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.DynamicEventWireBase.ValidateSession">
            <summary>
            Session validation handler.
            Returns True if client's session is valid, otherwise, False.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.DynamicEventWireBase.EventFilter">
            <summary>
            Gets or sets the event filter.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Security.IntegratedWindowsAuthProvider">
            <summary>
            Authentifizierungsanbieter für Windows-Sicherheitstoken-Authentifizierung.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Security.IntegratedWindowsAuthProvider.Authenticate(Zyan.Communication.Security.AuthRequestMessage)">
            <summary>
            Authentifiziert einen bestimmten Benutzer anhand seiner Anmeldeinformationen.
            </summary>
            <param name="authRequest">Authentifizierungs-Anfragenachricht mit Anmeldeinformationen</param>
            <returns>Antwortnachricht des Authentifizierungssystems</returns>
        </member>
        <member name="T:Zyan.Communication.Toolbox.MonoCheck">
            <summary>
            Tool to test for Mono runtime environment.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Toolbox.MonoCheck.IsRunningOnMono">
            <summary>
            Returns true if Zyan is running on Mono.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Toolbox.MonoCheck.NoWindowsOS">
            <summary>
            Returns true if the local operating system is not Windows.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.LZF">
            <summary>
            Improved C# LZF Compressor, a very small data compression library. The compression algorithm is extremely fast. 
            </summary>
        </member>
        <member name="F:Zyan.Communication.Toolbox.LZF.HashTable">
            <summary>
            Hashtable, thac can be allocated only once
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.LZF.Compress(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Compresses the data using LibLZF algorithm
            </summary>
            <param name="input">Reference to the data to compress</param>
            <param name="inputLength">Lenght of the data to compress</param>
            <param name="output">Reference to a buffer which will contain the compressed data</param>
            <param name="outputLength">Lenght of the compression buffer (should be bigger than the input buffer)</param>
            <returns>The size of the compressed archive in the output buffer</returns>
        </member>
        <member name="M:Zyan.Communication.Toolbox.LZF.Decompress(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decompresses the data using LibLZF algorithm
            </summary>
            <param name="input">Reference to the data to decompress</param>
            <param name="inputLength">Lenght of the data to decompress</param>
            <param name="output">Reference to a buffer which will contain the decompressed data</param>
            <param name="outputLength">The size of the decompressed archive in the output buffer</param>
            <returns>Returns decompressed size</returns>
        </member>
        <member name="T:Zyan.Communication.Security.Exceptions.AccountNotFoundException">
            <summary>
            Security exception which is thrown if user name is not found or password don't match.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.AccountNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Security.Exceptions.AccountNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.AccountNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Security.Exceptions.AccountNotFoundException"/> class.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.AccountNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Security.Exceptions.AccountNotFoundException"/> class.
            </summary>
            <param name="message">Exception message.</param>
            <param name="inner">The inner <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.AccountNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Security.Exceptions.AccountNotFoundException"/> class.
            </summary>
            <param name="message">Exception message.</param>
            <param name="userName">Account user name.</param>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.AccountNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Security.Exceptions.AccountNotFoundException"/> class.
            </summary>
            <param name="message">Exception message.</param>
            <param name="userName">Account user name.</param>
            <param name="inner">The inner <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.AccountNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Security.Exceptions.AccountNotFoundException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.AccountNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the <see cref="T:Zyan.Communication.Security.Exceptions.AccountNotFoundException"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Zyan.Communication.Security.Exceptions.AccountNotFoundException.UserName">
            <summary>
            Account user name.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.MessageException">
            <summary>
            Should be thrown when problems with sending or receiving a message occur.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.MessageException.#ctor(System.String,System.Exception,Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection)">
            <summary>
            Creates a new instance of the MessageException class.
            </summary>
            <param name="msg">Error message</param>
            <param name="innerException">Inner exception (can be null)</param>
            <param name="connection">Affected Duplex Channel Connection</param>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.MessageException.Connection">
            <summary>
            Gets or sets the affected Duplex Channel Connection.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.InterLinqQueryHandler">
            <summary>
            Abstract implementation of an <see cref="T:Zyan.InterLinq.IQueryHandler"/>.
            This class provides methods to get an <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <seealso cref="T:Zyan.InterLinq.IQueryHandler"/>
        </member>
        <member name="M:Zyan.InterLinq.InterLinqQueryHandler.Get(System.Type)">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">Type of the returned <see cref="T:System.Linq.IQueryable`1"/>.</param>
            <returns>Returns an <see cref="T:System.Linq.IQueryable`1"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.InterLinqQueryHandler.Get``1">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="T">Generic Argument of the returned <see cref="T:System.Linq.IQueryable`1"/>.</typeparam>
            <returns>Returns an <see cref="T:System.Linq.IQueryable`1"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.InterLinqQueryHandler.StartSession">
            <summary>
            Tells the <see cref="T:Zyan.InterLinq.IQueryHandler"/> to start a new the session.
            </summary>
            <returns>True, if the session creation was successful. False, if not.</returns>
            <seealso cref="M:Zyan.InterLinq.IQueryHandler.StartSession"/>
        </member>
        <member name="M:Zyan.InterLinq.InterLinqQueryHandler.CloseSession">
            <summary>
            Tells the <see cref="T:Zyan.InterLinq.IQueryHandler"/> to close the current session.
            </summary>
            <returns>True, if the session closing was successful. False, if not.</returns>
            <seealso cref="M:Zyan.InterLinq.IQueryHandler.CloseSession"/>
        </member>
        <member name="P:Zyan.InterLinq.InterLinqQueryHandler.QueryProvider">
            <summary>
            Gets the <see cref="T:System.Linq.IQueryProvider"/>.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableMethodCallExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableMethodCallExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableMethodCallExpression.#ctor(System.Linq.Expressions.MethodCallExpression,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.MethodCallExpression"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableMethodCallExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableMethodCallExpression.Object">
            <summary>
            See <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableMethodCallExpression.Arguments">
            <summary>
            See <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableMethodCallExpression.Method">
            <summary>
            See <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"/>
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter">
            <summary>
            This class is an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor"/> implementation
            used to convert a <see cref="T:System.Linq.Expressions.Expression"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/>.
            </summary>
            <seealso cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes this class.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression"/> to convert.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.Convert(System.Linq.Expressions.Expression)">
            <summary>
            Converts an <see cref="T:System.Linq.Expressions.Expression"/> to a <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.Convert``1(System.Linq.Expressions.Expression)">
            <summary>
            Converts an <see cref="T:System.Linq.Expressions.Expression"/> to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression"/> to convert.</param>
            <returns>Returns the converted <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.ConvertCollection``1(System.Collections.IEnumerable)">
            <summary>
            Converts an <see cref="T:System.Collections.IEnumerable"/> to a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <param name="enumerable"><see cref="T:System.Collections.IEnumerable"/> to convert.</param>
            <returns>Returns the converted <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.ConvertToSerializableObjectCollection``1(System.Collections.IEnumerable)">
            <summary>
            Converts an <see cref="T:System.Collections.IEnumerable"/> to a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.
            </summary>
            <remarks>
            This method is called for classes like <see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableElementInit"/>,
            <see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberBinding"/>, etc.
            </remarks>
            <typeparam name="T">Target type.</typeparam>
            <param name="enumerable"><see cref="T:System.Collections.IEnumerable"/> to convert.</param>
            <returns>Returns the converted <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.BinaryExpression"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableBinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.BinaryExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableBinaryExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitBinaryExpression(System.Linq.Expressions.BinaryExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitConditionalExpression(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.ConditionalExpression"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableConditionalExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ConditionalExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableConditionalExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitConditionalExpression(System.Linq.Expressions.ConditionalExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitConstantExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.ConstantExpression"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableConstantExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ConstantExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableConstantExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitConstantExpression(System.Linq.Expressions.ConstantExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitTypedExpression``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.Expression`1"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableExpressionTyped"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression`1"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableExpressionTyped"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitTypedExpression``1(System.Linq.Expressions.Expression{``0})"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitInvocationExpression(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.InvocationExpression"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableInvocationExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.InvocationExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableInvocationExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitInvocationExpression(System.Linq.Expressions.InvocationExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitLambdaExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.LambdaExpression"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableLambdaExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.LambdaExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableLambdaExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitLambdaExpression(System.Linq.Expressions.LambdaExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitListInitExpression(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.ListInitExpression"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableListInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ListInitExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableListInitExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitListInitExpression(System.Linq.Expressions.ListInitExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.MemberExpression"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableMemberExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MemberExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableMemberExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberExpression(System.Linq.Expressions.MemberExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitMemberInitExpression(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.MemberInitExpression"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableMemberInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MemberInitExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableMemberInitExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberInitExpression(System.Linq.Expressions.MemberInitExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableMethodCallExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MethodCallExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableMethodCallExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMethodCallExpression(System.Linq.Expressions.MethodCallExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitNewArrayExpression(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.NewArrayExpression"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableNewArrayExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.NewArrayExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableNewArrayExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitNewArrayExpression(System.Linq.Expressions.NewArrayExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitNewExpression(System.Linq.Expressions.NewExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.NewExpression"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableNewExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.NewExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableNewExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitNewExpression(System.Linq.Expressions.NewExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitParameterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.ParameterExpression"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableParameterExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ParameterExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableParameterExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitParameterExpression(System.Linq.Expressions.ParameterExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitTypeBinaryExpression(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableTypeBinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.TypeBinaryExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableTypeBinaryExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitTypeBinaryExpression(System.Linq.Expressions.TypeBinaryExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitUnaryExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.UnaryExpression"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableUnaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.UnaryExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableUnaryExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitUnaryExpression(System.Linq.Expressions.UnaryExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.ElementInit"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableElementInit"/>.
            </summary>
            <param name="elementInit"><see cref="T:System.Linq.Expressions.ElementInit"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableElementInit"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.MemberAssignment"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment"/>.
            </summary>
            <param name="memberAssignment"><see cref="T:System.Linq.Expressions.MemberAssignment"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.MemberListBinding"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding"/>.
            </summary>
            <param name="memberListBinding"><see cref="T:System.Linq.Expressions.MemberListBinding"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.MemberMemberBinding"/> to a
            <see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding"/>.
            </summary>
            <param name="memberMemberBinding"><see cref="T:System.Linq.Expressions.MemberMemberBinding"/> to convert.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)"/>
        </member>
        <member name="T:Zyan.InterLinq.Communication.ClientQueryProvider">
            <summary>
            Client implementation of the <see cref="T:Zyan.InterLinq.InterLinqQueryProvider"/>.
            </summary>
            <seealso cref="T:Zyan.InterLinq.InterLinqQueryProvider"/>
            <seealso cref="T:System.Linq.IQueryProvider"/>
        </member>
        <member name="T:Zyan.InterLinq.InterLinqQueryProvider">
            <summary>
            Abstract implementation of an <see cref="T:System.Linq.IQueryProvider"/>.
            Defines methods to create and execute queries that are described 
            by an <see cref="T:System.Linq.IQueryable"/> object.
            </summary>
            <seealso cref="T:System.Linq.IQueryProvider"/>
        </member>
        <member name="M:Zyan.InterLinq.InterLinqQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an <see cref="T:System.Linq.IQueryable`1"/> object that can evaluate the query
            represented by a specified <see cref="T:System.Linq.Expressions.Expression"/> tree.
            </summary>
            <typeparam name="TElement">
                The <see cref="T:System.Type"/> of the elements of the <see cref="T:System.Linq.IQueryable`1"/> that is returned.
            </typeparam>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> that represents a LINQ query.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable`1"/> that can evaluate the query represented by the
            specified <see cref="T:System.Linq.Expressions.Expression"/> tree.
            </returns>
            <seealso cref="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)"/>
        </member>
        <member name="M:Zyan.InterLinq.InterLinqQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an <see cref="T:System.Linq.IQueryable"/> object that can evaluate the query represented
            by a specified <see cref="T:System.Linq.Expressions.Expression"/> tree.        
            </summary>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> that represents a LINQ query.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> that can evaluate the query represented by the
            specified <see cref="T:System.Linq.Expressions.Expression"/> tree.
            </returns>
            <seealso cref="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)"/>
        </member>
        <member name="M:Zyan.InterLinq.InterLinqQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the strongly-typed query represented by a specified <see cref="T:System.Linq.Expressions.Expression"/> tree.
            </summary>
            <typeparam name="TResult">The <see cref="T:System.Type"/> of the value that is returned by the query execution.</typeparam>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> that represents a LINQ query.</param>
            <returns>A value of type TResult that results from executing the specified query.</returns>
            <seealso cref="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)"/>
        </member>
        <member name="M:Zyan.InterLinq.InterLinqQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified <see cref="T:System.Linq.Expressions.Expression"/> tree.
            </summary>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> that represents a LINQ query.</param>
            <returns>An <see langword="object"/> that represents the result of executing the specified query.</returns>
            <seealso cref="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Communication.ClientQueryProvider.#ctor(Zyan.InterLinq.IQueryRemoteHandler)">
            <summary>
            Initializes this class.
            </summary>
            <param name="queryRemoteHandler"><see cref="T:Zyan.InterLinq.IQueryRemoteHandler"/> to communicate with the server.</param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.ClientQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query and returns the requested data.
            </summary>
            <typeparam name="TResult">Type of the return value.</typeparam>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression"/> tree to execute.</param>
            <returns>Returns the requested data of Type 'TResult'.</returns>
            <seealso cref="M:Zyan.InterLinq.InterLinqQueryProvider.Execute(System.Linq.Expressions.Expression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Communication.ClientQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query and returns the requested data.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression"/> tree to execute.</param>
            <returns>Returns the requested data of Type <see langword="object"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.InterLinqQueryProvider.Execute(System.Linq.Expressions.Expression)"/>
        </member>
        <member name="P:Zyan.InterLinq.Communication.ClientQueryProvider.Handler">
            <summary>
            Gets the <see cref="T:Zyan.InterLinq.IQueryRemoteHandler"/>;
            </summary>
        </member>
        <member name="T:Zyan.Communication.ZyanErrorAction">
            <summary>
            Possible actions for cought error.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ZyanErrorAction.ThrowException">
            <summary>
            Throws the exception.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ZyanErrorAction.Retry">
            <summary>
            Retry the request.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ZyanErrorAction.Ignore">
            <summary>
            Ignore the error.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ZyanErrorEventArgs">
            <summary>
            Provides specific data for ZyanError-Events.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanErrorEventArgs.#ctor">
            <summary>
            Creates a new instance of the ZyanErrorEventArgs class.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanErrorEventArgs.Exception">
            <summary>
            Gets the exception that occured.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanErrorEventArgs.Action">
            <summary>
            Gets or sets, the action to handle this error.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanErrorEventArgs.RemotingMessage">
            <summary>
            Gets the remoting message of the request.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanErrorEventArgs.ServerComponentType">
            <summary>
            Gets the type of the called server component.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanErrorEventArgs.RemoteMemberName">
            <summary>
            Gets the name of the remote called member.
            </summary>
        </member>
        <member name="T:Zyan.Communication.SessionMgmt.SqlSessionManager">
            <summary>
            Session manager backed with SQL Server Database storage.
            <remarks>
            Session table has the following structure:
            
            SessionID           uniqueidentifier
            SessionTimestamp    datetime
            IdentityName        nvarchar(255)
            </remarks>
            </summary>
        </member>
        <member name="T:Zyan.Communication.SessionMgmt.SessionManagerBase">
            <summary>
            Abstract base class for <see cref="T:Zyan.Communication.SessionMgmt.ISessionManager"/> implementations.
            Contains session sweeping logic, <see cref="M:Zyan.Communication.SessionMgmt.SessionManagerBase.CreateServerSession(System.Guid,System.DateTime,System.Security.Principal.IIdentity)"/> utility method and implements <see cref="T:System.IDisposable"/> pattern.
            </summary>
        </member>
        <member name="T:Zyan.Communication.SessionMgmt.ISessionManager">
            <summary>
            Session manager interface.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.ISessionManager.ExistSession(System.Guid)">
            <summary>
            Checks whether the given session exists.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
            <returns>True if <see cref="T:Zyan.Communication.ServerSession"/> with the given identifier exists, otherwise, false.</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.ISessionManager.GetSessionBySessionID(System.Guid)">
            <summary>
            Returns <see cref="T:Zyan.Communication.ServerSession"/> identified by sessionID.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
            <returns><see cref="T:Zyan.Communication.ServerSession"/> or null, if session with the given identifier is not found.</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.ISessionManager.StoreSession(Zyan.Communication.ServerSession)">
            <summary>
            Stores the given <see cref="T:Zyan.Communication.ServerSession"/> to the session list.
            </summary>
            <param name="session"><see cref="T:Zyan.Communication.ServerSession"/> to store.</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.ISessionManager.RemoveSession(System.Guid)">
            <summary>
            Removes the given session from the session list.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.ISessionManager.TerminateSession(System.Guid)">
            <summary>
            Removes the given session and raises the ClientSessionTerminated event.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.ISessionManager.GetSessionVariable(System.Guid,System.String)">
            <summary>
            Returns the value of the session variable.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
            <param name="name">Variable name.</param>
            <returns>Value of the given session variable or null, if the variable is not defined.</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.ISessionManager.SetSessionVariable(System.Guid,System.String,System.Object)">
            <summary>
            Sets the new value of the session variable.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
            <param name="name">Variable name.</param>
            <param name="value">Variable value.</param>
        </member>
        <member name="P:Zyan.Communication.SessionMgmt.ISessionManager.SessionAgeLimit">
            <summary>
            Gets or sets session age limit (minutes).
            </summary>
        </member>
        <member name="P:Zyan.Communication.SessionMgmt.ISessionManager.SessionSweepInterval">
            <summary>
            Gets or sets session cleanup interval (minutes).
            </summary>
        </member>
        <member name="E:Zyan.Communication.SessionMgmt.ISessionManager.ClientSessionTerminated">
            <summary>
            Occurs when the client session is terminated abnormally.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionManagerBase.#ctor">
            <summary>
            Initializes a <see cref="T:Zyan.Communication.SessionMgmt.SessionManagerBase"/> instance with the default values for SessionAgeLimit and SessionSweepInterval.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionManagerBase.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a <see cref="T:Zyan.Communication.SessionMgmt.SessionManagerBase"/> instance.
            </summary>
            <param name="sessionAgeLimit">Session age limit (in minutes).</param>
            <param name="sessionSweepInterval">Session sweep interval (in minutes).</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionManagerBase.CreateServerSession(System.Guid,System.DateTime,System.Security.Principal.IIdentity)">
            <summary>
            Creates a new <see cref="T:Zyan.Communication.ServerSession"/> with the given arguments.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
            <param name="startTime">Session start time.</param>
            <param name="identity"><see cref="T:System.Security.Principal.IIdentity"/> for the user to associate a new session with.</param>
            <returns>New <see cref="T:Zyan.Communication.ServerSession"/> instance associated with the current <see cref="T:Zyan.Communication.SessionMgmt.ISessionManager"/> component.</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionManagerBase.Finalize">
            <summary>
            Finalizer method.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionManagerBase.Dispose">
            <summary>
            Release allocated resources.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionManagerBase.Dispose(System.Boolean)">
            <summary>
            Release allocated resources.
            </summary>
            <param name="disposing">True, if the Dispose() method was called by user code.</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionManagerBase.StartSweepTimer">
            <summary>
            Starts session sweeping timer.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionManagerBase.StopSweepTimer">
            <summary>
            Stops session sweeping timer.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionManagerBase.SweepExpiredSessions">
            <summary>
            Removes all sessions older than <see cref="P:Zyan.Communication.SessionMgmt.SessionManagerBase.SessionAgeLimit"/>.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionManagerBase.ExistSession(System.Guid)">
            <summary>
            Checks whether the given session exists.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
            <returns>True if <see cref="T:Zyan.Communication.ServerSession"/> with the given identifier exists, otherwise, false.</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionManagerBase.GetSessionBySessionID(System.Guid)">
            <summary>
            Returns <see cref="T:Zyan.Communication.ServerSession"/> identified by sessionID.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
            <returns><see cref="T:Zyan.Communication.ServerSession"/> or null, if session with the given identifier is not found.</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionManagerBase.StoreSession(Zyan.Communication.ServerSession)">
            <summary>
            Stores the given <see cref="T:Zyan.Communication.ServerSession"/> to the session list.
            </summary>
            <param name="session"><see cref="T:Zyan.Communication.ServerSession"/> to store.</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionManagerBase.RemoveSession(System.Guid)">
            <summary>
            Removes the given session from the session list.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionManagerBase.TerminateSession(System.Guid)">
            <summary>
            Removes the given session and raises the ClientSessionTerminated event.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionManagerBase.OnClientSessionTerminated(Zyan.Communication.LoginEventArgs)">
            <summary>
            Raises the <see cref="E:ClientSessionTerminated"/> event.
            </summary>
            <param name="args">The <see cref="T:Zyan.Communication.LoginEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionManagerBase.GetSessionVariable(System.Guid,System.String)">
            <summary>
            Returns the value of the session variable.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
            <param name="name">Variable name.</param>
            <returns>Value of the given session variable or null, if the variable is not defined.</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionManagerBase.SetSessionVariable(System.Guid,System.String,System.Object)">
            <summary>
            Sets the new value of the session variable.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
            <param name="name">Variable name.</param>
            <param name="value">Variable value.</param>
        </member>
        <member name="P:Zyan.Communication.SessionMgmt.SessionManagerBase.IsDisposed">
            <summary>
            Returns true if the instance is disposed.
            </summary>
        </member>
        <member name="P:Zyan.Communication.SessionMgmt.SessionManagerBase.SessionAgeLimit">
            <summary>
            Gets or sets session age limit (minutes).
            </summary>
        </member>
        <member name="P:Zyan.Communication.SessionMgmt.SessionManagerBase.SessionSweepInterval">
            <summary>
            Gets or sets session cleanup interval (minutes).
            </summary>
        </member>
        <member name="P:Zyan.Communication.SessionMgmt.SessionManagerBase.ExpiredSessions">
            <summary>
            Returns list of expired sessions.
            </summary>
        </member>
        <member name="P:Zyan.Communication.SessionMgmt.SessionManagerBase.AllSessions">
            <summary>
            Returns list of all sessions.
            </summary>
        </member>
        <member name="E:Zyan.Communication.SessionMgmt.SessionManagerBase.ClientSessionTerminated">
            <summary>
            Occurs when the client session is terminated abnormally.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Zyan.Communication.SessionMgmt.SqlSessionManager"/>
            </summary>
            <param name="connectionString">SQL Server database connection string.</param>
            <param name="sqlSchema">Database name (for example: "dbo").</param>
            <param name="sqlSessionTableName">Session table name.</param>
            <param name="sqlVariablesTableName">Session variable table name.</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.ExistSqlTable(System.String,System.String)">
            <summary>
            Gibt zurück, ob eine bestimmte Tabelle in der Verbundenen SQL Server Datenbank bereits angelegt wurde, oder nicht.
            </summary>
            <param name="schema">SQL Server-Schema (z.B. dbo)</param>
            <param name="tableName">Tabellenname</param>
            <returns>Wahr, wenn die Tabelle existiert, ansonsten Falsch</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.EnsureSessionTableCreated">
            <summary>
            Stellt sicher, dass die Sitzungstabelle in der SQL Server Datenbank existiert.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.EnsureVariablesTableCreated">
            <summary>
            Stellt sicher, dass die Variablentabelle in der SQL Server Datenbank existiert.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.GetSessionFromSqlServer(System.Guid)">
            <summary>
            Ruft eine bestimmte Sitzung aus der SQL Server Datenbank ab.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
            <returns>Sitzungsobjekt</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.GetVariableFromSqlServer(System.Guid,System.String)">
            <summary>
            Ruft den Wert einer bestimmten Sitzungsvariable aus der SQL Server Datenbank ab.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
            <param name="variableName">Variablenname</param>
            <returns>Wert der Variable</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.SetVariableOnSqlServer(System.Guid,System.String,System.Object)">
            <summary>
            Legt den Wert einer bestimmten Sitzungsvariable in der SQL Server Datenbank fest.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
            <param name="variableName">Variablenname</param>
            <param name="variableValue">Wert der Variable</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.ExistSessionOnSqlServer(System.Guid)">
            <summary>
            Gibt zurück, ob eine bestimmte Sitzung in der SQL Server Datenbank existiert, oder nicht.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
            <returns>Wahr, wenn die Sitzung existiert, ansonsten Falsch</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.StoreSessionOnSqlServer(Zyan.Communication.ServerSession)">
            <summary>
            Speichert eine Sitzung in der SQL Server Datenbank ab.
            </summary>
            <param name="session">Sitzungsobjekt</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.RemoveSessionFromSqlServer(System.Guid)">
            <summary>
            Löscht eine bestimmte Sitzung aus der SQL Server Datenbank.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.SweepExpiredSessionsFromSqlServer">
            <summary>
            Entfernt abgelaufene Sitzungen aus der SQL Server Datenbank.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.ExistSession(System.Guid)">
            <summary>
            Checks whether the given session exists.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
            <returns>
            True if <see cref="T:Zyan.Communication.ServerSession"/> with the given identifier exists, otherwise, false.
            </returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.GetSessionBySessionID(System.Guid)">
            <summary>
            Returns <see cref="T:Zyan.Communication.ServerSession"/> identified by sessionID.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
            <returns>
              <see cref="T:Zyan.Communication.ServerSession"/> or null, if session with the given identifier is not found.
            </returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.StoreSession(Zyan.Communication.ServerSession)">
            <summary>
            Stores the given <see cref="T:Zyan.Communication.ServerSession"/> to the session list.
            </summary>
            <param name="session"><see cref="T:Zyan.Communication.ServerSession"/> to store.</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.RemoveSession(System.Guid)">
            <summary>
            Removes the given session from the session list.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.SweepExpiredSessions">
            <summary>
            Removes all sessions older than SessionAgeLimit.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.SetSessionVariable(System.Guid,System.String,System.Object)">
            <summary>
            Sets the new value of the session variable.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
            <param name="name">Variable name.</param>
            <param name="value">Variable value.</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.GetSessionVariable(System.Guid,System.String)">
            <summary>
            Returns the value of the session variable.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
            <param name="name">Variable name.</param>
            <returns>
            Value of the given session variable or null, if the variable is not defined.
            </returns>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.CryptoTools">
            <summary>
            Kryptographie-Werkzeuge.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoTools.CreateSymmetricCryptoProvider(System.String)">
            <summary>
            Erzeugt einen Kryptografieanbieter für symmetrische Verschlüsselung.
            <remarks>
            Folgende Algorithmen weren unterstützt:
            
            "DES", "3DES", "RIJNDAEL" und "RC2"
            </remarks>
            </summary>
            <param name="algorithm">Name des zu verwendenden Verschlüsselungsalgorithmus (z.B. "3DES")</param>
            <returns>Kryptografieanbieter für symmetrische Verschlüsselung</returns>		
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoTools.GetEncryptedStream(System.IO.Stream,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Verschlüsselt einen bestimmten Datenstrom symmetrisch und gibt den verschlüsselten Datenstrom zurück.
            <remarks>
            Der verschlüsselte Datenstrom wird automatisch auf Position 0 zurückgesetzt.
            </remarks>
            </summary>
            <param name="inputStream">Unverschlüsselter Eingabedatenstrom</param>
            <param name="provider">Kryptografieanbieter für symmetrische Verschlüsselung</param>
            <returns>Verschlüsselter Datenstrom</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoTools.GetDecryptedStream(System.IO.Stream,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Entschlüsselt einen bestimmten symmetrisch verschlüsselten Datenstrom gibt den entschlüsselten Datenstrom zurück.
            <remarks>
            Der entschlüsselte Datenstrom wird automatisch auf Position 0 zurückgesetzt.
            </remarks>
            </summary>
            <param name="inputStream">Verschlüsselter Eingabedatenstrom</param>
            <param name="provider">Kryptografieanbieter für symmetrische Verschlüsselung</param>
            <returns>Entschlüsselter Datenstrom</returns>
        </member>
        <member name="T:Zyan.Communication.LogicalCallContextData">
            <summary>
            Speichert Daten, die über Prozessgrenzen hinweg implizit im Aufrufkontext übertragen werden können.
            </summary>
        </member>
        <member name="M:Zyan.Communication.LogicalCallContextData.#ctor">
            <summary>
            Erstellt eine neue Instanz von LogicalCallContextData.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LogicalCallContextData.Store">
            <summary>
            Gibt den Datenspeicher zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup">
            <summary>
            Server protocol setup for TCP communication with support for Windows authentication and security.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.ServerProtocolSetup">
            <summary>
            General implementation of server protocol setup.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.IServerProtocolSetup">
            <summary>
            Describes server side communication protocol settings.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.IServerProtocolSetup.CreateChannel">
            <summary>
            Creates and configures a Remoting channel.
            </summary>
            <returns>Remoting channel</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.IServerProtocolSetup.ClientSinkChain">
            <summary>
            Gets a list of all Remoting sinks from the client sink chain.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.IServerProtocolSetup.ServerSinkChain">
            <summary>
            Gets a list of all Remoting sinks from the server sink chain.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.IServerProtocolSetup.AuthenticationProvider">
            <summary>
            Gets the authentication provider.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.IServerProtocolSetup.ChannelSettings">
            <summary>
            Gets a dictionary with channel settings.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.ServerProtocolSetup._channelName">
            <summary>
            Unique channel name.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.ServerProtocolSetup._channelSettings">
            <summary>
            Dictionary for channel settings.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.ServerProtocolSetup._clientSinkChain">
            <summary>
            List for building the client sink chain.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.ServerProtocolSetup._serverSinkChain">
            <summary>
            List for building the server sink chain.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.ServerProtocolSetup._channelFactory">
            <summary>
            Delegate to factory method, which creates the .NET Remoting channel instance.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.ServerProtocolSetup._authProvider">
            <summary>
            Authentication provider.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.ServerProtocolSetup.#ctor">
            <summary>
            Creates a new instance of the ServerProtocolSetupBase class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.ServerProtocolSetup.#ctor(System.Func{System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Runtime.Remoting.Channels.IChannel})">
            <summary>
            Creates a new instance of the ServerProtocolSetup class.
            </summary>
            <param name="channelFactory">Delegate to channel factory method</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.ServerProtocolSetup.WithChannel(System.Func{System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Runtime.Remoting.Channels.IChannel})">
            <summary>
            Creates a new ServerProtocolSetup with a specified channel factory method.
            </summary>
            <param name="channelFactory">Delegate to channel factory method</param>
            <returns></returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ServerProtocolSetup.BuildClientSinkChain">
            <summary>
            Builds the client sink chain.
            </summary>
            <returns>First sink provider in sink chain</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ServerProtocolSetup.BuildServerSinkChain">
            <summary>
            Builds the server sink chain.
            </summary>
            <returns>First sink provider in sink chain</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ServerProtocolSetup.CreateChannel">
            <summary>
            Creates and configures a Remoting channel.
            </summary>
            <returns>Remoting channel</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.ServerProtocolSetup.ChannelSettings">
            <summary>
            Gets a dictionary with channel settings.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.ServerProtocolSetup.ClientSinkChain">
            <summary>
            Gets a list of all Remoting sinks from the client sink chain.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.ServerProtocolSetup.ServerSinkChain">
            <summary>
            Gets a list of all Remoting sinks from the server sink chain.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.ServerProtocolSetup.AuthenticationProvider">
            <summary>
            Gets or sets the authentication provider.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.#ctor">
            <summary>
            Creates a new instance of the TcpBinaryServerProtocolSetup class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning)">
            <summary>
            Creates a new instance of the TcpBinaryServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the TcpBinaryServerProtocolSetup class.
            </summary>
            <param name="tcpPort">TCP port number</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Int32)">
            <summary>
            Creates a new instance of the TcpBinaryServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="tcpPort">TCP port number</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.CreateChannel">
            <summary>
            Creates and configures a Remoting channel.
            </summary>
            <returns>Remoting channel</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.TcpPort">
            <summary>
            Gets or sets the TCP port to listen for client calls.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.ImpersonationLevel">
            <summary>
            Gets or sets the level of impersonation.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.ProtectionLevel">
            <summary>
            Get or sets the level of protection (sign or encrypt, or both)
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.UseWindowsSecurity">
            <summary>
            Gets or sets, if Windows Security should be used.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.SocketCachingEnabled">
            <summary>
            Gets or sets, if sockets should be cached and reused.
            <remarks>
            Caching sockets may reduce ressource consumption but may cause trouble in Network Load Balancing clusters.
            </remarks>
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.AuthenticationProvider">
            <summary>
            Gets the authentication provider.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.Versioning">
            <summary>
            Gets or sets the versioning behavior.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup">
            <summary>
            Server protocol setup for TCP communication with support for user defined authentication and security.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning)">
            <summary>
            Creates a new instance of the TcpCustomServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.#ctor">
            <summary>
            Creates a new instance of the TcpCustomServerProtocolSetup class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider)">
            <summary>
            Creates a new instance of the TcpCustomServerProtocolSetup class.
            </summary>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Int32,Zyan.Communication.Security.IAuthenticationProvider)">
            <summary>
            Creates a new instance of the TcpCustomServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean)">
            <summary>
            Creates a new instance of the TcpCustomServerProtocolSetup class.
            </summary>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean)">
            <summary>
            Creates a new instance of the TcpCustomServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String)">
            <summary>
            Creates a new instance of the TcpCustomServerProtocolSetup class.
            </summary>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String)">
            <summary>
            Creates a new instance of the TcpCustomServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the TcpCustomServerProtocolSetup class.
            </summary>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="oaep">Specifies if OAEP padding should be used</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the TcpCustomServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="oaep">Specifies if OAEP padding should be used</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.ConfigureEncryption">
            <summary>
            Configures encrpytion sinks, if encryption is enabled.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.CreateChannel">
            <summary>
            Creates and configures a Remoting channel.
            </summary>
            <returns>Remoting channel</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.TcpPort">
            <summary>
            Gets or sets the TCP port to listen for client calls.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.Algorithm">
            <summary>
            Gets or sets the name of the symmetric encryption algorithm.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.Oeap">
            <summary>
            Gets or sets, if OEAP padding should be activated.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.SocketCachingEnabled">
            <summary>
            Gets or sets, if socket caching is enabled.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.AuthenticationProvider">
            <summary>
            Gets or sets the authentication provider.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.Versioning">
            <summary>
            Gets or sets the versioning behavior.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup">
            <summary>
            Client protocol setup for TCP communication with support for user defined authentication and security.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.ClientProtocolSetup">
            <summary>
            General implementation of client protocol setup.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.IClientProtocolSetup">
            <summary>
            Describes client side communication protocol settings.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.IClientProtocolSetup.CreateChannel">
            <summary>
            Creates and configures a Remoting channel.
            </summary>
            <returns>Remoting channel</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.IClientProtocolSetup.ClientSinkChain">
            <summary>
            Gets a list of all Remoting sinks from the client sink chain.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.IClientProtocolSetup.ServerSinkChain">
            <summary>
            Gets a list of all Remoting sinks from the server sink chain.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.IClientProtocolSetup.ChannelSettings">
            <summary>
            Gets a dictionary with channel settings.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.ClientProtocolSetup._channelName">
            <summary>
            Unique channel name.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.ClientProtocolSetup._channelSettings">
            <summary>
            Dictionary for channel settings.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.ClientProtocolSetup._clientSinkChain">
            <summary>
            List for building the client sink chain.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.ClientProtocolSetup._serverSinkChain">
            <summary>
            List for building the server sink chain.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.ClientProtocolSetup._channelFactory">
            <summary>
            Delegate to factory method, which creates the .NET Remoting channel instance.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.ClientProtocolSetup.#ctor">
            <summary>
            Creates a new instance of the ClientProtocolSetup class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.ClientProtocolSetup.#ctor(System.Func{System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Runtime.Remoting.Channels.IChannel})">
            <summary>
            Creates a new instance of the ClientProtocolSetup class.
            </summary>
            <param name="channelFactory">Delegate to channel factory method</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.ClientProtocolSetup.WithChannel(System.Func{System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Runtime.Remoting.Channels.IChannel})">
            <summary>
            Creates a new ClientProtocolSetup with a specified channel factory method.
            </summary>
            <param name="channelFactory">Delegate to channel factory method</param>
            <returns></returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ClientProtocolSetup.BuildClientSinkChain">
            <summary>
            Builds the client sink chain.
            </summary>
            <returns>First sink provider in sink chain</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ClientProtocolSetup.BuildServerSinkChain">
            <summary>
            Builds the server sink chain.
            </summary>
            <returns>First sink provider in sink chain</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ClientProtocolSetup.CreateChannel">
            <summary>
            Creates and configures a Remoting channel.
            </summary>
            <returns>Remoting channel</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.ClientProtocolSetup.ChannelSettings">
            <summary>
            Gets a dictionary with channel settings.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.ClientProtocolSetup.ClientSinkChain">
            <summary>
            Gets a list of all Remoting sinks from the client sink chain.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.ClientProtocolSetup.ServerSinkChain">
            <summary>
            Gets a list of all Remoting sinks from the server sink chain.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning)">
            <summary>
            Creates a new instance of the TcpCustomClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.#ctor">
            <summary>
            Creates a new instance of the TcpCustomClientProtocolSetup class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the TcpCustomClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean)">
            <summary>
            Creates a new instance of the TcpCustomClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.#ctor(System.Boolean,System.String)">
            <summary>
            Creates a new instance of the TcpCustomClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String)">
            <summary>
            Creates a new instance of the TcpCustomClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.#ctor(System.Boolean,System.String,System.Int32)">
            <summary>
            Creates a new instance of the TcpCustomClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String,System.Int32)">
            <summary>
            Creates a new instance of the TcpCustomClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.#ctor(System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the TcpCustomClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="oaep">Specifies if OAEP padding should be used</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the TcpCustomClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="oaep">Specifies if OAEP padding should be used</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.#ctor(System.Boolean,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the TcpCustomClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
            <param name="oaep">Specifies if OAEP padding should be used</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the TcpCustomClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
            <param name="oaep">Specifies if OAEP padding should be used</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.ConfigureEncryption">
            <summary>
            Configures encrpytion sinks, if encryption is enabled.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.CreateChannel">
            <summary>
            Creates and configures a Remoting channel.
            </summary>
            <returns>Remoting channel</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.Algorithm">
            <summary>
            Gets or sets the name of the symmetric encryption algorithm.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.Oeap">
            <summary>
            Gets or sets, if OEAP padding should be activated.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.MaxAttempts">
            <summary>
            Gets or sets the maximum number of attempts when trying to establish a encrypted conection.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.SocketCachingEnabled">
            <summary>
            Gets or sets, if sockets should be cached and reused.
            <remarks>
            Caching sockets may reduce ressource consumption but may cause trouble in Network Load Balancing clusters.
            </remarks>
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.Versioning">
            <summary>
            Gets or sets the versioning behavior.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannelData">
            <summary>
            Describes configuration data of a TcpEx channel.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannelData.#ctor(Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel)">
            <summary>
            Creates a new instance of the TcpExChannelData class.
            </summary>
            <param name="channel">Remoting channel</param>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannelData.Port">
            <summary>
            Gets the TCP port number of the channel.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannelData.ChannelID">
            <summary>
            Gets or sets the unique identifier of the channel.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannelData.Addresses">
            <summary>
            Gets the registered addresses of the channel.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannelData.Item(System.Object)">
            <summary>
            Gets the value of a channel property by its name.
            </summary>
            <param name="key">Property name</param>
            <returns>Property value</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannelData.ChannelUris">
            <summary>
            Gets an array of all registered channel URIs.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Notification.NotificationSender">
            <summary>
            Serverseitige Versendevorrichtung für Benachrichtigungen vom Server.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationSender.#ctor(Zyan.Communication.Notification.NotificationService,System.String)">
            <summary>
            Erzeugt eine neue Instanz von NotificationSender.
            </summary>
            <param name="service">Benachrichtigunsgdienst über welchen die Benachrichtigung(en) verschickt werden</param>
            <param name="eventName">Ereignisname</param>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationSender.HandleServerEvent(System.Object,Zyan.Communication.Notification.NotificationEventArgs)">
            <summary>
            Behandelt ein Ereignis einer Serverkomponente.
            </summary>
            <param name="sender">Herkunftsobjekt</param>
            <param name="e">Ereignisargumente</param>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableConstantExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableConstantExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableConstantExpression.#ctor(System.Linq.Expressions.ConstantExpression,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.ConstantExpression"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableConstantExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableConstantExpression.Value">
            <summary>
            See <see cref="P:System.Linq.Expressions.ConstantExpression.Value"/>
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Communication.ZyanConstants">
            <summary>
            Constants for the default Zyan configuration.
            </summary>
        </member>
        <member name="F:Zyan.InterLinq.Communication.ZyanConstants.DefaultServiceProtocol">
            <summary>
            The default service protocol for the server name
            </summary>
        </member>
        <member name="F:Zyan.InterLinq.Communication.ZyanConstants.DefaultServerName">
            <summary>
            The default server name.
            </summary>
        </member>
        <member name="F:Zyan.InterLinq.Communication.ZyanConstants.DefaultServerObjectName">
            <summary>
            The default remote object name for the factory.
            </summary>
        </member>
        <member name="F:Zyan.InterLinq.Communication.ZyanConstants.DefaultServicePort">
            <summary>
            The default port a for remoting connection.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Communication.ZyanConstants.GetDefaultServerProtocol(System.Int32)">
            <summary>
            A server protocol setup with the default name and the default port.
            </summary>
            <param name="port">Tcp port.</param>
            <returns>Returns a default <see cref="T:Zyan.Communication.Protocols.IServerProtocolSetup"/> for the <see cref="T:Zyan.Communication.ZyanComponentHost"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Communication.ZyanConstants.GetDefaultClientProtocol">
            <summary>
            A client protocol setup with the default name and the default port.
            </summary>
            <returns>Returns a default <see cref="T:Zyan.Communication.Protocols.IClientProtocolSetup"/> for the <see cref="T:Zyan.Communication.ZyanComponentHost"/>.</returns>
        </member>
        <member name="T:Zyan.Communication.Delegates.FlexibleEventFilter`1">
            <summary>
            Expression-based event filter.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
        </member>
        <member name="T:Zyan.Communication.Delegates.EventFilterBase`1">
            <summary>
            Base class for strong-typed event filters.
            </summary>
            <typeparam name="TEventArgs">Event arguments type.</typeparam>
        </member>
        <member name="T:Zyan.Communication.Delegates.IEventFilter">
            <summary>
            Interface for server-side event filtering.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.IEventFilter.AllowInvocation(System.Object[])">
            <summary>
            Determines whether this filter allows invoking the event handler.
            </summary>
            <param name="parameters">Event parameters (typically, object sender and EventArgs args).</param>
            <returns>
              <c>true</c> if invocation is allowed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Zyan.Communication.Delegates.IEventFilter.Contains``1">
            <summary>
            Determines whether this filter contains nested event filter of the given type.
            </summary>
            <typeparam name="TEventFilter">Event filter type.</typeparam>
        </member>
        <member name="M:Zyan.Communication.Delegates.EventFilterBase`1.AllowInvocation(System.Object[])">
            <summary>
            Determines whether this filter allows invoking the event handler.
            </summary>
            <param name="parameters">Event parameters (typically, object sender and EventArgs args).</param>
            <returns>
              <c>true</c> if invocation is allowed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Zyan.Communication.Delegates.EventFilterBase`1.AllowInvocation(System.Object,`0)">
            <summary>
            Determines whether this filter allows invoking the event handler.
            </summary>
            <param name="sender">Event sender (typically null for the events initiated on the server side).</param>
            <param name="args">Event arguments.</param>
            <returns>
              <c>true</c> if invocation is allowed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Zyan.Communication.Delegates.EventFilterBase`1.Contains``1">
            <summary>
            Determines whether this filter contains nested event filter of the given type.
            </summary>
            <typeparam name="TEventFilter">Event filter type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Zyan.Communication.Delegates.FlexibleEventFilter`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Object,`0,System.Boolean}})">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Delegates.FlexibleEventFilter`1"/> class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.FlexibleEventFilter`1.AllowInvocation(System.Object,`0)">
            <summary>
            Returns true if event handler invocation is allowed.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="args">The instance containing the event data.</param>
        </member>
        <member name="T:Zyan.Communication.Delegates.EventFilter">
            <summary>
            Helper class for event filters.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.EventFilter.Combine(Zyan.Communication.Delegates.IEventFilter,Zyan.Communication.Delegates.IEventFilter[])">
            <summary>
            Combines several event filters into one filter.
            </summary>
            <param name="first">The first filter.</param>
            <param name="others">Other event filters.</param>
        </member>
        <member name="T:Zyan.Communication.Delegates.EventFilter.CombinedEventFilter">
            <summary>
            Combines several event filters into one.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Delegates.DynamicWireFactory">
            <summary>
            Factory class for creation of dynamic wires.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.DynamicWireFactory.#ctor">
            <summary>
            This constructor is private, so DynamicWireFactory class cannot be created from the outside.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Delegates.DynamicWireFactory.Instance">
            <summary>
            Lazy-initialized singleton instance.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.DynamicWireFactory.CreateKeyForWire(System.Type,System.Type,System.Boolean)">
            <summary>
            Creates a unique wire cache key for a delegate wire factory.
            </summary>
            <param name="componentType">Type of server component.</param>
            <param name="delegateType">Delegate type of the wire.</param>
            <param name="isEvent">Sets if the wire type is for a event (if false, the wire type must be of a delegate property).</param>
            <returns>Unique key.</returns>
        </member>
        <member name="F:Zyan.Communication.Delegates.DynamicWireFactory.CreateDynamicWireGenericMethodInfo">
            <summary>
            <see cref="T:System.Reflection.MethodInfo"/> for <see cref="M:Zyan.Communication.Delegates.DynamicWireFactory.CreateDynamicWire``1(System.Boolean)"/> method.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.DynamicWireFactory.CreateDynamicWire``1(System.Boolean)">
            <summary>
            Creates strongly-typed dynamic wire for event handler or delegate.
            </summary>
            <typeparam name="T">Delegate type.</typeparam>
            <param name="isEvent">True if delegate is an event handler.</param>
            <returns>Dynamic wire instance.</returns>
        </member>
        <member name="M:Zyan.Communication.Delegates.DynamicWireFactory.GetDelegateType(System.Type,System.String,System.Boolean)">
            <summary>
            Gets the delegate type of a component´s event or delegate property.
            </summary>
            <param name="componentType">Component type</param>
            <param name="delegateMemberName">Event name or name of the delegate property</param>
            <param name="isEvent">Sets if the member is a event (if false, the memeber must be a delegate property)</param>
            <returns>Delegate type</returns>
        </member>
        <member name="M:Zyan.Communication.Delegates.DynamicWireFactory.CreateDynamicWire(System.Type,System.String,System.Boolean)">
            <summary>
            Creates a dynamic wire for a specified event or delegate property of a component.
            </summary>
            <param name="componentType">Component type.</param>
            <param name="delegateMemberName">Event name or name of the delegate property.</param>
            <param name="isEvent">Sets if the member is a event (if false, the memeber must be a delegate property).</param>
            <returns>Instance of the created dynamic wire type (ready to use).</returns>
        </member>
        <member name="M:Zyan.Communication.Delegates.DynamicWireFactory.CreateDynamicWire(System.Type,System.Type)">
            <summary>
            Creates a dynamic wire for a specified event or delegate property of a component.
            </summary>
            <param name="componentType">Component type.</param>
            <param name="delegateType">Type of the delegate.</param>
            <returns>Instance of the created dynamic wire type (ready to use).</returns>
        </member>
        <member name="M:Zyan.Communication.Delegates.DynamicWireFactory.BuildDelegate``1(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Builds the strong-typed delegate for the dynamicInvoke: object DynamicInvoke(object[] args);
            </summary>
            <typeparam name="T">Delegate type.</typeparam>
            <param name="dynamicInvoke"><see cref="T:System.Reflection.MethodInfo"/> for the DynamicInvoke(object[] args) method.</param>
            <param name="target">Target instance.</param>
            <returns>Strong-typed delegate.</returns>
        </member>
        <member name="T:Zyan.Communication.CallInterceptorCollection">
            <summary>
            Auflistung von Aufrufabfangvorrichtungen.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorCollection.#ctor">
            <summary>
            Erzeugt eine neue Instanz der CallInterceptorCollection-Klasse.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorCollection.InsertItem(System.Int32,Zyan.Communication.CallInterceptor)">
            <summary>
            Wird aufgerufen, wenn ein neuer Eintrag eingefügt wird.
            </summary>
            <param name="index">Index</param>
            <param name="item">Objekt</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorCollection.RemoveItem(System.Int32)">
            <summary>
            Wird aufgerufen, wenn ein Eintrag entfernt wird.
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorCollection.SetItem(System.Int32,Zyan.Communication.CallInterceptor)">
            <summary>
            Wird aufgerufen, wenn ein Eintrag neu zugewiesen wird.
            </summary>
            <param name="index">Index</param>
            <param name="item">Objekt</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorCollection.ClearItems">
            <summary>
            Wird aufgerufen, wenn alle Einträge entfernt werden sollen.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorCollection.AddRange(System.Collections.Generic.IEnumerable{Zyan.Communication.CallInterceptor})">
            <summary>
            Adds call interceptors to the collection.
            </summary>
            <param name="interceptors">The interceptors to add.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorCollection.AddRange(Zyan.Communication.CallInterceptor[])">
            <summary>
            Adds call interceptors to the collection.
            </summary>
            <param name="interceptors">The interceptors to add.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorCollection.FindMatchingInterceptor(System.Type,System.String,System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Sucht eine passende Aufrufabfangvorrichtung für ein bestimmten Methodenaufruf.
            </summary>
            <param name="interfaceType">Typ der Dienstschnittstelle</param>
            <param name="uniqueName">Unique name of the intercepted component.</param>
            <param name="remotingMessage">Remoting-Nachricht des Methodenaufrufs vom Proxy</param>
            <returns>Aufrufabfangvorrichtung oder null</returns>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorCollection.For``1">
            <summary>
            Creates call interceptor helper for the given interface
            </summary>
        </member>
        <member name="T:Zyan.Communication.ActivationType">
            <summary>
            Aufzählung der verfügbaren Aktivierungsarten.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ActivationType.SingleCall">
            <summary>
            Komponenteninstanz lebt nur einen Aufruf lang. Für jeden Aufruf wird eine separate Instanz erzeugt.
            <remarks>SingleCallaktivierte Komponenten müssen nicht threadsicher sein.</remarks>
            </summary>
        </member>
        <member name="F:Zyan.Communication.ActivationType.Singleton">
            <summary>
            Komponenteninstanz wird bei erstem Aufruf erzeugt und wird für alle weiteren Aufrufe wiederverwendet.
            <remarks>Singltonaktivierte Komponenten müssen threadsicher sein.</remarks>
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.TypeHelper">
            <summary>
            Provides improved type search facilities.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.TypeHelper.GetType(System.String)">
            <summary>
            Gets the <see cref="T:System.Type"/> with the specified name, performing a case-sensitive search.
            Looks for the specified assembly in the current <see cref="T:System.AppDomain"/> assembly list.
            </summary>
            <param name="fullName">The assembly-qualified name of the type to get.</param>
            <returns>The type with the specified name, if found; otherwise, null.</returns>
        </member>
        <member name="M:Zyan.Communication.Toolbox.TypeHelper.GetType(System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Type"/> with the specified name, performing a case-sensitive search.
            Looks for the specified assembly in the current <see cref="T:System.AppDomain"/> assembly list.
            </summary>
            <param name="fullName">The assembly-qualified name of the type to get.</param>
            <param name="throwOnError">True to throw the <see cref="T:System.TypeLoadException"/> if the type can not be found.</param>
            <returns>The type with the specified name. If the type is not found, the throwOnError 
            parameter specifies whether null is returned or an exception is thrown.</returns>
        </member>
        <member name="T:Zyan.Communication.Toolbox.Extensions">
            <summary>
            Various extension methods.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.Extensions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Merges two sequences by using specified selector (missing in .NET Framework 3.5).
            </summary>
            <typeparam name="TFirst">First sequence element type.</typeparam>
            <typeparam name="TSecond">Second sequence element type.</typeparam>
            <typeparam name="TResult">Resulting sequence element type.</typeparam>
            <param name="first">First sequence.</param>
            <param name="second">Second sequence.</param>
            <param name="resultSelector">Selector function.</param>
            <returns></returns>
        </member>
        <member name="M:Zyan.Communication.Toolbox.Extensions.Dump(System.Exception,System.String)">
            <summary>
            Converts exception and all of its inner exceptions to string
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.Extensions.IsOneWay(System.Reflection.MethodInfo)">
            <summary>
            Returns true if method in one-way
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.Extensions.Invoke(System.Reflection.MethodInfo,System.Object,System.Object[],System.Boolean)">
            <summary>
            Invokes the method represented by current instance using the supplied parameters in either one-way or normal mode
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.Extensions.CreateDelegate``1(System.Reflection.MethodInfo)">
            <summary>
            Creates invocation delegate for the static method represented by the given MethodInfo.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.Extensions.CreateDelegate``1(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Creates invocation delegate for the non-static method represented by the given MethodInfo.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.Extensions.GetMethod(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Searches for the specified public method whose parameters match the specified argument types.
            </summary>
            <param name="type">Type to inspect</param>
            <param name="methodName">Method name</param>
            <param name="genericArguments">List of generic arguments</param>
            <param name="argumentTypes">Argument types</param>
            <returns>MethodInfo it method is found, otherwise, null</returns>
        </member>
        <member name="M:Zyan.Communication.Toolbox.Extensions.GetSignature(System.Reflection.MethodInfo)">
            <summary>
            Returns method signature, similar to MethodInfo.ToString().
            </summary>
            <param name="mi">MethodInfo to convert.</param>
            <returns>String representation of method signature, equal on .NET and Mono platforms.</returns>
        </member>
        <member name="M:Zyan.Communication.Toolbox.Extensions.LockIf(System.Object,System.Func{System.Boolean},System.Action)">
            <summary>
            Conditional lock with double checking.
            </summary>
            <param name="lockObject">Object to lock.</param>
            <param name="predicate">Locking condition.</param>
            <param name="block">Critical section code.</param>
        </member>
        <member name="T:Zyan.Communication.SessionMgmt.InProcSessionManager">
            <summary>
            Slim in-process session manager.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.InProcSessionManager.ExistSession(System.Guid)">
            <summary>
            Checks whether the given session exists.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
            <returns>True if <see cref="T:Zyan.Communication.ServerSession"/> with the given identifier exists, otherwise, false.</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.InProcSessionManager.GetSessionBySessionID(System.Guid)">
            <summary>
            Returns <see cref="T:Zyan.Communication.ServerSession"/> identified by sessionID.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
            <returns><see cref="T:Zyan.Communication.ServerSession"/> or null, if session with the given identifier is not found.</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.InProcSessionManager.StoreSession(Zyan.Communication.ServerSession)">
            <summary>
            Stores the given <see cref="T:Zyan.Communication.ServerSession"/> to the session list.
            </summary>
            <param name="session"><see cref="T:Zyan.Communication.ServerSession"/> to store.</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.InProcSessionManager.RemoveSession(System.Guid)">
            <summary>
            Removes the given session from the session list.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.InProcSessionManager.GetSessionVariable(System.Guid,System.String)">
            <summary>
            Returns the value of the session variable.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
            <param name="name">Variable name.</param>
            <returns>Value of the given session variable or null, if the variable is not defined.</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.InProcSessionManager.SetSessionVariable(System.Guid,System.String,System.Object)">
            <summary>
            Sets the new value of the session variable.
            </summary>
            <param name="sessionID">Session unique identifier.</param>
            <param name="name">Variable name.</param>
            <param name="value">Variable value.</param>
        </member>
        <member name="P:Zyan.Communication.SessionMgmt.InProcSessionManager.AllSessions">
            <summary>
            Returns list of all sessions.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Versioning">
            <summary>
            Defines all supported kinds of versioning.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Versioning.Strict">
            <summary>
            Strict versioning. Version numbers of strong name assemblies are checked.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Versioning.Lax">
            <summary>
            Version numbers of assembly (even strong named) are ignored.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.CommonHeaderNames">
            <summary>
            Namen der von Client und Server gemeinsam genutzten Transportheader.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.CommonHeaderNames.SECURE_TRANSACTION_ID">
            <summary>
            Eindeutige Kennung der Sicherheitstransaktion.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.CommonHeaderNames.SECURE_TRANSACTION_STATE">
            <summary>
            Status der Sicherheitstransaktion.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.CommonHeaderNames.PUBLIC_KEY">
            <summary>
            Öffentlicher RSA Schlüssel.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.CommonHeaderNames.SHARED_KEY">
            <summary>
            Verschlüsselter gemeinsamer Schlüssel.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.CommonHeaderNames.SHARED_IV">
            <summary>
            Verschlüsselter gemeinsamer Inizialisierungsvektor.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.SecureTransactionStage">
            <summary>
            Aufzählung der einzelnen Verarbeitungsschritte einer Sicherheitstransaktion.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.SecureTransactionStage.Uninitialized">
            <summary>
            Uninizialisiert, noch nichts geschehen.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.SecureTransactionStage.SendingPublicKey">
            <summary>
            Client sendet den öffentlichen Schlüssel an den Server.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.SecureTransactionStage.SendingSharedKey">
            <summary>
            Server sendet den verschlüsselten gemeinsamen Schlüssel zurück zum Client.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.SecureTransactionStage.SendingEncryptedMessage">
            <summary>
            Client sendet die verschlüsselte Anfragenachricht an den Server.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.SecureTransactionStage.SendingEncryptedResult">
            <summary>
            Server sendet die verschlüsselte Antwortnachricht an den Client zurück.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.SecureTransactionStage.UnknownTransactionID">
            <summary>
            Unbekannte Sicherheitstransaktionskennung.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData">
            <summary>
            Enthält Clientverbindungsinformation zu einer Sicherheitstransaktion.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData.#ctor(System.Guid,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>Erstellt eine neue Instanz von ClientConnectionData</summary>
            <param name="secureTransactionID">Sicherheitstransaktionskennung</param>
            <param name="cryptoProvider">Verschlüsselungsanbieter</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData.Finalize">
            <summary>
            Entsorgt die Verbindungsdaten.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData.UpdateTimestamp">
            <summary>
            Aktualisiert den Zeitstempel.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData.System#IDisposable#Dispose">
            <summary>
            Gibt verwaltete Ressourcen frei.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData.Dispose(System.Boolean)">
            <summary>
            Gibt verwaltete Ressourcen frei.
            </summary>
            <param name="disposing">Legt fest, ob der Destruktor nicht aufgerufen werden soll</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData.CheckDisposed">
            <summary>
            Wirft eine Ausnahme, wenn das Objekt bereits entsorgt wurde.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData.SecureTransactionID">
            <summary>
            Gibt die Sicherheitstransaktionskennung zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData.CryptoProvider">
            <summary>
            Gibt den verwendeten Kryptografieanbieter für symmetrische Verschlüsselung zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData.Timestamp">
            <summary>
            Gibt den Zeitpunkt der letzten Kommunikation zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.TcpBinaryClientProtocolSetup">
            <summary>
            Client protocol setup for TCP communication with support for Windows authentication and security.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpBinaryClientProtocolSetup.#ctor">
            <summary>
            Creates a new instance of the TcpBinaryClientProtocolSetup class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpBinaryClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning)">
            <summary>
            Creates a new instance of the TcpBinaryClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavoir</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpBinaryClientProtocolSetup.CreateChannel">
            <summary>
            Creates and configures a Remoting channel.
            </summary>
            <returns>Remoting channel</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryClientProtocolSetup.UseWindowsSecurity">
            <summary>
            Gets or sets, if Windows Security should be used.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryClientProtocolSetup.ImpersonationLevel">
            <summary>
            Gets or sets the level of impersonation.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryClientProtocolSetup.ProtectionLevel">
            <summary>
            Get or sets the level of protection (sign or encrypt, or both)
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryClientProtocolSetup.SocketCachingEnabled">
            <summary>
            Gets or sets, if sockets should be cached and reused.
            <remarks>
            Caching sockets may reduce ressource consumption but may cause trouble in Network Load Balancing clusters.
            </remarks>
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryClientProtocolSetup.Versioning">
            <summary>
            Gets or sets the versioning behavior.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message">
            <summary>
            A message which can be sent or received over a Duplex Channel instance.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.#ctor">
            <summary>
            Creates a new instance of the Message class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.#ctor(System.Guid,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            Creates a new instance of the Message class.
            </summary>
            <param name="guid">Unique identifier of the message</param>
            <param name="headers">Remoting transport headers</param>
            <param name="message">Stream for message raw data</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.Send(Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection,System.Guid,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            Sends a specified message over a specified connection.
            </summary>
            <param name="connection">Duplex Channel Connection</param>
            <param name="guid">Unique identifier of the Message</param>
            <param name="headers">Remoting transport headers</param>
            <param name="message">Stream with raw data of the message</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.BeginReceive(Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection,System.AsyncCallback,System.Object)">
            <summary>
            Begins receiving message data asynchronously.
            </summary>
            <param name="connection">Duplex Channel Connection</param>
            <param name="callback">Delegate to invoke, when asynchronous operation is completed</param>
            <param name="asyncState">Pass through state object</param>
            <returns>Result</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.EndReceive(Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection@,System.IAsyncResult)">
            <summary>
            Receives a message over a specified Duplex Channel Connection.
            </summary>
            <param name="connection">Duplex Channel Connection</param>
            <param name="ar">Result (for Async pattern)</param>
            <returns>Received message</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns>Unique message identifier</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.MessageBody">
            <summary>
            Gets a stream for accessing the message´s body raw data.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult">
            <summary>
            State object needed to perform asynchronous receive operations.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.#ctor(Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection,System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Creates a new instance of the AsyncResult class.
            </summary>
            <param name="connection">Duplex Channel Connection</param>
            <param name="buffer">Buffer</param>
            <param name="callback">Delegate to invoke, when asynchronous operation is completed</param>
            <param name="asyncState">Pass trough state object</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.Complete(System.IAsyncResult)">
            <summary>
            Marks the asynchronous receive operation as completed.
            </summary>
            <param name="ar">Result (for Async pattern)</param>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.Callback">
            <summary>
            Gets the callback delegate.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.Buffer">
            <summary>
            Gets the receive buffer.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.Connection">
            <summary>
            Get the affected Duplex Channel Connection.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.InternalAsyncResult">
            <summary>
            Gets the internal async. result.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.AsyncState">
            <summary>
            Gets the pass through state object.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.CompletedSynchronously">
            <summary>
            Gets if the operation is completed synchronously or not.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.AsyncWaitHandle">
            <summary>
            Gets a wait handle for the asynchronous operation.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.IsCompleted">
            <summary>
            Gets if the asynchronous operation is completed or not.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Manager.StopListening(Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel)">
            <summary>
            Stops listening of a specified channel. 
            </summary>
            <param name="channel">TcpEx Channel</param>
        </member>
        <member name="T:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup">
            <summary>
            Server protocol setup für HTTP communication with support for user defined authentication and security.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.#ctor">
            <summary>
            Creates a new instance of the HttpCustomServerProtocolSetup class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning)">
            <summary>
            Creates a new instance of the HttpCustomServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider)">
            <summary>
            Creates a new instance of the HttpCustomServerProtocolSetup class.
            </summary>
            <param name="httpPort">HTTP port number</param>
            <param name="authProvider">Authentication provider</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Int32,Zyan.Communication.Security.IAuthenticationProvider)">
            <summary>
            Creates a new instance of the HttpCustomServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="httpPort">HTTP port number</param>
            <param name="authProvider">Authentication provider</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean)">
            <summary>
            Creates a new instance of the HttpCustomServerProtocolSetup class.
            </summary>
            <param name="httpPort">HTTP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean)">
            <summary>
            Creates a new instance of the HttpCustomServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="httpPort">HTTP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String)">
            <summary>
            Creates a new instance of the HttpCustomServerProtocolSetup class.
            </summary>
            <param name="httpPort">HTTP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String)">
            <summary>
            Creates a new instance of the HttpCustomServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="httpPort">HTTP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the HttpCustomServerProtocolSetup class.
            </summary>
            <param name="httpPort">HTTP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the HttpCustomServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="httpPort">HTTP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.ConfigureEncryption">
            <summary>
            Configures encrpytion sinks, if encryption is enabled.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.CreateChannel">
            <summary>
            Creates and configures a Remoting channel.
            </summary>
            <returns>Remoting channel</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.HttpPort">
            <summary>
            Gets or sets the HTTP port number.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.Algorithm">
            <summary>
            Gets or sets the name of the symmetric encryption algorithm.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.Oeap">
            <summary>
            Gets or sets, if OEAP padding should be activated.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.AuthenticationProvider">
            <summary>
            Gets or sets the authentication provider.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.Versioning">
            <summary>
            Gets or sets the versioning behavior.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup">
            <summary>
            Client protocol setup for HTTP communication with support for user defined authentication and security.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(System.Net.IWebProxy)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="webProxy">Defines HTTP proxy settings</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Net.IWebProxy)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="webProxy">Defines HTTP proxy settings</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(System.Boolean,System.Net.IWebProxy)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="webProxy">Defines HTTP proxy settings</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.Net.IWebProxy)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="webProxy">Defines HTTP proxy settings</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(System.Boolean,System.String)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(System.Boolean,System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="webProxy">Defines HTTP proxy settings</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="webProxy">Defines HTTP proxy settings</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(System.Boolean,System.String,System.Int32)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(System.Boolean,System.String,System.Int32,System.Net.IWebProxy)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
            <param name="webProxy">Defines HTTP proxy settings</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String,System.Int32)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String,System.Int32,System.Net.IWebProxy)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
            <param name="webProxy">Defines HTTP proxy settings</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(System.Boolean,System.String,System.Boolean,System.Net.IWebProxy)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
            <param name="webProxy">Defines HTTP proxy settings</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String,System.Boolean,System.Net.IWebProxy)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
            <param name="webProxy">Defines HTTP proxy settings</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(System.Boolean,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(System.Boolean,System.String,System.Int32,System.Boolean,System.Net.IWebProxy)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
            <param name="webProxy">Defines HTTP proxy settings</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String,System.Int32,System.Boolean,System.Net.IWebProxy)">
            <summary>
            Creates a new instance of the HttpCustomClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
            <param name="webProxy">Defines HTTP proxy settings</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.ConfigureEncryption">
            <summary>
            Configures encrpytion sinks, if encryption is enabled.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.CreateChannel">
            <summary>
            Creates and configures a Remoting channel.
            </summary>
            <returns>Remoting channel</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.Algorithm">
            <summary>
            Gets or sets the name of the symmetric encryption algorithm.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.Oeap">
            <summary>
            Gets or sets, if OEAP padding should be activated.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.MaxAttempts">
            <summary>
            Gets or sets the maximum number of attempts when trying to establish a encrypted conection.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.Versioning">
            <summary>
            Gets or sets the versioning behavior.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.ClientProtocolSetupExtensions">
            <summary>
            Contains extension methods for client protocol setups.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.ClientProtocolSetupExtensions.AddClientSink(Zyan.Communication.Protocols.IClientProtocolSetup,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
            <summary>
            Adds a specified client sink provider into the client sink chain.
            </summary>
            <param name="protocolSetup">Protocol setup</param>
            <param name="clientSinkProvider">Client sink provider to be added</param>
            <returns>Protocol setup</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ClientProtocolSetupExtensions.AddServerSink(Zyan.Communication.Protocols.IClientProtocolSetup,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
            <summary>
            Adds a specified server sink provider into the server sink chain.
            </summary>
            <param name="protocolSetup">Protocol setup</param>
            <param name="serverSinkProvider">Server sink provider to be added</param>
            <returns>Protocol setup</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ClientProtocolSetupExtensions.AddClientSinkBeforeFormatter(Zyan.Communication.Protocols.IClientProtocolSetup,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
            <summary>
            Adds a specified client sink provider into the client sink chain before the formatter.
            </summary>
            <param name="protocolSetup">Protocol setup</param>
            <param name="clientSinkProvider">Client sink provider to be added</param>
            <returns>Protocol setup</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ClientProtocolSetupExtensions.AddClientSinkAfterFormatter(Zyan.Communication.Protocols.IClientProtocolSetup,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
            <summary>
            Adds a specified client sink provider into the client sink chain after the formatter.
            </summary>
            <param name="protocolSetup">Protocol setup</param>
            <param name="clientSinkProvider">Client sink provider to be added</param>
            <returns>Protocol setup</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ClientProtocolSetupExtensions.AddServerSinkBeforeFormatter(Zyan.Communication.Protocols.IClientProtocolSetup,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
            <summary>
            Adds a specified server sink provider into the server sink chain before the formatter.
            </summary>
            <param name="protocolSetup">Protocol setup</param>
            <param name="serverSinkProvider">Server sink provider to be added</param>
            <returns>Protocol setup</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ClientProtocolSetupExtensions.AddServerSinkAfterFormatter(Zyan.Communication.Protocols.IClientProtocolSetup,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
            <summary>
            Adds a specified server sink provider into the server sink chain after the formatter.
            </summary>
            <param name="protocolSetup">Protocol setup</param>
            <param name="serverSinkProvider">Server sink provider to be added</param>
            <returns>Protocol setup</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ClientProtocolSetupExtensions.GetClientFormatter(Zyan.Communication.Protocols.IClientProtocolSetup)">
            <summary>
            Returns the configured formatter from the client sink chain of a specified client protocol setup.
            </summary>
            <param name="protocolSetup">Protocol setup</param>
            <returns>client formatter sink</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ClientProtocolSetupExtensions.GetServerFormatter(Zyan.Communication.Protocols.IClientProtocolSetup)">
            <summary>
            Returns the configured formatter from the server sink chain of a specified client protocol setup.
            </summary>
            <param name="protocolSetup">Protocol setup</param>
            <returns>server formatter sink</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ClientProtocolSetupExtensions.AddChannelSetting(Zyan.Communication.Protocols.IClientProtocolSetup,System.String,System.Object)">
            <summary>
            Adds a single channel setting.
            </summary>
            <param name="protocolSetup">Protocol setup</param>
            <param name="name">Name of channel setting (example: "port")</param>
            <param name="value">Value of channel setting (example: 8080)</param>
            <returns></returns>
        </member>
        <member name="T:Zyan.Communication.LoginEventArgs">
            <summary>
            Event arguments for login events.
            </summary>
        </member>
        <member name="M:Zyan.Communication.LoginEventArgs.#ctor(Zyan.Communication.LoginEventType,System.Security.Principal.IIdentity,System.String,System.DateTime)">
            <summary>
            Initializes LoginEventArgs instance.
            </summary>
            <param name="eventType">Login event type.</param>
            <param name="identity">Client's identity.</param>
            <param name="clientAddress">Client's address.</param>
            <param name="timestamp">Event timestamp.</param>
        </member>
        <member name="M:Zyan.Communication.LoginEventArgs.#ctor(Zyan.Communication.LoginEventType,System.Security.Principal.IIdentity,System.DateTime)">
            <summary>
            Initializes LoginEventArgs instance.
            </summary>
            <param name="eventType">Login event type.</param>
            <param name="identity">Client's identity.</param>
            <param name="timestamp">Event timestamp.</param>
        </member>
        <member name="P:Zyan.Communication.LoginEventArgs.Identity">
            <summary>
            Gets or sets <see cref="T:System.Security.Principal.IIdentity"/> object.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LoginEventArgs.ClientAddress">
            <summary>
            Gets or sets connected client's address, for example, <see cref="T:System.Net.IPAddress"/>.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LoginEventArgs.Timestamp">
            <summary>
            Gets or sets event time stamp.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LoginEventArgs.EventType">
            <summary>
            Gets or sets <see cref="T:Zyan.Communication.LoginEventType"/> (Login or Logoff).
            </summary>
        </member>
        <member name="T:Zyan.Communication.LoginEventType">
            <summary>
            Available types of login events.
            </summary>
        </member>
        <member name="F:Zyan.Communication.LoginEventType.Logon">
            <summary>
            Event type for the logon operation.
            </summary>
        </member>
        <member name="F:Zyan.Communication.LoginEventType.Logoff">
            <summary>
            Event type for the logoff operation.
            </summary>
        </member>
        <member name="T:Zyan.Communication.AfterInvokeEventArgs">
            <summary>
            Beschreibt Ereignisargumente für Aufrufereignisse.
            </summary>
        </member>
        <member name="M:Zyan.Communication.AfterInvokeEventArgs.ToString">
            <summary>
            Gibt den Inhalt des Objekts als Zeichenkette ausgedrückt zurück.
            </summary>
            <returns>Zeichenkette</returns>
        </member>
        <member name="P:Zyan.Communication.AfterInvokeEventArgs.TrackingID">
            <summary>
            Gibt den Nachverfolgungsschlüssel des Methodenaufrufs zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.AfterInvokeEventArgs.InterfaceName">
            <summary>
            Gibt den Namen der Komponentenschnittstelle zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.AfterInvokeEventArgs.DelegateCorrelationSet">
            <summary>
            Gibt den Korrelationssatz für Delegaten zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.AfterInvokeEventArgs.MethodName">
            <summary>
            Gibt den Methodennamen zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.AfterInvokeEventArgs.Arguments">
            <summary>
            Gibt die Methodenargumente zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.AfterInvokeEventArgs.ReturnValue">
            <summary>
            Gibt den Rückgabewert der Methode zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Types.InterLinqFieldInfo">
            <summary>
            InterLINQ representation of <see cref="T:System.Reflection.FieldInfo"/>.
            </summary>
            <seealso cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/>
            <seealso cref="T:System.Reflection.FieldInfo"/>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqFieldInfo.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqFieldInfo.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="fieldInfo">Represented CLR <see cref="T:System.Reflection.FieldInfo"/>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqFieldInfo.Initialize(System.Reflection.MemberInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="memberInfo">Represented <see cref="T:System.Reflection.MemberInfo"/></param>
            <seealso cref="M:Zyan.InterLinq.Types.InterLinqMemberInfo.Initialize(System.Reflection.MemberInfo)"/>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqFieldInfo.GetClrVersion">
            <summary>
            Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <returns>Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqFieldInfo.Equals(System.Object)">
            <summary>
            Compares <paramref name="obj"/> to this instance.
            </summary>
            <param name="obj"><see langword="object"/> to compare.</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqFieldInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see langword="object"/>.</returns>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqFieldInfo.MemberType">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberTypes">MemberType</see>.
            </summary>
            <seealso cref="P:System.Reflection.FieldInfo.MemberType"/>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqFieldInfo.FieldType">
            <summary>
            Gets or sets the <see cref="T:Zyan.InterLinq.Types.InterLinqType"/> of this field.
            </summary>
            <seealso cref="P:System.Reflection.FieldInfo.FieldType"/>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.MemberMemberBinding"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding.#ctor(System.Linq.Expressions.MemberMemberBinding,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.MemberMemberBinding"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="memberMemberBinding">The original, not serializable <see cref="T:System.Linq.Expressions.MemberBinding"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.MemberBinding"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding.Bindings">
            <summary>
            See <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings"/>
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableMemberExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.MemberExpression"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableMemberExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableMemberExpression.#ctor(System.Linq.Expressions.MemberExpression,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.MemberExpression"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="P:Zyan.InterLinq.Expressions.SerializableMemberExpression.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="P:Zyan.InterLinq.Expressions.SerializableMemberExpression.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableMemberExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="P:Zyan.InterLinq.Expressions.SerializableMemberExpression.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableMemberExpression.Expression">
            <summary>
            See <see cref="P:System.Linq.Expressions.MemberExpression.Expression"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableMemberExpression.Member">
            <summary>
            See <see cref="P:System.Linq.Expressions.MemberExpression.Member"/>
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor">
            <summary>
            This is a visitor that rewrites an expression tree during visiting.
            The result is the same tree like the one, given to the visitor.
            </summary>
            <seealso cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Creates a new <see cref="T:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor"/> with an <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression"/> to initialize the visitor.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitExpression(System.Linq.Expressions.Expression)">
            <summary>
            Visit the <see cref="T:System.Linq.Expressions.Expression"/> and returns an expression.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression"/> to execute.</param>
            <returns>Returns an <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.BinaryExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.BinaryExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitBinaryExpression(System.Linq.Expressions.BinaryExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitConditionalExpression(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ConditionalExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.ConditionalExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitConditionalExpression(System.Linq.Expressions.ConditionalExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitConstantExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ConstantExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.ConstantExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitConstantExpression(System.Linq.Expressions.ConstantExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitTypedExpression``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.Expression`1"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression`1"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.Expression`1"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitTypedExpression``1(System.Linq.Expressions.Expression{``0})"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitInvocationExpression(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.InvocationExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.InvocationExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.InvocationExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitInvocationExpression(System.Linq.Expressions.InvocationExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitLambdaExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.LambdaExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.LambdaExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.LambdaExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitLambdaExpression(System.Linq.Expressions.LambdaExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitListInitExpression(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.ListInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ListInitExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.ListInitExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitListInitExpression(System.Linq.Expressions.ListInitExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MemberExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MemberExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.MemberExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberExpression(System.Linq.Expressions.MemberExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitMemberInitExpression(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MemberInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MemberInitExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.MemberInitExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberInitExpression(System.Linq.Expressions.MemberInitExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MethodCallExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMethodCallExpression(System.Linq.Expressions.MethodCallExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitNewArrayExpression(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.NewArrayExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.NewArrayExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitNewArrayExpression(System.Linq.Expressions.NewArrayExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitNewExpression(System.Linq.Expressions.NewExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.NewExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.NewExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.NewExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitNewExpression(System.Linq.Expressions.NewExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitParameterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.ParameterExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ParameterExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.ParameterExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitParameterExpression(System.Linq.Expressions.ParameterExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitTypeBinaryExpression(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.TypeBinaryExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitTypeBinaryExpression(System.Linq.Expressions.TypeBinaryExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitUnaryExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.UnaryExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.UnaryExpression"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitUnaryExpression(System.Linq.Expressions.UnaryExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.ElementInit"/>.
            </summary>
            <param name="elementInit"><see cref="T:System.Linq.Expressions.ElementInit"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.ElementInit"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MemberAssignment"/>.
            </summary>
            <param name="memberAssignment"><see cref="T:System.Linq.Expressions.MemberAssignment"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.MemberAssignment"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MemberListBinding"/>.
            </summary>
            <param name="memberListBinding"><see cref="T:System.Linq.Expressions.MemberListBinding"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.MemberListBinding"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding"/>.
            </summary>
            <param name="memberMemberBinding"><see cref="T:System.Linq.Expressions.MemberMemberBinding"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.MemberMemberBinding"/>.</returns>
            <seealso cref="M:Zyan.InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)"/>
        </member>
        <member name="T:Zyan.Communication.CallInterceptorHelper`1">
            <summary>
            Allows building call interceptors with strong-typed fluent interface
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.#ctor(Zyan.Communication.CallInterceptorCollection)">
            <summary>
            Creates CallInterceptorHelper instance
            </summary>
            <param name="interceptors">Collection of call interceptors to add to</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.Add(System.Linq.Expressions.Expression{System.Action{`0}},Zyan.Communication.CallInterceptionDelegate)">
            <summary>
            Creates new CallInterceptor for the given method and adds it to the interceptors collection.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Zyan.Communication.CallInterceptionData,``0})">
            <summary>
            Creates new CallInterceptor for the given method and adds it to the interceptors collection.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.Add``1(System.Linq.Expressions.Expression{System.Action{`0,``0}},System.Action{Zyan.Communication.CallInterceptionData,``0})">
            <summary>
            Creates new CallInterceptor for the given method and adds it to the interceptors collection.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.Add``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1}},System.Func{Zyan.Communication.CallInterceptionData,``0,``1})">
            <summary>
            Creates new CallInterceptor for the given method and adds it to the interceptors collection.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.Add``2(System.Linq.Expressions.Expression{System.Action{`0,``0,``1}},System.Action{Zyan.Communication.CallInterceptionData,``0,``1})">
            <summary>
            Creates new CallInterceptor for the given method and adds it to the interceptors collection.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.Add``3(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2}},System.Func{Zyan.Communication.CallInterceptionData,``0,``1,``2})">
            <summary>
            Creates new CallInterceptor for the given method and adds it to the interceptors collection.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.Add``3(System.Linq.Expressions.Expression{System.Action{`0,``0,``1,``2}},System.Action{Zyan.Communication.CallInterceptionData,``0,``1,``2})">
            <summary>
            Creates new CallInterceptor for the given method and adds it to the interceptors collection.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.Add``4(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3}},System.Func{Zyan.Communication.CallInterceptionData,``0,``1,``2,``3})">
            <summary>
            Creates new CallInterceptor for the given method and adds it to the interceptors collection.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.CheckNotNull``1(``0)">
            <summary>
            Checks whether argument is not null.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.Parse(System.Linq.Expressions.LambdaExpression,System.Reflection.MemberTypes@,System.String@)">
            <summary>
            Parse lambda expression and extract memberType and memberName.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.ExtractMethodCallExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Try to extract MethodCallExpression from lambda expression.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.ExtractMemberExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Try to extract MemberExpression from lambda expression.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.GetEnumerator">
            <summary>
            Returns call interceptors for the given interface.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns call interceptors for the given interface.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ZyanComponentHost">
            <summary>
            Host for publishing components with Zyan.
            </summary>
        </member>
        <member name="T:Zyan.Communication.IComponentCatalog">
            <summary>
            Component catalog interface
            </summary>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalog.RegisterComponent``2(System.String,Zyan.Communication.ActivationType,System.Action{System.Object})">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <typeparam name="T">Implementation type of the component</typeparam>
            <param name="uniqueName">Unique component name</param>
            <param name="activationType">Activation type (SingleCall/Singleton)</param>
            <param name="cleanUpHandler">Delegate for external clean up method</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalog.RegisterComponent``1(System.String,System.Func{System.Object},Zyan.Communication.ActivationType,System.Action{System.Object})">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <param name="uniqueName">Unique component name</param>
            <param name="factoryMethod">Delegate of factory method for external instance creation</param>
            <param name="activationType">Activation type (SingleCall/Singleton)</param>
            <param name="cleanUpHandler">Delegate for external clean up method</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalog.RegisterComponent``2(System.String,``1,System.Action{System.Object})">
            <summary>
            Registeres a component instance in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <typeparam name="T">Implementation type of the component</typeparam>
            <param name="uniqueName">Unique component name</param>
            <param name="instance">Component instance</param>
            <param name="cleanUpHandler">Delegate for external clean up method</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalog.UnregisterComponent(System.String)">
            <summary>
            Deletes a component registration.
            </summary>
            <param name="uniqueName">Unique component name</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalog.GetRegistration(System.String)">
            <summary>
            Gets registration data for a specified component by its interface name.
            </summary>
            <param name="interfaceName">Name of the component´s interface</param>
            <returns>Component registration</returns>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalog.GetRegisteredComponents">
            <summary>
            Returns a list with information about all registered components.
            </summary>
            <returns>List with component information</returns>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalog.GetComponentInstance(Zyan.Communication.ComponentRegistration)">
            <summary>
            Returns an instance of a specified registered component.
            </summary>
            <param name="registration">Component registration</param>
            <returns>Component instance</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.#ctor(System.String,System.Int32)">
            <summary>
            Konstruktor.
            </summary>
            <param name="name">Name des Komponentenhosts</param>
            <param name="tcpPort">TCP-Anschlussnummer</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.#ctor(System.String,System.Int32,Zyan.Communication.ComponentCatalog)">
            <summary>
            Konstruktor.
            </summary>
            <param name="name">Name des Komponentenhosts</param>
            <param name="tcpPort">TCP-Anschlussnummer</param>
            <param name="catalog">Komponenten-Katalog</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.#ctor(System.String,Zyan.Communication.Protocols.IServerProtocolSetup)">
            <summary>
            Konstruktor.
            </summary>
            <param name="name">Name des Komponentenhosts</param>
            <param name="protocolSetup">Protokoll-Einstellungen</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.#ctor(System.String,Zyan.Communication.Protocols.IServerProtocolSetup,Zyan.Communication.ComponentCatalog)">
            <summary>
            Konstruktor.
            </summary>
            <param name="name">Name des Komponentenhosts</param>
            <param name="protocolSetup">Protokoll-Einstellungen</param>
            <param name="catalog">Komponenten-Katalog</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.#ctor(System.String,Zyan.Communication.Protocols.IServerProtocolSetup,Zyan.Communication.SessionMgmt.ISessionManager)">
            <summary>
            Konstruktor.
            </summary>
            <param name="name">Name des Komponentenhosts</param>
            <param name="protocolSetup">Protokoll-Einstellungen</param>
            <param name="sessionManager">Sitzungsverwaltung</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.#ctor(System.String,Zyan.Communication.Protocols.IServerProtocolSetup,Zyan.Communication.SessionMgmt.ISessionManager,Zyan.Communication.ComponentCatalog)">
            <summary>
            Konstruktor.
            </summary>
            <param name="name">Name des Komponentenhosts</param>
            <param name="protocolSetup">Protokoll-Einstellungen</param>
            <param name="sessionManager">Sitzungsverwaltung</param>
            <param name="catalog">Komponenten-Katalog</param>
        </member>
        <member name="F:Zyan.Communication.ZyanComponentHost.Authenticate">
            <summary>
            Request for authentication.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.GetComponentInstance(Zyan.Communication.ComponentRegistration)">
            <summary>
            Returns an instance of a specified registered component.
            </summary>
            <param name="registration">Component registration</param>
            <returns>Component instance</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.Zyan#Communication#IComponentCatalog#GetRegistration(System.String)">
            <summary>
            Gets registration data for a specified component by its interface name.
            </summary>
            <param name="interfaceName">Name of the component´s interface</param>
            <returns>Component registration</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.UnregisterComponent(System.String)">
            <summary>
            Deletes a component registration.
            </summary>
            <param name="uniqueName">Unique component name</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.GetRegisteredComponents">
            <summary>
            Returns a list with information about all registered components.
            </summary>
            <returns>List with component information</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.RegisterComponent``2(System.String,Zyan.Communication.ActivationType,System.Action{System.Object})">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <typeparam name="T">Implementation type of the component</typeparam>
            <param name="uniqueName">Unique component name</param>
            <param name="activationType">Activation type (SingleCall/Singleton)</param>
            <param name="cleanUpHandler">Delegate for external clean up method</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.RegisterComponent``1(System.String,System.Func{System.Object},Zyan.Communication.ActivationType,System.Action{System.Object})">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <param name="uniqueName">Unique component name</param>
            <param name="factoryMethod">Delegate of factory method for external instance creation</param>
            <param name="activationType">Activation type (SingleCall/Singleton)</param>
            <param name="cleanUpHandler">Delegate for external clean up method</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.RegisterComponent``2(System.String,``1,System.Action{System.Object})">
            <summary>
            Registeres a component instance in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <typeparam name="T">Implementation type of the component</typeparam>
            <param name="uniqueName">Unique component name</param>
            <param name="instance">Component instance</param>
            <param name="cleanUpHandler">Delegate for external clean up method</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.StartListening">
            <summary>
            Startet das Horchen auf Client-Anfragen.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.StopListening">
            <summary>
            Beendet das Horchen auf Client-Anfragen.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.CloseChannel">
            <summary>
            Schließt den Kanal, falls dieser geöffent ist.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.HasBeforeInvokeSubscriptions">
            <summary>
            Checks whether the BeforeInvoke event has subscriptions.
            </summary>
            <returns>True, if subsciptions exist, otherwise, false.</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.HasAfterInvokeSubscriptions">
            <summary>
            Checks whether the AfterInvoke event has subscriptions.
            </summary>
            <returns>True, if subsciptions exist, otherwise, false.</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.HasInvokeCanceledSubscriptions">
            <summary>
            Checks whether the InvokeCanceled event has subscriptions.
            </summary>
            <returns>True, if subsciptions exist, otherwise, false.</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.HasInvokeRejectedSubscriptions">
            <summary>
            Checks whether the InvokeRejected event has subscriptions.
            </summary>
            <returns>True, if subsciptions exist, otherwise, false.</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.OnBeforeInvoke(Zyan.Communication.BeforeInvokeEventArgs)">
            <summary>
            Fires the BeforeInvoke event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.OnAfterInvoke(Zyan.Communication.AfterInvokeEventArgs)">
            <summary>
            Fires the AfterInvoke event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.OnInvokeCanceled(Zyan.Communication.InvokeCanceledEventArgs)">
            <summary>
            Fires the InvokeCanceled event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.OnInvokeRejected(Zyan.Communication.InvokeCanceledEventArgs)">
            <summary>
            Fires the InvokeRejected event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.StartNotificationService">
            <summary>
            Startet den Benachrichtigungsdienst.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.StopNotificationService">
            <summary>
            Beendet den Benachrichtigungsdienst.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.PublishEvent(System.String)">
            <summary>
            Veröffentlicht ein Ereignis einer Serverkomponente.
            </summary>
            <param name="eventName">Ereignisname</param>
            <returns>Delegat für Benachrichtigungsversand an registrierte Clients</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.Dispose">
            <summary>
            Releases all managed resources.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.Dispose(System.Boolean)">
            <summary>
            Releases all managed resources.
            </summary>
            <param name="calledFromFinalizer">Specifies if this method is called from finalizer or not</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.Finalize">
            <summary>
            Is called from runtime when this object is finalized.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.OnClientLoggedOn(Zyan.Communication.LoginEventArgs)">
            <summary>
            Fires "ClientLoggedOn" event.
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.OnClientLoggedOff(Zyan.Communication.LoginEventArgs)">
            <summary>
            Fires "ClientLoggedOff" event.
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.OnClientSessionTerminated(Zyan.Communication.LoginEventArgs)">
            <summary>
            Fires "ClientSessionTerminated" event.
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.OnClientHeartbeatReceived(Zyan.Communication.ClientHeartbeatEventArgs)">
            <summary>
            Fires the ClientHeartbeatReceived event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost._dispatcher_ClientHeartbeatReceived(System.Object,Zyan.Communication.ClientHeartbeatEventArgs)">
            <summary>
            Called, when dispatcher receives a heartbeat signal from a client.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Zyan.Communication.ZyanComponentHost.SessionManager">
            <summary>
            Returns the session manager used by this host.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanComponentHost.Hosts">
            <summary>
            Gets a list of all known hosts.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanComponentHost.ComponentCatalog">
            <summary>
            Get or sets the component catalog for this host instance.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanComponentHost.ComponentRegistry">
            <summary>
            Returns a name-value-list of all component registrations.
            <remarks>
            If the list doesn´t exist yet, it will be created automaticly.
            </remarks>
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanComponentHost.Name">
            <summary>
            Gibt den Namen des Komponentenhosts zurück.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanComponentHost.BeforeInvoke">
            <summary>
            Occurs before the component call is initiated.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanComponentHost.AfterInvoke">
            <summary>
            Occurs after the component call is completed.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanComponentHost.InvokeCanceled">
            <summary>
            Occurs when the component call is canceled due to exception.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanComponentHost.InvokeRejected">
            <summary>
            Occurs when the component call is rejected due to security reasons.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanComponentHost.IsNotificationServiceRunning">
            <summary>
            Gibt zurück, ob der Benachrichtigungsdienst läuft, oder nicht.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanComponentHost.NotificationService">
            <summary>
            Gibt den Benachrichtigungsdienst zurück.
            </summary>		
        </member>
        <member name="P:Zyan.Communication.ZyanComponentHost.SerializationHandling">
            <summary>
            Gibt die Verwaltung für benutzerdefinierte Serialisierungsbehandlung zurück.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanComponentHost.ClientLoggedOn">
            <summary>
            Occurs when new client is logged on.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanComponentHost.ClientLoggedOff">
            <summary>
            Occurs when the client is logged off.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanComponentHost.ClientSessionTerminated">
            <summary>
            Occurs when the client session is terminated abnormally.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanComponentHost.ClientHeartbeatReceived">
            <summary>
            Event: Occours when a heartbeat signal is received from a client.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanComponentHost.PollingEventTracingEnabled">
            <summary>
            Gets or sets whether polling event tracing is enabled.
            </summary>
        </member>
        <member name="T:Zyan.Communication.SerializationHandlerRepository">
            <summary>
            Verwaltet Serialisierungshandler.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SerializationHandlerRepository.#ctor">
            <summary>
            Erzeugt eine neue Instanz der SerializationHandlerRepository-Klasse.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SerializationHandlerRepository.RegisterSerializationHandler(System.Type,Zyan.Communication.ISerializationHandler)">
            <summary>
            Registriert einen Serialisierungshandler für einen bestimmten Typ.
            </summary>
            <param name="handledType">Typ, dessen Serialisierung behandelt werden soll</param>
            <param name="handler">Serialisierungshandler</param>
        </member>
        <member name="M:Zyan.Communication.SerializationHandlerRepository.UnregisterSerializationHandler(System.Type)">
            <summary>
            Entfernt die Registrierung eines Serialisierungshandlers für einen bestimmten Typ.
            </summary>
            <param name="handledType">Typ</param>
        </member>
        <member name="M:Zyan.Communication.SerializationHandlerRepository.FindMatchingSerializationHandler(System.Type,System.Type@,Zyan.Communication.ISerializationHandler@)">
            <summary>
            Ermittelt - wenn möglich - einen passenden Serialisierungshandler für den angegebenen Typen.
            </summary>
            <param name="type">Typ</param>
            <param name="handledType">Behandelter Typ</param>
            <param name="handler">Serialisierungshandler</param>
        </member>
        <member name="M:Zyan.Communication.SerializationHandlerRepository.GetEnumerator">
            <summary>
            Gibt einen typisierten Enumerator zurück.
            </summary>
            <returns>Typisierter Enumerator</returns>
        </member>
        <member name="M:Zyan.Communication.SerializationHandlerRepository.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gibt einen Enumerator zurück.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="P:Zyan.Communication.SerializationHandlerRepository.Item(System.Type)">
            <summary>
            Gibt den registrierten Serialisierungshandler für einen bestimmten Typ zurück.
            </summary>
            <param name="handledType">Behandelter Typ</param>
            <returns>Serialisierungshandler</returns>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup">
            <summary>
            Server protocol setup for bi-directional TCP communication with support for user defined authentication and security.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning)">
            <summary>
            Creates a new instance of the TcpDuplexServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor">
            <summary>
            Creates a new instance of the TcpDuplexServerProtocolSetup class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider)">
            <summary>
            Creates a new instance of the TcpDuplexServerProtocolSetup class.
            </summary>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Int32,Zyan.Communication.Security.IAuthenticationProvider)">
            <summary>
            Creates a new instance of the TcpDuplexServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the TcpDuplexServerProtocolSetup class.
            </summary>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the TcpDuplexServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean)">
            <summary>
            Creates a new instance of the TcpDuplexServerProtocolSetup class.
            </summary>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean)">
            <summary>
            Creates a new instance of the TcpDuplexServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the TcpDuplexServerProtocolSetup class.
            </summary>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the TcpDuplexServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String)">
            <summary>
            Creates a new instance of the TcpDuplexServerProtocolSetup class.
            </summary>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String)">
            <summary>
            Creates a new instance of the TcpDuplexServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the TcpDuplexServerProtocolSetup class.
            </summary>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the TcpDuplexServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the TcpDuplexServerProtocolSetup class.
            </summary>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the TcpDuplexServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String,System.Boolean,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the TcpDuplexServerProtocolSetup class.
            </summary>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String,System.Boolean,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the TcpDuplexServerProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="tcpPort">TCP port number</param>
            <param name="authProvider">Authentication provider</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Encryption algorithm (e.G. "3DES")</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.ConfigureEncryption">
            <summary>
            Configures encrpytion sinks, if encryption is enabled.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.CreateChannel">
            <summary>
            Creates and configures a Remoting channel.
            </summary>
            <returns>Remoting channel</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.TcpKeepAliveEnabled">
            <summary>
            Enables or disables TCP KeepAlive.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.TcpKeepAliveTime">
            <summary>
            Gets or sets the TCP KeepAlive time in milliseconds.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.TcpKeepAliveInterval">
            <summary>
            Gets or sets the TCP KeepAlive interval in milliseconds
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.TcpPort">
            <summary>
            Gets or sets the TCP port to listen for client calls.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.Algorithm">
            <summary>
            Gets or sets the name of the symmetric encryption algorithm.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.Oeap">
            <summary>
            Gets or sets, if OEAP padding should be activated.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.AuthenticationProvider">
            <summary>
            Gets or sets the Authentication Provider to be used.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.Versioning">
            <summary>
            Gets or sets the versioning behavior.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup">
            <summary>
            Client protocol setup for bi-directional TCP communication with support for user defined authentication and security.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean,System.String)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Symmetric encryption algorithm (e.G. "3DES")</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Symmetric encryption algorithm (e.G. "3DES")</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean,System.String,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Symmetric encryption algorithm (e.G. "3DES")</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Symmetric encryption algorithm (e.G. "3DES")</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean,System.String,System.Int32)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Symmetric encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String,System.Int32)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Symmetric encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean,System.String,System.Int32,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Symmetric encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String,System.Int32,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Symmetric encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Symmetric encryption algorithm (e.G. "3DES")</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Symmetric encryption algorithm (e.G. "3DES")</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean,System.String,System.Boolean,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Symmetric encryption algorithm (e.G. "3DES")</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String,System.Boolean,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Symmetric encryption algorithm (e.G. "3DES")</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Symmetric encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Symmetric encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean,System.String,System.Int32,System.Boolean,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Symmetric encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning,System.Boolean,System.String,System.Int32,System.Boolean,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Creates a new instance of the TcpDuplexClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
            <param name="encryption">Specifies if the communication sould be encrypted</param>
            <param name="algorithm">Symmetric encryption algorithm (e.G. "3DES")</param>
            <param name="maxAttempts">Maximum number of connection attempts</param>
            <param name="oaep">Specifies if OAEP padding should be activated</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.ConfigureEncryption">
            <summary>
            Configures encrpytion sinks, if encryption is enabled.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.CreateChannel">
            <summary>
            Creates and configures a Remoting channel.
            </summary>
            <returns>Remoting channel</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.TcpKeepAliveEnabled">
            <summary>
            Enables or disables TCP KeepAlive.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.TcpKeepAliveTime">
            <summary>
            Gets or sets the TCP KeepAlive time in milliseconds.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.TcpKeepAliveInterval">
            <summary>
            Gets or sets the TCP KeepAlive interval in milliseconds
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.Algorithm">
            <summary>
            Gets or sets the name of the symmetric encryption algorithm.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.Oeap">
            <summary>
            Gets or sets, if OEAP padding should be activated.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.MaxAttempts">
            <summary>
            Gets or sets the maximum number of attempts when trying to establish a encrypted conection.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.Versioning">
            <summary>
            Gets or sets the versioning behavior.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Notification.NotificationService">
            <summary>
            Benachrichtigungsdienst.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationService.#ctor">
            <summary>
            Erzeugt eine neue Instanz von NotificationService.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationService.Subscribe(System.String,System.EventHandler{Zyan.Communication.Notification.NotificationEventArgs})">
            <summary>
            Registriert einen Client für den Empfang von Benachrichtigungen bei einem bestimmten Ereignis.
            </summary>
            <param name="eventName">Ereignisname</param>
            <param name="handler">Delegat auf Client-Ereignisprozedur</param>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationService.Unsubscribe(System.String,System.EventHandler{Zyan.Communication.Notification.NotificationEventArgs})">
            <summary>
            Hebt eine Registrierung für den Empfang von Benachrichtigungen eines bestimmten Ereignisses auf.
            </summary>
            <param name="eventName"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationService.RaiseEvent(System.String,System.Object)">
            <summary>
            Feuert ein bestimmtes Ereignis.
            </summary>
            <param name="eventName">Ereignisname</param>
            <param name="message">Nachricht</param>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationService.OnServerEvent(System.String,Zyan.Communication.Notification.NotificationEventArgs)">
            <summary>
            Versendet Benachrichtigungen über ein bestimmtes Ereignis an alle Registrierten Clients.
            </summary>
            <param name="eventName">Ereignisname</param>
            <param name="e">Ereignisargumente</param>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationService.BeginSend(System.String,Zyan.Communication.Notification.NotificationEventArgs,System.EventHandler{Zyan.Communication.Notification.NotificationEventArgs})">
            <summary>
            Sendet eine Ereignisbenachrichtigung asynchron.
            </summary>
            <param name="eventName">Ereignisname</param>
            <param name="e">Ereignisargumente</param>
            <param name="eventDelegate">Delegat auf registrierte Client-Ereignisprozedur</param>
        </member>
        <member name="T:Zyan.Communication.InvocationDetails">
            <summary>
            Contains all necessary details to invoke a specified method.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvocationDetails.TrackingID">
            <summary>
            Gets or sets the unique key for call tracking.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvocationDetails.InterfaceName">
            <summary>
            Gets or sets the name of the component (namespace included) interface.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvocationDetails.DelegateCorrelationSet">
            <summary>
            Gets or sets correlation set for dynamic event and delegate wiring.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvocationDetails.MethodName">
            <summary>
            Gets or sets the name of the invoked method.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvocationDetails.GenericArguments">
            <summary>
            Gets or sets Generic arguments of the invoked method.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvocationDetails.ParamTypes">
            <summary>
            Gets or sets parameter types of the invoked method.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvocationDetails.Args">
            <summary>
            Gets or sets parameter values of the invoked method.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvocationDetails.ReturnValue">
            <summary>
            Gets or sets the return values of the invoked method.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvocationDetails.CallContextData">
            <summary>
            Gets or sets the data from call context.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvocationDetails.DelegateParamIndexes">
            <summary>
            Gets or sets the DelegateInterceptor to parameter index mapping.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvocationDetails.Registration">
            <summary>
            Gets or sets the component registration.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvocationDetails.Instance">
            <summary>
            Gets or sets the component instance.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvocationDetails.Type">
            <summary>
            Gets or sets the component type.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvocationDetails.Session">
            <summary>
            Gets or stes the session.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvocationDetails.ExceptionThrown">
            <summary>
            Gets or sets whether a exception was thrown, or not.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvocationDetails.WiringList">
            <summary>
            Gets or sets wiring correlation for events.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvocationDetails.Scope">
            <summary>
            Gets or sets the transaction scope.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvocationDetails.MethodInfo">
            <summary>
            Gets or sets method metadata.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Types.InterLinqTypeSystem">
            <summary>
            Singleton class for the <see cref="T:Zyan.InterLinq.Types.InterLinqTypeSystem"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqTypeSystem.#ctor">
            <summary>
            Private constructor to avoid external instantiation.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqTypeSystem.GetInterLinqMemberInfo(System.Reflection.MemberInfo)">
            <summary>
            Returns the <see cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/> for a C# <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberInfo"><see cref="T:System.Reflection.MemberInfo"/>.</param>
            <returns>Returns the <see cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/> for a C# <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqTypeSystem.GetCollectionOf``1(System.Collections.IEnumerable)">
            <summary>
            Returns a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> with each element in <paramref name="memberInfos"/>.
            The elements in <paramref name="memberInfos"/> will be converted to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Element <see cref="T:System.Type">Types</see> in the returned ReadOnlyColelction.</typeparam>
            <param name="memberInfos"><see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Reflection.MemberInfo">MemberInfo's</see>.</param>
            <returns>Returns a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> with each element in <paramref name="memberInfos"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqTypeSystem.GetInterLinqVersionOf``1(System.Reflection.MemberInfo)">
            <summary>
            Returns the <see cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/> for a C# <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the requested <see cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/></typeparam>
            <param name="memberInfo"><see cref="T:System.Reflection.MemberInfo"/>.</param>
            <returns>Returns the <see cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/> for a C# <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqTypeSystem.IsInterLinqMemberInfoRegistered(Zyan.InterLinq.Types.InterLinqMemberInfo)">
            <summary>
            Returns true if the <see cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/> was already constructed.
            </summary>
            <param name="memberInfo"><see cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/>.</param>
            <returns>Returns true if the <see cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/> was already constructed.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqTypeSystem.GetClrVersion``1(Zyan.InterLinq.Types.InterLinqMemberInfo)">
            <summary>
            Returns the C# <see cref="T:System.Reflection.MemberInfo"/> for a <see cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the requested <see cref="T:System.Reflection.MemberInfo"/></typeparam>
            <param name="memberInfo"><see cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/>.</param>
            <returns>Returns the C# <see cref="T:System.Reflection.MemberInfo"/> for a <see cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqTypeSystem.SetClrVersion(Zyan.InterLinq.Types.InterLinqMemberInfo,System.Reflection.MemberInfo)">
            <summary>
            Stores the <see cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/>-<see cref="T:System.Reflection.MemberInfo"/>
            mapping locally.
            </summary>
            <param name="memberInfo"><see cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/>.</param>
            <param name="clrMeberInfo"><see cref="T:System.Reflection.MemberInfo"/>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqTypeSystem.GetElementType(System.Type)">
            <summary>
            Gets the generic argument of an <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="seqType"><see cref="T:System.Type"/> to search in.</param>
            <returns>Returns the generic argument of an <see cref="T:System.Collections.IEnumerable"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqTypeSystem.FindIEnumerable(System.Type)">
            <summary>
            Finds an <see cref="T:System.Collections.IEnumerable"/> in <paramref name="seqType"/>.
            </summary>
            <param name="seqType"><see cref="T:System.Type"/> to search in.</param>
            <returns>Returns an <see cref="T:System.Collections.IEnumerable"/>.</returns>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqTypeSystem.Instance">
            <summary>
            Gets an instance of the <see cref="T:Zyan.InterLinq.Types.InterLinqTypeSystem"/>.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Types.InterLinqNestedType">
            <summary>
            InterLINQ representation of the nested <see cref="T:System.Type"/>.
            </summary>
            <seealso cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/>
            <seealso cref="T:System.Type"/>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqNestedType.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqNestedType.#ctor(System.Type)">
            <summary>
            Initializes this class.
            </summary>
            <param name="representedType">Represented CLR <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqNestedType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see langword="object"/>.</returns>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqNestedType.MemberType">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberTypes">MemberType</see>.
            </summary>
            <seealso cref="P:System.Type.MemberType"/>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableLambdaExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.LambdaExpression"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableLambdaExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableLambdaExpression.#ctor(System.Linq.Expressions.LambdaExpression,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.LambdaExpression"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableLambdaExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableLambdaExpression.Body">
            <summary>
            See <see cref="P:System.Linq.Expressions.LambdaExpression.Body"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableLambdaExpression.Parameters">
            <summary>
            See <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"/>
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableConditionalExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.ConditionalExpression"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableConditionalExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableConditionalExpression.#ctor(System.Linq.Expressions.ConditionalExpression,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.ConditionalExpression"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableConditionalExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableConditionalExpression.IfTrue">
            <summary>
            See <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableConditionalExpression.IfFalse">
            <summary>
            See <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableConditionalExpression.Test">
            <summary>
            See <see cref="P:System.Linq.Expressions.ConditionalExpression.Test"/>
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.ZyanServerQueryHandler">
            <summary>
            Provides methods to communicate with the InterLINQ service over Zyan. 
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.IQueryRemoteHandler">
            <summary>
            Interface providing methods to communicate with
            the InterLINQ service.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.IQueryRemoteHandler.Retrieve(Zyan.InterLinq.Expressions.SerializableExpression)">
            <summary>
            Retrieves data from the server by an <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            </summary>
            <remarks>
            This method's return type depends on the submitted 
            <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            Here some examples ('T' is the requested type):
            <list type="list">
                <listheader>
                    <term>Method</term>
                    <description>Return Type</description>
                </listheader>
                <item>
                    <term>Select(...)</term>
                    <description>T[]</description>
                </item>
                <item>
                    <term>First(...), Last(...)</term>
                    <description>T</description>
                </item>
                <item>
                    <term>Count(...)</term>
                    <description><see langword="int"/></description>
                </item>
                <item>
                    <term>Contains(...)</term>
                    <description><see langword="bool"/></description>
                </item>
            </list>
            </remarks>
            <param name="expression">
                <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">Expression</see> tree 
                containing selection and projection.
            </param>
            <returns>Returns requested data.</returns>
        </member>
        <member name="M:Zyan.InterLinq.ZyanServerQueryHandler.#ctor(Zyan.InterLinq.IQueryHandler)">
            <summary>
            Creates ZyanServerQueryHandler instance.
            </summary>
            <param name="innerHandler">Inner Handler of this Server</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanServerQueryHandler.#ctor(System.Func{System.Type,System.Collections.IEnumerable})">
            <summary>
            Creates ZyanServerQueryHandler instance.
            </summary>
            <param name="handler">IEnumerable delegate</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanServerQueryHandler.#ctor(System.Func{System.Type,System.Linq.IQueryable})">
            <summary>
            Creates ZyanServerQueryHandler instance.
            </summary>
            <param name="handler">IQueryable delegate</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanServerQueryHandler.#ctor(Zyan.InterLinq.IObjectSource)">
            <summary>
            Creates ZyanServerQueryHandler instance.
            </summary>
            <param name="source">IObjectSource instance</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanServerQueryHandler.#ctor(Zyan.InterLinq.IEntitySource)">
            <summary>
            Creates ZyanServerQueryHandler instance.
            </summary>
            <param name="source">IEntitySource instance</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanServerQueryHandler.Retrieve(Zyan.InterLinq.Expressions.SerializableExpression)">
            <summary>
            Retrieves data from the server by an <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            </summary>
            <remarks>
            This method's return type depends on the submitted 
            <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            Here some examples ('T' is the requested type):
            <list type="list">
                <listheader>
                    <term>Method</term>
                    <description>Return Type</description>
                </listheader>
                <item>
                    <term>Select(...)</term>
                    <description>T[]</description>
                </item>
                <item>
                    <term>First(...), Last(...)</term>
                    <description>T</description>
                </item>
                <item>
                    <term>Count(...)</term>
                    <description><see langword="int"/></description>
                </item>
                <item>
                    <term>Contains(...)</term>
                    <description><see langword="bool"/></description>
                </item>
            </list>
            </remarks>
            <param name="expression">
                <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">Expression</see> tree 
                containing selection and projection.
            </param>
            <returns>Returns requested data.</returns>
            <seealso cref="M:Zyan.InterLinq.IQueryRemoteHandler.Retrieve(Zyan.InterLinq.Expressions.SerializableExpression)"/>
        </member>
        <member name="P:Zyan.InterLinq.ZyanServerQueryHandler.InnerHandler">
            <summary>
            Gets the <see cref="T:Zyan.InterLinq.IQueryRemoteHandler"/>.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Communication.Remoting.ClientQueryRemotingHandler">
            <summary>
            Client handler class managing the connection 
            via Remoting to the InterLINQ Server.
            </summary>
            <seealso cref="T:Zyan.InterLinq.Communication.ClientQueryHandler"/>
            <seealso cref="T:Zyan.InterLinq.InterLinqQueryHandler"/>
            <seealso cref="T:Zyan.InterLinq.IQueryHandler"/>
        </member>
        <member name="T:Zyan.InterLinq.Communication.ClientQueryHandler">
            <summary>
            Client implementation of the <see cref="T:Zyan.InterLinq.InterLinqQueryHandler"/>.
            </summary>
            <seealso cref="T:Zyan.InterLinq.InterLinqQueryHandler"/>
            <seealso cref="T:Zyan.InterLinq.IQueryHandler"/>
        </member>
        <member name="F:Zyan.InterLinq.Communication.ClientQueryHandler.queryRemoteHandler">
            <summary>
            <see cref="T:Zyan.InterLinq.IQueryRemoteHandler"/> instance.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Communication.ClientQueryHandler.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Communication.ClientQueryHandler.#ctor(Zyan.InterLinq.IQueryRemoteHandler)">
            <summary>
            Initializes this class.
            </summary>
            <param name="queryRemoteHandler"><see cref="T:Zyan.InterLinq.IQueryRemoteHandler"/> to communicate with the server.</param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.ClientQueryHandler.Connect">
            <summary>
            Connects to the server.
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Communication.ClientQueryHandler.QueryProvider">
            <summary>
            Gets the <see cref="T:System.Linq.IQueryProvider"/>.
            </summary>
            <seealso cref="P:Zyan.InterLinq.InterLinqQueryHandler.QueryProvider"/>
        </member>
        <member name="P:Zyan.InterLinq.Communication.ClientQueryHandler.QueryRemoteHandler">
            <summary>
            Gets the <see cref="T:Zyan.InterLinq.IQueryRemoteHandler"/>;
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Remoting.ClientQueryRemotingHandler.#ctor">
            <summary>
            Initializes this class.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Remoting.ClientQueryRemotingHandler.#ctor(System.Boolean)">
            <summary>
            Initializes this class.
            </summary>
            <param name="makeDefaultConnection">If set to true, the client will connect to tcp://localhost:7890/InterLINQ_Remoting_Server.</param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Remoting.ClientQueryRemotingHandler.#ctor(System.String)">
            <summary>
            Initializes this class.
            </summary>
            <param name="url">URL where the Remote Objects will be published.</param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Remoting.ClientQueryRemotingHandler.Connect">
            <summary>
            Connects to the server.
            <see cref="T:Zyan.InterLinq.InterLinqQueryHandler"/>
            </summary>
            <seealso cref="M:Zyan.InterLinq.Communication.ClientQueryHandler.Connect"/>
        </member>
        <member name="T:Zyan.Communication.Delegates.FilteredSystemEventHandler">
            <summary>
            Represents filtered event handler of type System.EventHandler.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.FilteredSystemEventHandler.#ctor(System.EventHandler,Zyan.Communication.Delegates.IEventFilter,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Delegates.FilteredSystemEventHandler"/> class.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="eventFilter">The event filter.</param>
            <param name="filterLocally">Whether the filter should also work when used locally.</param>
        </member>
        <member name="M:Zyan.Communication.Delegates.FilteredSystemEventHandler.op_Implicit(Zyan.Communication.Delegates.FilteredSystemEventHandler)~System.EventHandler">
            <summary>
            Performs an implicit conversion from <see cref="T:Zyan.Communication.Delegates.FilteredSystemEventHandler"/>
            to <see cref="T:System.EventHandler"/>.
            </summary>
            <param name="filteredEventHandler">The filtered event handler.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="P:Zyan.Communication.Delegates.FilteredSystemEventHandler.EventHandler">
            <summary>
            Gets the event handler.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.FilteredSystemEventHandler.EventFilter">
            <summary>
            Gets the event filter.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.FilteredSystemEventHandler.FilterLocally">
            <summary>
            Gets or sets a value indicating whether this event filter should also work locally.
            </summary>
        </member>
        <member name="T:Zyan.Communication.NewLogonNeededEventArgs">
            <summary>
            Describes arguments for NewLogonNeeded events.
            </summary>
        </member>
        <member name="M:Zyan.Communication.NewLogonNeededEventArgs.#ctor">
            <summary>
            Creates a new instance of the NewLogonNeededEventArgs class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.NewLogonNeededEventArgs.#ctor(System.Collections.Hashtable)">
            <summary>
            Creates a new instance of the NewLogonNeededEventArgs class.
            </summary>
            <param name="credentials">Credentials for logon</param>
        </member>
        <member name="M:Zyan.Communication.NewLogonNeededEventArgs.#ctor(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Creates a new instance of the NewLogonNeededEventArgs class.
            </summary>
            <param name="credentials">Security credentials</param>
            <param name="cancel">Cancel flag</param>
        </member>
        <member name="P:Zyan.Communication.NewLogonNeededEventArgs.Credentials">
            <summary>
            Gets or sets the security credentials for the new logon.
            </summary>
        </member>
        <member name="P:Zyan.Communication.NewLogonNeededEventArgs.Cancel">
            <summary>
            Gets or sets the cancel flag. If set to true, the new logon will be canceled.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Types.InterLinqConstructorInfo">
            <summary>
            InterLINQ representation of <see cref="T:System.Reflection.ConstructorInfo"/>.
            </summary>
            <seealso cref="T:Zyan.InterLinq.Types.InterLinqMethodBase"/>
            <seealso cref="T:Zyan.InterLinq.Types.InterLinqMemberInfo"/>
            <seealso cref="T:System.Reflection.ConstructorInfo"/>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqConstructorInfo.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqConstructorInfo.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="constrcutorInfo">Represented CLR <see cref="T:System.Reflection.ConstructorInfo"/>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.InterLinqConstructorInfo.GetClrVersion">
            <summary>
            Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <returns>Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="P:Zyan.InterLinq.Types.InterLinqConstructorInfo.MemberType">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberTypes">MemberType</see>.
            </summary>
            <seealso cref="P:Zyan.InterLinq.Types.InterLinqMemberInfo.MemberType"/>
            <seealso cref="P:System.Reflection.ConstructorInfo.MemberType"/>
        </member>
        <member name="T:Zyan.InterLinq.Types.Anonymous.AnonymousObject">
            <summary>
            Represents an instance of an <see cref="T:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousObject.#ctor">
            <summary>
            Instance a new instance of the class <see cref="T:Zyan.InterLinq.Types.Anonymous.AnonymousObject"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousObject.#ctor(System.Collections.Generic.IEnumerable{Zyan.InterLinq.Types.Anonymous.AnonymousProperty})">
            <summary>
            Instance a new instance of the class <see cref="T:Zyan.InterLinq.Types.Anonymous.AnonymousObject"/>
            and initialze it with a list of properties.
            </summary>
            <param name="properties"><see cref="T:Zyan.InterLinq.Types.Anonymous.AnonymousProperty">Anonymous properties</see> to add.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousObject.ToString">
            <summary>
            Returns a string representing this <see cref="T:Zyan.InterLinq.Types.Anonymous.AnonymousObject"/>.
            </summary>
            <returns>Returns a string representing this <see cref="T:Zyan.InterLinq.Types.Anonymous.AnonymousObject"/>.</returns>
        </member>
        <member name="P:Zyan.InterLinq.Types.Anonymous.AnonymousObject.Properties">
            <summary>
            The properties of the instance.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.IObjectSource">
            <summary>
            Interface required for the built-in Linq to objects support
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.IBaseSource">
            <summary>
            Base interface required for the built-in Linq support.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.IObjectSource.Get``1">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">Generic Argument of the returned <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.MemberAssignment"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment.#ctor(System.Linq.Expressions.MemberAssignment,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.MemberAssignment"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="memberAssignment">The original, not serializable <see cref="T:System.Linq.Expressions.MemberBinding"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="P:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.MemberBinding"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment.Expression">
            <summary>
            See <see cref="P:System.Linq.Expressions.MemberAssignment.Expression"/>
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableTypeBinaryExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypeBinaryExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypeBinaryExpression.#ctor(System.Linq.Expressions.TypeBinaryExpression,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="P:Zyan.InterLinq.Expressions.SerializableTypeBinaryExpression.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="P:Zyan.InterLinq.Expressions.SerializableTypeBinaryExpression.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableTypeBinaryExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="P:Zyan.InterLinq.Expressions.SerializableTypeBinaryExpression.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableTypeBinaryExpression.Expression">
            <summary>
            See <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableTypeBinaryExpression.TypeOperand">
            <summary>
            See <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand"/>
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableParameterExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.ParameterExpression"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableParameterExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableParameterExpression.#ctor(System.Linq.Expressions.ParameterExpression,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.ParameterExpression"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableParameterExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableParameterExpression.Name">
            <summary>
            See <see cref="P:System.Linq.Expressions.ParameterExpression.Name"/>
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.ZyanQueryHandler">
            <summary>
            Abstract query handler implementation
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.ZyanQueryHandler.Get``1">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="T">Generic Argument of the returned <see cref="T:System.Linq.IQueryable`1"/>.</typeparam>
            <returns>Returns an <see cref="T:System.Linq.IQueryable`1"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.ZyanQueryHandler.Get(System.Type)">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <param name="type">Generic Argument of the returned <see cref="T:System.Linq.IQueryable"/>.</param>
            <returns>Returns an <see cref="T:System.Linq.IQueryable"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.ZyanQueryHandler.CloseSession">
            <summary>
            Tells the <see cref="T:Zyan.InterLinq.IQueryHandler"/> to close the current session.
            </summary>
            <returns>True, if the session closing was successful. False, if not.</returns>
        </member>
        <member name="M:Zyan.InterLinq.ZyanQueryHandler.StartSession">
            <summary>
            Tells the <see cref="T:Zyan.InterLinq.IQueryHandler"/> to start a new the session.
            </summary>
            <returns>True, if the session creation was successful. False, if not.</returns>
        </member>
        <member name="T:Zyan.InterLinq.Communication.Wcf.ServiceConstants">
            <summary>
            Constant class for the WCF implementation.
            </summary>
        </member>
        <member name="F:Zyan.InterLinq.Communication.Wcf.ServiceConstants.ServerAddress">
            <summary>
            Default WCF Server address.
            </summary>
        </member>
        <member name="F:Zyan.InterLinq.Communication.Wcf.ServiceConstants.ServerPort">
            <summary>
            Default WCF Server port.
            </summary>
        </member>
        <member name="F:Zyan.InterLinq.Communication.Wcf.ServiceConstants.ServicePath">
            <summary>
            Default WCF Service path.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Delegates.DynamicEventWire`1">
            <summary>
            Strongly typed event handler wrapper for DelegateInterceptor.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.DynamicEventWire`1.#ctor">
            <summary>
            Initializes <see cref="T:Zyan.Communication.Delegates.DynamicWire`1"/> instance.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.DynamicEventWire`1.In">
            <summary>
            Dynamic wire delegate.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.DynamicEventWire`1.InDelegate">
            <summary>
            Gets the untyped In delegate.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ComponentCatalog">
            <summary>
            Implements a component catalog.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.#ctor">
            <summary>
            Creates a new instance of the ComponentCatalog class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the ComponentCatalog class.
            </summary>
            <param name="disposeWithHost">Must be "true", when this instance should be disposed together with its owning host</param>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.RegisterComponent``2(System.String,Zyan.Communication.ActivationType,System.Action{System.Object})">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <typeparam name="T">Implementation type of the component</typeparam>
            <param name="uniqueName">Unique component name</param>
            <param name="activationType">Activation type (SingleCall/Singleton)</param>
            <param name="cleanUpHandler">Delegate for external clean up method</param>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.RegisterComponent``1(System.String,System.Func{System.Object},Zyan.Communication.ActivationType,System.Action{System.Object})">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <param name="uniqueName">Unique component name</param>
            <param name="factoryMethod">Delegate of factory method for external instance creation</param>
            <param name="activationType">Activation type (SingleCall/Singleton)</param>
            <param name="cleanUpHandler">Delegate for external clean up method</param>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.RegisterComponent``2(System.String,``1,System.Action{System.Object})">
            <summary>
            Registeres a component instance in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <typeparam name="T">Implementation type of the component</typeparam>
            <param name="uniqueName">Unique component name</param>
            <param name="instance">Component instance</param>
            <param name="cleanUpHandler">Delegate for external clean up method</param>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.RegisterQueryableMethods``1(System.String)">
            <summary>
            Wraps all component methods returning IEnumerable{T} or IQueryable{T}.
            </summary>
            <typeparam name="I">Interface to wrap.</typeparam>
            <param name="uniqueName">Component unique name.</param>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.UnregisterComponent(System.String)">
            <summary>
            Deletes a component registration.
            </summary>
            <param name="uniqueName">Unique component name</param>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.GetRegistration(System.String)">
            <summary>
            Gets registration data for a specified component by its interface name.
            </summary>
            <param name="interfaceName">Name of the component´s interface</param>
            <returns>Component registration</returns>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.GetRegisteredComponents">
            <summary>
            Returns a list with information about all registered components.
            </summary>
            <returns>List with component information</returns>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.GetComponentInstance(Zyan.Communication.ComponentRegistration)">
            <summary>
            Returns an instance of a specified registered component.
            </summary>
            <param name="registration">Component registration</param>
            <returns>Component instance</returns>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.GetComponent``1">
            <summary>
            Returns an instance of a specified registered component.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <returns>Component instance</returns>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.GetComponent(System.String)">
            <summary>
            Returns an instance of a specified registered component.
            </summary>
            <param name="uniqueName">Unique component name</param>
            <returns>Component instance</returns>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.Dispose">
            <summary>
            Releases all managed resources.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.Dispose(System.Boolean)">
            <summary>
            Releases all managed resources.
            </summary>
            <param name="calledFromFinalizer">Specifies if this method is called from finalizer or not</param>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.Finalize">
            <summary>
            Is called from runtime when this object is finalized.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.CleanUpComponentInstance(Zyan.Communication.ComponentRegistration)">
            <summary>
            Processes resource clean up logic for a specified registered Singleton activated component.
            </summary>
            <param name="regEntry">Component registration</param>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.CleanUpComponentInstance(Zyan.Communication.ComponentRegistration,System.Object)">
            <summary>
            Processes resource clean up logic for a specified registered component.
            </summary>
            <param name="regEntry">Component registration</param>
            <param name="instance">Component instance to clean up</param>
        </member>
        <member name="P:Zyan.Communication.ComponentCatalog.ComponentRegistry">
            <summary>
            Returns a name-value-list of all component registrations.
            <remarks>
            If the list doesn´t exist yet, it will be created automaticly.
            </remarks>
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentCatalog.DisposeWithHost">
            <summary>
            Gets, if this component catalog should be automaticly disposed, when the owning host is disposed.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ServerSession">
            <summary>
            Beschreibt eine Sitzung auf dem Server.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ServerSession.#ctor(System.Guid,System.Security.Principal.IIdentity,Zyan.Communication.SessionMgmt.SessionVariableAdapter)">
            <summary>
            Erzeugt eine neue Instanz von ServerSession.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
            <param name="identity">Identität</param>
            <param name="sessionVariableAdapter">Adapter für den Zugriff auf Sitzungsvariablen</param>
        </member>
        <member name="M:Zyan.Communication.ServerSession.#ctor(System.Guid,System.DateTime,System.Security.Principal.IIdentity,Zyan.Communication.SessionMgmt.SessionVariableAdapter)">
            <summary>
            Erzeugt eine neue Instanz von ServerSession.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
            <param name="timestamp">Zeitstempel der Sitzung</param>
            <param name="identity">Identität</param>
            <param name="sessionVariableAdapter">Adapter für den Zugriff auf Sitzungsvariablen</param>
        </member>
        <member name="F:Zyan.Communication.ServerSession.CurrentSession">
            <summary>
            Gibt die Sitzung des aktuellen Threads zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ServerSession.SessionID">
            <summary>
            Gibt den Sitzungsschlüssel zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ServerSession.Identity">
            <summary>
            Gibt die Identität des Beutzers der Sitzung zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ServerSession.Timestamp">
            <summary>
            Gibt den Zeitstempel der Sitzung zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ServerSession.SessionVariables">
            <summary>
            Gibt ein Adapter-Objekt für den Zugriff auf Sitzungsvariablen zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ServerSession.ClientAddress">
            <summary>
            Gets or sets the IP Address of the calling client.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Security.AuthRequestMessage">
            <summary>
            Authentication request message.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Security.AuthRequestMessage.CREDENTIAL_USERNAME">
            <summary>
            User name constant.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Security.AuthRequestMessage.CREDENTIAL_PASSWORD">
            <summary>
            Password constant.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Security.AuthRequestMessage.CREDENTIAL_DOMAIN">
            <summary>
            Domain constant.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Security.AuthRequestMessage.CREDENTIAL_WINDOWS_SECURITY_TOKEN">
            <summary>
            Security token name constant.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Security.AuthRequestMessage.Credentials">
            <summary>
            Gets or sets user's credentials.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.Action`5">
            <summary>
            Encapsulates a method that has five parameters and does not return a value.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.Action`6">
            <summary>
            Encapsulates a method that has six parameters and does not return a value.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.Action`7">
            <summary>
            Encapsulates a method that has seven parameters and does not return a value.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.Action`8">
            <summary>
            Encapsulates a method that has eight parameters and does not return a value.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.Action`9">
            <summary>
            Encapsulates a method that has nine parameters and does not return a value.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.Action`10">
            <summary>
            Encapsulates a method that has ten parameters and does not return a value.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.Func`6">
            <summary>
            Encapsulates a method that has five parameters and returns a value of the type specified by the TResult parameter.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.Func`7">
            <summary>
            Encapsulates a method that has six parameters and returns a value of the type specified by the TResult parameter.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.Func`8">
            <summary>
            Encapsulates a method that has seven parameters and returns a value of the type specified by the TResult parameter.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.Func`9">
            <summary>
            Encapsulates a method that has eight parameters and returns a value of the type specified by the TResult parameter.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.Func`10">
            <summary>
            Encapsulates a method that has nine parameters and returns a value of the type specified by the TResult parameter.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.Func`11">
            <summary>
            Encapsulates a method that has ten parameters and returns a value of the type specified by the TResult parameter.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Security.Exceptions.AccountLockedException">
            <summary>
            Security exception which is thrown if user account is locked.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.AccountLockedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Security.Exceptions.AccountLockedException"/> class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.AccountLockedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Security.Exceptions.AccountLockedException"/> class.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.AccountLockedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Security.Exceptions.AccountLockedException"/> class.
            </summary>
            <param name="message">Exception message.</param>
            <param name="inner">The inner <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.AccountLockedException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Security.Exceptions.AccountLockedException"/> class.
            </summary>
            <param name="message">Exception message.</param>
            <param name="userName">Account user name.</param>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.AccountLockedException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Security.Exceptions.AccountLockedException"/> class.
            </summary>
            <param name="message">Exception message.</param>
            <param name="userName">Account user name.</param>
            <param name="inner">The inner <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.AccountLockedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Security.Exceptions.AccountLockedException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.AccountLockedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the <see cref="T:Zyan.Communication.Security.Exceptions.AccountLockedException"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Zyan.Communication.Security.Exceptions.AccountLockedException.UserName">
            <summary>
            Account user name.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType">
            <summary>
            A class representing an anonymous type.
            <seealso cref="T:Zyan.InterLinq.Types.InterLinqType"/>
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.#ctor">
            <summary>
            Default constructor for serialization or to create an uninitialized <see cref="T:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.#ctor(System.Type)">
            <summary>
            Instance an instance of the class <see cref="T:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType"/>
            </summary>
            <param name="anonymousType">The <see cref="T:System.Type"/> to generate the <see cref="T:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType"/> from.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.Initialize(System.Reflection.MemberInfo)">
            <summary>
            Initializes the <see cref="T:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType"/>.
            </summary>
            <param name="memberInfo">The <see cref="T:System.Type"/> to generate the <see cref="T:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType"/> from.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.CreateClrType">
            <summary>
            Generate the a clr type at runtime.
            </summary>
            <returns>Returns the generated <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.Equals(System.Object)">
            <summary>
            Overrides the equality comparision.
            </summary>
            <param name="obj">Other object to compare with.</param>
            <returns>True, if the other <see langword="object"/> is equal to this. False, if not.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see langword="object"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.GenerateAnonymousType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Generate the a clr type at runtime.
            </summary>
            <returns>Returns the generated <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.GenerateConstructor(System.Reflection.Emit.TypeBuilder,System.String[],System.Collections.Generic.IList{System.Reflection.Emit.FieldBuilder})">
            <summary>
            Generate a constructor with for a type.
            </summary>
            <param name="dynamicType">A <see cref="T:System.Reflection.Emit.TypeBuilder"/> generate the constructor for.</param>
            <param name="propertyNames"><see langword="string">strings</see> to create a constructor for.</param>
            <param name="fields">Fields to fill in the constructor.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.GenerateToStringMethod(System.Reflection.Emit.TypeBuilder,System.String[],System.Reflection.Emit.FieldBuilder[])">
            <summary>
            Generate a ToString method.
            </summary>
            <param name="dynamicType">A <see cref="T:System.Reflection.Emit.TypeBuilder"/> to generate a ToString method for.</param>
            <param name="propertyNames">The names of the properties of the type.</param>
            <param name="fields">Fields to read in the ToString method.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.GenerateGetHashCodeMethod(System.Reflection.Emit.TypeBuilder,System.Collections.Generic.IEnumerable{System.Reflection.Emit.FieldBuilder})">
            <summary>
            Generates a GetHashCode method.
            </summary>
            <param name="dynamicType">A <see cref="T:System.Reflection.Emit.TypeBuilder"/> to generate a GetHashCode method for.</param>
            <param name="fields">Fields to read in the GetHashCode method.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.GenerateEqualsMethod(System.Reflection.Emit.TypeBuilder,System.Collections.Generic.IEnumerable{System.Reflection.Emit.FieldBuilder})">
            <summary>
            Generates a Equals method.
            </summary>
            <param name="dynamicType">A <see cref="T:System.Reflection.Emit.TypeBuilder"/> to generate a Equals method for.</param>
            <param name="fields">Fields to read in the GetHashCode method.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.GenerateProperty(System.Reflection.Emit.TypeBuilder,System.String,System.Reflection.Emit.FieldBuilder)">
            <summary>
            Generates a property.
            </summary>
            <param name="dynamicType">A <see cref="T:System.Reflection.Emit.TypeBuilder"/> to generate a property for.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="field">Field to access in the property.</param>
            <returns>Returns the created property.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.GenerateGetMethod(System.Reflection.Emit.TypeBuilder,System.Reflection.Emit.PropertyBuilder,System.Reflection.Emit.FieldBuilder)">
            <summary>
            Generates a Get method for a property.
            </summary>
            <param name="dynamicType">A <see cref="T:System.Reflection.Emit.TypeBuilder"/> to generate a Get method for.</param>
            <param name="property">Property to create a get method for.</param>
            <param name="field">Field to access in the method.</param>
            <returns>Returns the created method.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.GenerateClassAttributes(System.Reflection.Emit.TypeBuilder,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates attributes for a type.
            </summary>
            <param name="dynamicType">A <see cref="T:System.Reflection.Emit.TypeBuilder"/> to generate the attributes for.</param>
            <param name="propertyNames">Names of the properties.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.AddDebuggerHiddenAttribute(System.Reflection.Emit.MethodBuilder)">
            <summary>
            Adds a <see cref="T:System.Diagnostics.DebuggerHiddenAttribute"/> to a method.
            </summary>
            <param name="method">The method to add the attribute.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.AddDebuggerHiddenAttribute(System.Reflection.Emit.ConstructorBuilder)">
            <summary>
            Adds a <see cref="T:System.Diagnostics.DebuggerHiddenAttribute"/> to a constructor.
            </summary>
            <param name="constructor">The constructor to add the attribute.</param>
        </member>
        <member name="P:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.MetaProperties">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> with the properties of the type.
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.IsGeneric">
            <summary>
            Is allways <see langword="true"/>.
            <see cref="P:Zyan.InterLinq.Types.InterLinqType.IsGeneric"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.PropertyNames">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the names of all properties.
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.GenericClassParameterNames">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the names of all parameters.
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Types.Anonymous.AnonymousMetaType.FieldNames">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the names of all fields.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.IEntitySource">
            <summary>
            Interface required for the built-in Linq to entities support.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.IEntitySource.Get``1">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="T">Generic Argument of the returned <see cref="T:System.Linq.IQueryable`1"/>.</typeparam>
            <returns>Returns an <see cref="T:System.Linq.IQueryable`1"/>.</returns>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableNewExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.NewExpression"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableNewExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableNewExpression.#ctor(System.Linq.Expressions.NewExpression,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.NewExpression"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableNewExpression.Arguments">
            <summary>
            See <see cref="P:System.Linq.Expressions.NewExpression.Arguments"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableNewExpression.Members">
            <summary>
            See <see cref="P:System.Linq.Expressions.NewExpression.Members"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableNewExpression.Constructor">
            <summary>
            See <see cref="P:System.Linq.Expressions.NewExpression.Constructor"/>
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Communication.ServerQueryHandler">
            <summary>
            Server implementation of the <see cref="T:Zyan.InterLinq.IQueryRemoteHandler"/>.
            </summary>
            <seealso cref="T:Zyan.InterLinq.IQueryRemoteHandler"/>
        </member>
        <member name="M:Zyan.InterLinq.Communication.ServerQueryHandler.#ctor(Zyan.InterLinq.IQueryHandler)">
            <summary>
            Initializes this class.
            </summary>
            <param name="queryHandler"><see cref="T:Zyan.InterLinq.IQueryHandler"/> instance.</param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.ServerQueryHandler.Retrieve(Zyan.InterLinq.Expressions.SerializableExpression)">
            <summary>
            Retrieves data from the server by an <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            </summary>
            <remarks>
            This method's return type depends on the submitted 
            <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            Here some examples ('T' is the requested type):
            <list type="list">
                <listheader>
                    <term>Method</term>
                    <description>Return Type</description>
                </listheader>
                <item>
                    <term>Select(...)</term>
                    <description>T[]</description>
                </item>
                <item>
                    <term>First(...), Last(...)</term>
                    <description>T</description>
                </item>
                <item>
                    <term>Count(...)</term>
                    <description><see langword="int"/></description>
                </item>
                <item>
                    <term>Contains(...)</term>
                    <description><see langword="bool"/></description>
                </item>
            </list>
            </remarks>
            <param name="expression">
                <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">Expression</see> tree 
                containing selection and projection.
            </param>
            <returns>Returns requested data.</returns>
            <seealso cref="M:Zyan.InterLinq.IQueryRemoteHandler.Retrieve(Zyan.InterLinq.Expressions.SerializableExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Communication.ServerQueryHandler.RetrieveGeneric``1(Zyan.InterLinq.Expressions.SerializableExpression)">
            <summary>
            Retrieves data from the server by an <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            </summary>
            <typeparam name="T">Type of the <see cref="T:System.Linq.IQueryable"/>.</typeparam>
            <param name="serializableExpression">
                <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">Expression</see> tree 
                containing selection and projection.
            </param>
            <returns>Returns requested data.</returns>
            <seealso cref="M:Zyan.InterLinq.IQueryRemoteHandler.Retrieve(Zyan.InterLinq.Expressions.SerializableExpression)"/>
            <remarks>
            This method's return type depends on the submitted 
            <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            Here some examples ('T' is the requested type):
            <list type="list">
                <listheader>
                    <term>Method</term>
                    <description>Return Type</description>
                </listheader>
                <item>
                    <term>Select(...)</term>
                    <description>T[]</description>
                </item>
                <item>
                    <term>First(...), Last(...)</term>
                    <description>T</description>
                </item>
                <item>
                    <term>Count(...)</term>
                    <description><see langword="int"/></description>
                </item>
                <item>
                    <term>Contains(...)</term>
                    <description><see langword="bool"/></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:Zyan.InterLinq.Communication.ServerQueryHandler.RetrieveNonGenericObject(Zyan.InterLinq.Expressions.SerializableExpression)">
            <summary>
            Retrieves data from the server by an <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            </summary>
            <param name="serializableExpression">
                <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">Expression</see> tree 
                containing selection and projection.
            </param>
            <returns>Returns requested data.</returns>
            <remarks>
            This method's return type depends on the submitted 
            <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            Here some examples ('T' is the requested type):
            <list type="list">
                <listheader>
                    <term>Method</term>
                    <description>Return Type</description>
                </listheader>
                <item>
                    <term>Select(...)</term>
                    <description>T[]</description>
                </item>
                <item>
                    <term>First(...), Last(...)</term>
                    <description>T</description>
                </item>
                <item>
                    <term>Count(...)</term>
                    <description><see langword="int"/></description>
                </item>
                <item>
                    <term>Contains(...)</term>
                    <description><see langword="bool"/></description>
                </item>
            </list>
            </remarks>
            <seealso cref="M:Zyan.InterLinq.IQueryRemoteHandler.Retrieve(Zyan.InterLinq.Expressions.SerializableExpression)"/>
        </member>
        <member name="M:Zyan.InterLinq.Communication.ServerQueryHandler.HandleExceptionInRetrieve(System.Exception)">
            <summary>
            Handles an <see cref="T:System.Exception"/> occured in the 
            <see cref="M:Zyan.InterLinq.IQueryRemoteHandler.Retrieve(Zyan.InterLinq.Expressions.SerializableExpression)"/> Method.
            </summary>
            <param name="exception">
            Thrown <see cref="T:System.Exception"/> 
            in <see cref="M:Zyan.InterLinq.IQueryRemoteHandler.Retrieve(Zyan.InterLinq.Expressions.SerializableExpression)"/> Method.
            </param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.ServerQueryHandler.Dispose">
            <summary>
            Disposes the server instance.
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Communication.ServerQueryHandler.QueryHandler">
            <summary>
            Gets the <see cref="T:Zyan.InterLinq.IQueryHandler"/>.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.TransactionStarter`1">
            <summary>
            Stellt sicher, dass die durchlaufende Nachricht innerhalb einer Transaktion verarbeitet wird.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.TransactionStarter`1.#ctor">
            <summary>
            Erzeugt eine neue Instanz von TransactionStarter.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.TransactionStarter`1.#ctor(System.Transactions.IsolationLevel,System.Transactions.TransactionScopeOption,System.TimeSpan)">
            <summary>
            Erzeugt eine neue Instanz von TransactionStarter
            </summary>
            <param name="isolationLevel">Isolationsstufe</param>
            <param name="scopeOption">bereichsoption</param>
            <param name="timeout">Ablaufzeitspanne</param>
        </member>
        <member name="M:Zyan.Communication.Toolbox.TransactionStarter`1.In(`0)">
            <summary>
            Eingangs-Pin.
            </summary>
            <param name="message">Nachricht</param>
        </member>
        <member name="F:Zyan.Communication.Toolbox.TransactionStarter`1.Out">
            <summary>
            Ausgangs-Pin.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Toolbox.TransactionStarter`1.Out_TransactionAborted">
            <summary>
            Ausgangs-Pin, bei Transaktionsabbruch.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.TransactionStarter`1.WireUp(System.Action{`0})">
            <summary>
            Erstellt eine neue Instanz und verdrahtet damit zwei Pins.
            </summary>
            <param name="inputPin">Eingangs-Pin</param>
            <returns>Ausgangs-Pin</returns>
        </member>
        <member name="P:Zyan.Communication.Toolbox.TransactionStarter`1.IsolationLevel">
            <summary>
            Gibt die Isolationsstufe der Transaktion zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Toolbox.TransactionStarter`1.Timeout">
            <summary>
            Gibt die Ablaufzeitspanne zurück oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Toolbox.TransactionStarter`1.ScopeOption">
            <summary>
            Gibt die Bereichsoption zurück oder legt sie fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ZyanDispatcher">
            <summary>
            Central dispatch component for RPC requests.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.#ctor(Zyan.Communication.ZyanComponentHost)">
            <summary>
            Creates a new instance of the ZyanDispatcher class.
            </summary>
            <param name="host">Component host</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.CreateClientServerWires(System.Type,System.Object,System.Collections.Generic.List{Zyan.Communication.Delegates.DelegateCorrelationInfo},System.Collections.Generic.Dictionary{System.Guid,System.Delegate})">
            <summary>
            Creates wires between client component and server component.
            </summary>
            <param name="type">Implementation type of the server component</param>
            <param name="instance">Instance of the server component</param>
            <param name="delegateCorrelationSet">Correlation set (say how to wire)</param>
            <param name="wiringList">Collection of built wires</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.RemoveClientServerWires(System.Type,System.Object,System.Collections.Generic.List{Zyan.Communication.Delegates.DelegateCorrelationInfo},System.Collections.Generic.Dictionary{System.Guid,System.Delegate})">
            <summary>
            Removes wires between server and client components (as defined in correlation set).
            </summary>
            <param name="type">Type of the server component</param>
            <param name="instance">Instance of the server component</param>
            <param name="delegateCorrelationSet">Correlation set with wiring information</param>
            <param name="wiringList">List with known wirings</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.ProcessBeforeInvoke(Zyan.Communication.InvocationDetails)">
            <summary>
            Processes BeforeInvoke event subscriptions (if there any).
            </summary>
            <param name="details">Invocation details</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.ProcessAfterInvoke(Zyan.Communication.InvocationDetails)">
            <summary>
            Processes AfterInvoke event subscriptions (if there any).
            </summary>
            <param name="details">Invocation details</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.GetCallingClientIPAddress">
            <summary>
            Gets the IP Address of the calling client from CallContext.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.PutClientAddressToCurrentSession">
            <summary>
            Puts the IP Address of the calling client to the current Server Session.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Invoke_CheckInterfaceName(Zyan.Communication.InvocationDetails)">
            <summary>
            Checks if the provided interface name belongs to a registered component.
            </summary>
            <param name="details">Invocation details</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Invoke_LoadCallContextData(Zyan.Communication.InvocationDetails)">
            <summary>
            Loads data from the logical call context.
            </summary>
            <param name="details">Invocation details</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Invoke_SetSession(Zyan.Communication.InvocationDetails)">
            <summary>
            Sets the session for the current worker thread.
            </summary>
            <param name="details">Invocation details</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Invoke_SetTransaction(Zyan.Communication.InvocationDetails)">
            <summary>
            Sets a transaction for the current worker thread, if provied.
            </summary>
            <param name="details">Invocation details</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Invoke_FireInvokeCanceledEvent(Zyan.Communication.InvocationDetails,System.Exception)">
            <summary>
            Fires the InvokeCanceled event.
            </summary>
            <param name="details">Invocation details</param>
            <param name="ex">Exception</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Invoke_FireInvokeRejectedEvent(Zyan.Communication.InvocationDetails,System.Exception)">
            <summary>
            Fires the InvokeRejected event.
            </summary>
            <param name="details">Invocation details</param>
            <param name="ex">Exception</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Invoke_ConvertMethodArguments(Zyan.Communication.InvocationDetails)">
            <summary>
            Converts method arguments, if needed.
            <remarks>
            Conversion is needed when Types configured for custom serialization or arguments are delegates.
            </remarks>
            </summary>
            <param name="details">Invocation details</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Invoke_ResolveComponentInstance(Zyan.Communication.InvocationDetails)">
            <summary>
            Resolves the component instance to be invoked.
            </summary>
            <param name="details">Invocation details</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Invoke_WireUpEventHandlers(Zyan.Communication.InvocationDetails)">
            <summary>
            Wires up event handlers.
            </summary>
            <param name="details">Invocation details</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Invoke_ObtainMethodMetadata(Zyan.Communication.InvocationDetails)">
            <summary>
            Obtains metadata of the invoked method via reflection.
            </summary>
            <param name="details">Invocation details</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Invoke_InterceptDelegateParams(Zyan.Communication.InvocationDetails)">
            <summary>
            Intercepts delegate parameters.
            </summary>
            <param name="details">Invocation details</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Invoke_ApplyCustomSerializationOnReturnValue(Zyan.Communication.InvocationDetails)">
            <summary>
            Applies custom serialization on return value (if configured).
            </summary>
            <param name="details">Invocation details</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Invoke_CompleteTransactionScope(Zyan.Communication.InvocationDetails)">
            <summary>
            Completes the transaction scope, if no exception occured.
            </summary>
            <param name="details">Invocation details</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Invoke_CleanUp(Zyan.Communication.InvocationDetails)">
            <summary>
            Cleans up event handlers and component instance (if needed).
            </summary>
            <param name="details">Invocation details</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Invoke(System.Guid,System.String,System.Collections.Generic.List{Zyan.Communication.Delegates.DelegateCorrelationInfo},System.String,System.Type[],System.Type[],System.Object[])">
            <summary>
            Processes remote method invocation.
            </summary>
            <param name="trackingID">Key for call tracking</param>
            <param name="interfaceName">Name of the component interface</param>
            <param name="delegateCorrelationSet">Correlation set for dynamic event and delegate wiring</param>
            <param name="methodName">Name of the invoked method</param>
            <param name="genericArguments">Generic arguments of the invoked method</param>
            <param name="paramTypes">Parameter types</param>
            <param name="args">Parameter values</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.AddEventHandler(System.String,Zyan.Communication.Delegates.DelegateCorrelationInfo,System.String)">
            <summary>
            Adds a handler to an event of a server component.
            </summary>
            <param name="interfaceName">Name of the server component interface</param>
            <param name="correlation">Correlation information</param>
            <param name="uniqueName">Unique name of the server component instance (May left empty, if component isn´t registered with a unique name)</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.RemoveEventHandler(System.String,Zyan.Communication.Delegates.DelegateCorrelationInfo,System.String)">
            <summary>
            Removes a handler from an event of a server component.
            </summary>
            <param name="interfaceName">Name of the server component interface</param>
            <param name="correlation">Correlation information</param>
            <param name="uniqueName">Unique name of the server component instance (May left empty, if component isn´t registered with a unique name)</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.GetRegisteredComponents">
            <summary>
            Returns an array with metadata about all registered components.
            </summary>
            <returns>Array with registered component metadata</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Logon(System.Guid,System.Collections.Hashtable)">
            <summary>
            Processes logon.
            </summary>
            <param name="sessionID">Unique session key (created on client side)</param>
            <param name="credentials">Logon credentials</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.ExistSession(System.Guid)">
            <summary>
            Returns true, if a specified Session ID is valid, otherwis false.
            </summary>
            <param name="sessionID">Session ID to check</param>
            <returns>Session check result</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Logoff(System.Guid)">
            <summary>
            Process logoff.
            </summary>
            <param name="sessionID">Unique session key</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Subscribe(System.String,System.EventHandler{Zyan.Communication.Notification.NotificationEventArgs})">
            <summary>
            Subscribe to a specified NotificationService event.
            </summary>
            <param name="eventName">Event name</param>
            <param name="handler">Delegate to client side event handler</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Unsubscribe(System.String,System.EventHandler{Zyan.Communication.Notification.NotificationEventArgs})">
            <summary>
            Unsubscribe from a specified NotificationService event.
            </summary>
            <param name="eventName">Event name</param>
            <param name="handler">Delegate to client side event handler</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.RenewSession">
            <summary>
            Extends the lifetime of the current session and returs the current session age limit.
            </summary>
            <returns>Session age limit (in minutes)</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.InitializeLifetimeService">
            <summary>
            Initializes the .NET Remoting limetime service of this object.
            </summary>
            <returns>Lease</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.OnClientHeartbeatReceived(Zyan.Communication.ClientHeartbeatEventArgs)">
            <summary>
            Fires the ClientHeartbeatReceived event.
            <remarks>
            Event is fired in a different thread to avoid blocking the client.
            </remarks>
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.ReceiveClientHeartbeat(System.Guid)">
            <summary>
            Called from client to send a heartbeat signal.
            </summary>
            <param name="sessionID">Client´s session key</param>
        </member>
        <member name="P:Zyan.Communication.ZyanDispatcher.SessionAgeLimit">
            <summary>
            Gets the maximum sesseion age (in minutes).
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanDispatcher.ClientHeartbeatReceived">
            <summary>
            Event: Occours when a heartbeat signal is received from a client.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ZyanConnection">
            <summary>
            Maintains a connection to a Zyan component host.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.#ctor(Zyan.Communication.ZyanConnectionSetup)">
            <summary>
            Creates a new instance of the ZyanConnection class.
            </summary>
            <param name="setup">Objekt mit Konfigurationseinstellungen für die Verbindung</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.#ctor(System.String)">
            <summary>
            Creates a new instance of the ZyanConnection class.
            </summary>
            <param name="serverUrl">URL of remote server (e.G. "tcp://server1:46123/myapp")</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the ZyanConnection class.
            </summary>
            <param name="serverUrl">URL of remote server (e.G. "tcp://server1:46123/myapp")</param>
            <param name="autoLoginOnExpiredSession">Specifies whether the proxy should relogin automatically when the session expired</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.#ctor(System.String,Zyan.Communication.Protocols.IClientProtocolSetup)">
            <summary>
            Creates a new instance of the ZyanConnection class.
            </summary>
            <param name="serverUrl">URL of remote server (e.G. "tcp://server1:46123/myapp")</param>
            <param name="protocolSetup">Protocol an communication settings</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.#ctor(System.String,Zyan.Communication.Protocols.IClientProtocolSetup,System.Boolean)">
            <summary>
            Creates a new instance of the ZyanConnection class.
            </summary>
            <param name="serverUrl">URL of remote server (e.G. "tcp://server1:46123/myapp")</param>
            <param name="protocolSetup">Protocol an communication settings</param>
            <param name="autoLoginOnExpiredSession">Specifies whether the proxy should relogin automatically when the session expired</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.#ctor(System.String,Zyan.Communication.Protocols.IClientProtocolSetup,System.Collections.Hashtable,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the ZyanConnection class.
            </summary>
            <param name="serverUrl">URL of remote server (e.G. "tcp://server1:46123/myapp")</param>
            <param name="protocolSetup">Protocol an communication settings</param>
            <param name="credentials">Login credentials</param>
            <param name="autoLoginOnExpiredSession">Specifies whether the proxy should relogin automatically when the session expired</param>
            <param name="keepSessionAlive">Specifies whether the session should be automaticly kept alive</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.PrepareCallContext(System.Boolean)">
            <summary>
            Prepares the .NET Remoting call context before a remote call.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.StartKeepSessionAliveTimer">
            <summary>
            Starts the session keep alive timer.
            <remarks>
            If the timer runs already, it will be restarted with current settings.
            </remarks>
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.KeepSessionAlive(System.Object)">
            <summary>
            Will be called from session keep alive timer on ervery interval.
            </summary>
            <param name="state">State (not used)</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.CreateProxy``1">
            <summary>
            Creates a local proxy object of a specified remote component.
            </summary>
            <typeparam name="T">Remote component interface type</typeparam>
            <returns>Proxy</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.CreateProxy``1(System.String)">
            <summary>
            Creates a local proxy object of a specified remote component.
            </summary>
            <typeparam name="T">Remote component interface type</typeparam>
            <param name="uniqueName">Unique component name</param>
            <returns>Proxy</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.CreateProxy``1(System.Boolean)">
            <summary>
            Creates a local proxy object of a specified remote component.
            </summary>
            <typeparam name="T">Remote component interface type</typeparam>
            <param name="implicitTransactionTransfer">Specify whether transactions (System.Transactions) should be transferred to remote component automaticly</param>
            <returns>Proxy</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.CreateProxy``1(System.String,System.Boolean)">
            <summary>
            Creates a local proxy object of a specified remote component.
            </summary>
            <typeparam name="T">Remote component interface type</typeparam>
            <param name="uniqueName">Unique component name</param>
            <param name="implicitTransactionTransfer">Specify whether transactions (System.Transactions) should be transferred to remote component automaticly</param>
            <returns>Proxy</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.RegisterStandardSerializationHandlers">
            <summary>
            Registeres standard serialization handlers.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.OnBeforeInvoke(Zyan.Communication.BeforeInvokeEventArgs)">
            <summary>
            Fires the BeforeInvoke event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.OnAfterInvoke(Zyan.Communication.AfterInvokeEventArgs)">
            <summary>
            Fires the AfterInvoke event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.OnInvokeCanceled(Zyan.Communication.InvokeCanceledEventArgs)">
            <summary>
            Fires the InvokeCanceled event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.SubscribeEvent(System.String,System.EventHandler{Zyan.Communication.Notification.NotificationEventArgs})">
            <summary>
            Subscribes for receiving notifications of a specified event.
            </summary>
            <param name="eventName">Event name</param>
            <param name="handler">Client side event handler</param>
            <returns>Unique subscription ID</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.UnsubscribeEvent(System.Guid)">
            <summary>
            Unsubscribe for receiving notifications of a specified event.
            </summary>
            <param name="subscriptionID">Unique subscription ID</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.OnError(Zyan.Communication.ZyanErrorEventArgs)">
            <summary>
            Fires the Error event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.Dispose">
            <summary>
            Release managed resources.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.Finalize">
            <summary>
            Called from CLR when the object is finalized.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.OnDisconnected(Zyan.Communication.DisconnectedEventArgs)">
            <summary>
            Fires the Disconnected event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.OnNewLogonNeeded(Zyan.Communication.NewLogonNeededEventArgs)">
            <summary>
            Fires the NewLogonNeeded event.
            </summary>
            <param name="e">Event arguments</param>
            <returns>True, if the event is handled, otherwis false</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.StartPollingTimer">
            <summary>
            Starts the polling timer.
            <remarks>
            If the timer runs already, it will be restarted with current settings.
            </remarks>
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.SendHeartbeat(System.Object)">
            <summary>
            Will be called from polling timer on ervery interval.
            </summary>
            <param name="state">State (not used)</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.Reconnect">
            <summary>
            Reestablish connection to server.
            </summary>
            <remarks>
            This method checks if the session is valid. If not, a new logon in perfomed automatically.
            Handle the NewLogonNeeded event to provide credentials.
            </remarks>
            <returns>True, if reconnecting was successfull, otherwis false </returns>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.InternalReconnect">
            <summary>
            Reestablish connection to server.
            </summary>
            <remarks>
            This method checks if the session is valid. If not, a new logon in perfomed automatically.
            Handle the NewLogonNeeded event to provide credentials.
            </remarks>
            <returns>True, if reconnecting was successfull, otherwis false </returns>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.ReconnectRemoteEvents">
            <summary>
            Reconnects to all remote events or delegates of any know proxy for this connection, after a server restart.
            <remarks>
            Caution! This method does not check, if the event handler registrations are truly lost (caused by a server restart).
            </remarks>
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.ServerUrl">
            <summary>
            Gets the URL of the remote server.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.ComponentHostName">
            <summary>
            Gets the name of the remote component host.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.SessionID">
            <summary>
            Gets the session ID.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.RemoteDispatcher">
            <summary>
            Gets a proxy to access the remote dispatcher.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.SerializationHandling">
            <summary>
            Returns the repository of serialization handlers.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanConnection.BeforeInvoke">
            <summary>
            Event: Before a remote call is invoked.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanConnection.AfterInvoke">
            <summary>
            Event: After a remote call is invoked.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanConnection.InvokeCanceled">
            <summary>
            Event: When a remote call is canceled.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.CallInterceptionEnabled">
            <summary>
            Gets whether registered call interceptors should be processed.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.CallInterceptors">
            <summary>
            Returns a collection of registred call interceptors.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanConnection.Error">
            <summary>
            Event: Occures when a error is detected.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.ErrorHandlingEnabled">
            <summary>
            Gets if errors should be handled or not.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.Connections">
            <summary>
            Gets a list of all known Zyan connections in the current Application Domain.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanConnection.Disconnected">
            <summary>
            Event: Fired when disconnected.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanConnection.NewLogonNeeded">
            <summary>
            Event: Fired when a new logon is needed, after a detected diconnection.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.PollingEnabled">
            <summary>
            Gets whether polling is enabled.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.PollingInterval">
            <summary>
            Gets or sets the polling interval.
            <remarks>
            Default is 1 minute.
            </remarks>
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.IsSessionValid">
            <summary>
            Gets true, if the session on server is valid, otherwise false.
            </summary>
        </member>
        <member name="T:Zyan.Communication.CustomSerializationContainer">
            <summary>
            Container für Objekte die mit benutzerdefinierter Serialisierung verarbeitet werden.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CustomSerializationContainer.#ctor">
            <summary>
            Erstellt eine neue Instanz der CustomSerializationContainer-Klasse.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CustomSerializationContainer.#ctor(System.Type,System.Type,System.Byte[])">
            <summary>
            Erstellt eine neue Instanz der CustomSerializationContainer-Klasse.
            </summary>
            <param name="handledType">Behandelter Typ</param>
            <param name="dataType">Tatsächlicher der Daten</param>
            <param name="data">Rohdaten</param>
        </member>
        <member name="P:Zyan.Communication.CustomSerializationContainer.HandledType">
            <summary>
            Gibt den behandelten Typ zurück, oder legt ih nfest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CustomSerializationContainer.DataType">
            <summary>
            Gibt den tatsächlichen Typ der Daten zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CustomSerializationContainer.Data">
            <summary>
            Gibt die Rohdaten zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.TransportHeaderWrapper">
            <summary>
            Helper class for TransportHeaders serialization (TransportHeaders binary
            serialization format is not compatible between .NET and Mono Framework).
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Types.Anonymous.AnonymousProperty">
            <summary>
            Represents an instance of an <see cref="T:Zyan.InterLinq.Types.Anonymous.AnonymousMetaProperty"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousProperty.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousProperty.#ctor(System.String,System.Object)">
            <summary>
            Instance a new instance of the class <see cref="T:Zyan.InterLinq.Types.Anonymous.AnonymousProperty"/> and initialize it.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousProperty.ToString">
            <summary>
            Returns a <see langword="string"/> representing this object.
            </summary>
            <returns>Returns a <see langword="string"/> representing this object.</returns>
        </member>
        <member name="P:Zyan.InterLinq.Types.Anonymous.AnonymousProperty.Name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Types.Anonymous.AnonymousProperty.Value">
            <summary>
            The value of the property.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Types.Anonymous.AnonymousMetaProperty">
            <summary>
            Class that represents a property of an anonymous type.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaProperty.#ctor">
            <summary>
            Default constructor for serialization
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaProperty.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Instance an instance of the class <see cref="T:Zyan.InterLinq.Types.Anonymous.AnonymousMetaProperty"/> with a <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="property"><see cref="T:System.Reflection.PropertyInfo"/> to create a <see cref="T:Zyan.InterLinq.Types.Anonymous.AnonymousMetaProperty"/> from.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaProperty.Equals(System.Object)">
            <summary>
            Overrides the equality check.
            </summary>
            <param name="obj">Object to compare with.</param>
            <returns>True, if the other <see langword="object"/> is equal to this. False, if not.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousMetaProperty.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see langword="object"/>.</returns>
        </member>
        <member name="P:Zyan.InterLinq.Types.Anonymous.AnonymousMetaProperty.PropertyType">
            <summary>
            The <see cref="T:Zyan.InterLinq.Types.InterLinqType"/> of the property.
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Types.Anonymous.AnonymousMetaProperty.Name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableExpressionTyped">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.LambdaExpression"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableExpressionTyped.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableExpressionTyped.#ctor(System.Linq.Expressions.LambdaExpression,System.Type,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.LambdaExpression"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="delegateType"><see cref="T:System.Type"/> of the delegate.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="T:Zyan.InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractSerializerOperationBehavior">
            <summary>
            Represents the run-time behavior of the <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractSerializerOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior"/>
            class with the specified operation.
            </summary>
            <param name="operationDescription">An <see cref="T:System.ServiceModel.Description.OperationDescription"/> that represents the operation.</param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractSerializerOperationBehavior.CreateSerializer(System.Type,System.String,System.String,System.Collections.Generic.IList{System.Type})">
            <summary>
            Creates an instance of a class that inherits from <see cref="T:System.Runtime.Serialization.XmlObjectSerializer"/> 
            for serialization and deserialization operations.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to create the serializer for.</param>
            <param name="name">The name of the generated <see cref="T:System.Type"/>.</param>
            <param name="ns">The namespace of the generated <see cref="T:System.Type"/>.</param>
            <param name="knownTypes">An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Type"/> that contains known types.</param>
            <returns>An instance of a class that inherits from the <see cref="T:System.Runtime.Serialization.XmlObjectSerializer"/> class.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractSerializerOperationBehavior.CreateSerializer(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IList{System.Type})">
            <summary>
            Creates an instance of a class that inherits from <see cref="T:System.Runtime.Serialization.XmlObjectSerializer"/>
            for serialization and deserialization operations with an <see cref="T:System.Xml.XmlDictionaryString"/>
            that contains the namespace.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to create the serializer for.</param>
            <param name="name">The name of the generated <see cref="T:System.Type"/>.</param>
            <param name="ns">An <see cref="T:System.Xml.XmlDictionaryString"/> that contains the namespace of the serialized <see cref="T:System.Type"/>.</param>
            <param name="knownTypes">An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Type"/> that contains known types.</param>
            <returns>An instance of a class that inherits from the <see cref="T:System.Runtime.Serialization.XmlObjectSerializer"/> class.</returns>
        </member>
        <member name="T:Zyan.InterLinq.Communication.Wcf.ClientQueryWcfHandler">
            <summary>
            Client handler class managing the connection 
            via WCF to the InterLINQ Server.
            </summary>
            <seealso cref="T:Zyan.InterLinq.Communication.ClientQueryHandler"/>
            <seealso cref="T:Zyan.InterLinq.InterLinqQueryHandler"/>
            <seealso cref="T:Zyan.InterLinq.IQueryHandler"/>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.ClientQueryWcfHandler.Connect">
            <summary>
            Connects to the server.
            <see cref="T:Zyan.InterLinq.InterLinqQueryHandler"/>
            </summary>
            <seealso cref="M:Zyan.InterLinq.Communication.ClientQueryHandler.Connect"/>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.ClientQueryWcfHandler.Connect(System.String)">
            <summary>
            Connects to the Server using the settings in your App.config.
            </summary>
            <param name="endpointConfigurationName">The name of the client endpoint in App.config</param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.ClientQueryWcfHandler.Connect(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            Connects to the server.
            </summary>
            <param name="binding">Predefined <see cref="T:System.ServiceModel.Channels.Binding"/>.</param>
            <param name="endpointAddress"><see cref="T:System.ServiceModel.EndpointAddress"/> of the server.</param>
        </member>
        <member name="T:Zyan.Communication.CallInterceptionDelegate">
            <summary>
            Delegat für benutzerdefinierte Aufrufabfanglogik.
            </summary>
            <param name="action">Aufrufabfang-Aktion</param>
        </member>
        <member name="T:Zyan.Communication.CallInterceptor">
            <summary>
            Allgemeine Implementierung einer Aufrufabfangvorrichtung.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptor.#ctor(System.Type,System.String,System.Reflection.MemberTypes,System.String,System.Type[],Zyan.Communication.CallInterceptionDelegate)">
            <summary>
            Erzeugt eine neue Instanz der CallInterceptor-Klasse.
            </summary>
            <param name="interfaceType">Schnittstellentyp der Komponente, deren Aufrufe abgefangen werden sollen</param>
            <param name="uniqueName">Unique name of the intercepted component.</param>
            <param name="memberType">Art des Members, dessen Aufrufe abgefangen werden sollen</param>
            <param name="memberName">Name des Members, dessen Aufrufe abgefangen werden sollen</param>
            <param name="parameterTypes">Array mit den Typen der Parameter des abzufangenden Members</param>
            <param name="onInterception">Delegat, der beim Abfangen aufgerufen wird</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptor.#ctor(System.Type,System.Reflection.MemberTypes,System.String,System.Type[],Zyan.Communication.CallInterceptionDelegate)">
            <summary>
            Erzeugt eine neue Instanz der CallInterceptor-Klasse.
            </summary>
            <param name="interfaceType">Schnittstellentyp der Komponente, deren Aufrufe abgefangen werden sollen</param>
            <param name="memberType">Art des Members, dessen Aufrufe abgefangen werden sollen</param>
            <param name="memberName">Name des Members, dessen Aufrufe abgefangen werden sollen</param>
            <param name="parameterTypes">Array mit den Typen der Parameter des abzufangenden Members</param>
            <param name="onInterception">Delegat, der beim Abfangen aufgerufen wird</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptor.PauseInterception">
            <summary>
            Pauses call interception for the current thread.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptor.For``1">
            <summary>
            Returns strong-typed call interceptor builder for the component with the specified interface.
            </summary>
            <typeparam name="TInterface">Component interface.</typeparam>
        </member>
        <member name="M:Zyan.Communication.CallInterceptor.For``1(System.String)">
            <summary>
            Returns strong-typed call interceptor builder for the component with the specified interface.
            </summary>
            <typeparam name="TInterface">Component interface.</typeparam>
            <param name="uniqueName">Unique name of the component.</param>
        </member>
        <member name="P:Zyan.Communication.CallInterceptor.InterfaceType">
            <summary>
            Gibt die Schnittstelle der Komponenten zurück, deren Aufruf abgefangen werden soll, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CallInterceptor.UniqueName">
            <summary>
            Gets the unique name of intercepted component.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CallInterceptor.MemberType">
            <summary>
            Gibt die Art des abzufangenden Members zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CallInterceptor.MemberName">
            <summary>
            Gibt den Namen der abzufangenden Methode zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CallInterceptor.ParameterTypes">
            <summary>
            Gibt ein Array der als Parameter erwarteten Typen der aubzufangenden Methode zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CallInterceptor.OnInterception">
            <summary>
            Gibt den Delegaten zurück, der beim Abfangen des Aufrufs anstelle dessen aufgerufen wird, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CallInterceptor.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Zyan.Communication.CallInterceptor"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Zyan.Communication.CallInterceptor.IsPaused">
            <summary>
            Gets or sets a value indicating whether call interception is paused for the current thread.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Compression.NonCompressibleAttribute">
            <summary>
            Marks the class as an exempt from compression.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Compression.CompressionServerChannelSinkProvider">
            <summary>
            Server channel compression sink provider. Creates <see cref="T:Zyan.Communication.ChannelSinks.Compression.CompressionServerChannelSink"/> for the server sink chain.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Compression.CompressionServerChannelSinkProvider.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.ChannelSinks.Compression.CompressionServerChannelSinkProvider"/> class.
            </summary>
            <param name="compressionThreshold">The compression threshold.</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Compression.CompressionServerChannelSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.ChannelSinks.Compression.CompressionServerChannelSinkProvider"/> class.
            </summary>
            <param name="properties">Compression sink properties.</param>
            <param name="providerData">The provider data (ignored).</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Compression.CompressionServerChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelReceiver)">
            <summary>
            Creates a sink chain.
            </summary>
            <param name="channel">The channel for which to create the channel sink chain.</param>
            <returns>
            The first sink of the newly formed channel sink chain, or null, which indicates that this provider will not or cannot provide a connection for this endpoint.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Compression.CompressionServerChannelSinkProvider.GetChannelData(System.Runtime.Remoting.Channels.IChannelDataStore)">
            <summary>
            Returns the channel data for the channel that the current sink is associated with. Compression sink doesn't have any specific data.
            </summary>
            <param name="channelData">A <see cref="T:System.Runtime.Remoting.Channels.IChannelDataStore"/> object in which the channel data is to be returned.</param>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Compression.CompressionServerChannelSinkProvider.Next">
            <summary>
            Gets or sets the next sink provider in the channel sink provider chain.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Compression.CompressionClientChannelSinkProvider">
            <summary>
            Client channel compression sink provider. Creates <see cref="T:Zyan.Communication.ChannelSinks.Compression.CompressionClientChannelSink"/> for the client sink chain.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Compression.CompressionClientChannelSinkProvider.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.ChannelSinks.Compression.CompressionClientChannelSinkProvider"/> class.
            </summary>
            <param name="compressionThreshold">The compression threshold.</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Compression.CompressionClientChannelSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.ChannelSinks.Compression.CompressionClientChannelSinkProvider"/> class.
            </summary>
            <param name="properties">Sink properties.</param>
            <param name="contextData">The context data (ignored).</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Compression.CompressionClientChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelSender,System.String,System.Object)">
            <summary>
            Creates a sink chain.
            </summary>
            <param name="channel">Channel for which the current sink chain is being constructed.</param>
            <param name="url">The URL of the object to connect to. This parameter can be null if the connection is based entirely on the information contained in the <paramref name="remoteChannelData"/> parameter.</param>
            <param name="remoteChannelData">A channel data object that describes a channel on the remote server.</param>
            <returns>
            The first sink of the newly formed channel sink chain, or null, which indicates that this provider will not or cannot provide a connection for this endpoint.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Compression.CompressionClientChannelSinkProvider.Next">
            <summary>
            Gets or sets the next sink provider in the channel sink provider chain.
            </summary>
        </member>
        <member name="T:Zyan.Communication.InvalidSessionException">
            <summary>
            Ausnahme, die geworfen wird, wenn die Sitzung ungültig oder aufgelaufen ist.
            </summary>
        </member>
        <member name="M:Zyan.Communication.InvalidSessionException.#ctor">
            <summary>
            Erstellt eine neue Instanz von InvalidSessionException.
            </summary>
        </member>
        <member name="M:Zyan.Communication.InvalidSessionException.#ctor(System.String)">
            <summary>
            Erstellt eine neue Instanz von InvalidSessionException.
            </summary>
            <param name="message">Fehlermeldung</param>
        </member>
        <member name="M:Zyan.Communication.InvalidSessionException.#ctor(System.String,System.Exception)">
            <summary>
            Erstellt eine neue Instanz von InvalidSessionException.
            </summary>
            <param name="message">Fehlermeldung</param>
            <param name="innerException">Ausnahme, welche diese Ausnahme verursacht hat</param>
        </member>
        <member name="M:Zyan.Communication.InvalidSessionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Erstellt eine neue Instanz von InvalidSessionException.
            </summary>
            <param name="info">Serialisierungsinformationen</param>
            <param name="context">Streaming-Kontext der Serialisierung</param>
        </member>
        <member name="M:Zyan.Communication.InvalidSessionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gibt Objektdaten für die Serialisierung zurück.
            </summary>
            <param name="info">Serialisierungsinformationen</param>
            <param name="context">Streaming-Kontext der Serialisierung</param>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableBinaryExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.BinaryExpression"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableBinaryExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableBinaryExpression.#ctor(System.Linq.Expressions.BinaryExpression,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.BinaryExpression"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableBinaryExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableBinaryExpression.GetOperator">
            <summary>
            Gets the operator as string.
            </summary>
            <returns>Returns the operator as a string.</returns>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableBinaryExpression.Left">
            <summary>
            See <see cref="P:System.Linq.Expressions.BinaryExpression.Left"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableBinaryExpression.Right">
            <summary>
            See <see cref="P:System.Linq.Expressions.BinaryExpression.Right"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableBinaryExpression.Conversion">
            <summary>
            See <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableBinaryExpression.Method">
            <summary>
            See <see cref="P:System.Linq.Expressions.BinaryExpression.Method"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableBinaryExpression.IsLiftedToNull">
            <summary>
            See <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"/>
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor">
            <summary>
            This is a basic visitor for serializable expressions.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.#ctor(Zyan.InterLinq.Expressions.SerializableExpression)">
            <summary>
            Initializes this class.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/> to convert.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.Visit">
            <summary>
            Visits the <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/> tree to convert and
            returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.Visit(Zyan.InterLinq.Expressions.SerializableExpression)">
            <summary>
            Returns an <see cref="T:System.Linq.Expressions.Expression"/> by visiting and converting <paramref name="expression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/> to visit.</param>
            <returns>Returns an <see cref="T:System.Linq.Expressions.Expression"/> by visiting and converting <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitCollection``1(System.Collections.IEnumerable)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/>. Each element in <paramref name="enumerable"/>
            will be visited by calling Visit&lt;T&gt;.
            </summary>
            <typeparam name="T">Generic argument of the returned <see cref="T:System.Collections.IEnumerable"/>.</typeparam>
            <param name="enumerable"><see cref="T:System.Collections.Generic.IEnumerable`1"/> to visit.</param>
            <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitObject``1(System.Object)">
            <summary>
            Returns the value of the <see langword="object"/>.
            </summary>
            <typeparam name="T">Return <see cref="T:System.Type"/>.</typeparam>
            <param name="otherObject"><see langword="object"/> to visit.</param>
            <returns>Returns the value of the <see langword="object"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitObjectCollection``1(System.Collections.IEnumerable)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/>. Each element in <paramref name="enumerable"/>
            will be visited by calling <see cref="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitObject``1(System.Object)"/>.
            </summary>
            <typeparam name="T">Generic argument of the returned <see cref="T:System.Collections.IEnumerable"/>.</typeparam>
            <param name="enumerable"><see cref="T:System.Collections.Generic.IEnumerable`1"/> to visit.</param>
            <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitResult(Zyan.InterLinq.Expressions.SerializableExpression)">
            <summary>
            Returns the value of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression"/> to visit.</param>
            <returns>Returns the value of the <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableBinaryExpression(Zyan.InterLinq.Expressions.SerializableBinaryExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableBinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableBinaryExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableConditionalExpression(Zyan.InterLinq.Expressions.SerializableConditionalExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableConditionalExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableConditionalExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableConstantExpression(Zyan.InterLinq.Expressions.SerializableConstantExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableConstantExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableConstantExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableInvocationExpression(Zyan.InterLinq.Expressions.SerializableInvocationExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableInvocationExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableInvocationExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableExpressionTyped``1(Zyan.InterLinq.Expressions.SerializableExpressionTyped)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableExpressionTyped"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableExpressionTyped"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableLambdaExpression(Zyan.InterLinq.Expressions.SerializableLambdaExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableLambdaExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableLambdaExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableListInitExpression(Zyan.InterLinq.Expressions.SerializableListInitExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableListInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableListInitExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableMemberExpression(Zyan.InterLinq.Expressions.SerializableMemberExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableMemberExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableMemberExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableMemberInitExpression(Zyan.InterLinq.Expressions.SerializableMemberInitExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableMemberInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableMemberInitExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableMethodCallExpression(Zyan.InterLinq.Expressions.SerializableMethodCallExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableMethodCallExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableMethodCallExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableNewArrayExpression(Zyan.InterLinq.Expressions.SerializableNewArrayExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableNewArrayExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableNewArrayExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableNewExpression(Zyan.InterLinq.Expressions.SerializableNewExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableNewExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableNewExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableParameterExpression(Zyan.InterLinq.Expressions.SerializableParameterExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableParameterExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableParameterExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableTypeBinaryExpression(Zyan.InterLinq.Expressions.SerializableTypeBinaryExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableTypeBinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableTypeBinaryExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableUnaryExpression(Zyan.InterLinq.Expressions.SerializableUnaryExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableUnaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableUnaryExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitUnknownSerializableExpression(Zyan.InterLinq.Expressions.SerializableExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableElementInit(Zyan.InterLinq.Expressions.SerializableTypes.SerializableElementInit)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableElementInit"/>.
            </summary>
            <param name="elementInit"><see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableElementInit"/> to visit.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableMemberAssignment(Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment"/>.
            </summary>
            <param name="memberAssignment"><see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment"/> to visit.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableMemberListBinding(Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding"/>.
            </summary>
            <param name="memberListBinding"><see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding"/> to visit.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableMemberMemberBinding(Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding"/>.
            </summary>
            <param name="memberMemberBinding"><see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding"/> to visit.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.GetResultConstantExpression(Zyan.InterLinq.Expressions.SerializableConstantExpression)">
            <summary>
            Executes a <see cref="T:Zyan.InterLinq.Expressions.SerializableConstantExpression"/> and returns the result.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableConstantExpression"/> to convert.</param>
            <returns>Returns the result of a <see cref="T:Zyan.InterLinq.Expressions.SerializableConstantExpression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.GetResultMethodCallExpression(Zyan.InterLinq.Expressions.SerializableMethodCallExpression)">
            <summary>
            Executes a <see cref="T:Zyan.InterLinq.Expressions.SerializableMethodCallExpression"/> and returns the result.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableMethodCallExpression"/> to convert.</param>
            <returns>Returns the result of a <see cref="T:Zyan.InterLinq.Expressions.SerializableMethodCallExpression"/>.</returns>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionVisitor.ExpressionToConvert">
            <summary>
            Gets the <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">ExpressionToConvert</see>.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.ExpressionConversionHelper">
            <summary>
            Static helper class providing several C# 3.0 Extension Methods.
            </summary>
            <seealso cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/>
            <seealso cref="T:System.Linq.Expressions.Expression"/>
            <seealso cref="T:System.Collections.IEnumerable"/>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.ExpressionConversionHelper.MakeSerializable(System.Linq.Expressions.Expression)">
            <summary>
            Extension Method for <see cref="T:System.Linq.Expressions.Expression"/>.
            Converts an <see cref="T:System.Linq.Expressions.Expression"/> to a <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/>.
            </summary>
            <param name="exp">Extended class instance.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.ExpressionConversionHelper.MakeSerializable(System.Linq.Expressions.Expression,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Extension Method for <see cref="T:System.Linq.Expressions.Expression"/>.
            Converts an <see cref="T:System.Linq.Expressions.Expression"/> to a <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/>.
            </summary>
            <param name="exp">Extended class instance.</param>
            <param name="expConverter"><see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> instance.</param>
            <returns>Returns the converted <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.ExpressionConversionHelper.MakeSerializable``1(System.Linq.Expressions.Expression,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Extension Method for <see cref="T:System.Linq.Expressions.Expression"/>.
            Converts an <see cref="T:System.Linq.Expressions.Expression"/> to a <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Return type (must be subclass of <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/>.</typeparam>
            <param name="exp">Extended class instance.</param>
            <param name="expConverter"><see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> instance.</param>
            <returns>Returns the converted <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.ExpressionConversionHelper.MakeSerializableCollection``1(System.Collections.IEnumerable,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Extension Method for <see cref="T:System.Collections.IEnumerable"/>.
            Converts an <see cref="T:System.Collections.IEnumerable"/> to a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.
            </summary>
            <typeparam name="T">Return type (must be subclass of <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/>.</typeparam>
            <param name="exp">Extended class instance.</param>
            <param name="expConverter"><see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> instance.</param>
            <returns>Returns the converted <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.ExpressionConversionHelper.Convert(Zyan.InterLinq.Expressions.SerializableExpression,Zyan.InterLinq.IQueryHandler)">
            <summary>
            Extension Method for <see cref="T:System.Collections.IEnumerable"/>.
            Returns the result of the executed <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/>.
            </summary>
            <param name="exp">Extended class instance.</param>
            <param name="linqHandler"><see cref="T:Zyan.InterLinq.IQueryHandler"/>.</param>
            <returns>Returns the result of the executed <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.ExpressionConversionHelper.Deserialize(Zyan.InterLinq.Expressions.SerializableExpression)">
            <summary>
            Extension method for <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/>.
            Returns <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="exp">Serializable expression to convert</param>
            <returns>Returns <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="T:Zyan.InterLinq.Communication.Remoting.ServerQueryRemotingHandler">
            <summary>
            Server handler class to retrieve information via .NET Remoting.
            </summary>
            <seealso cref="T:Zyan.InterLinq.IQueryRemoteHandler"/>
            <seealso cref="T:System.MarshalByRefObject"/>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Remoting.ServerQueryRemotingHandler.#ctor">
            <summary>
            Initializes this class.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Remoting.ServerQueryRemotingHandler.#ctor(Zyan.InterLinq.IQueryHandler)">
            <summary>
            Initializes this class.
            </summary>
            <param name="innerHandler">Inner Handler of this Server.</param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Remoting.ServerQueryRemotingHandler.RegisterService(Zyan.InterLinq.IQueryRemoteHandler)">
            <summary>
            Registers the <see cref="T:Zyan.InterLinq.IQueryRemoteHandler"/> as service.
            </summary>
            <param name="serviceHandler"><see cref="T:Zyan.InterLinq.IQueryRemoteHandler"/> to register.</param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Remoting.ServerQueryRemotingHandler.GetRegisteredService">
            <summary>
            Returns the registered <see cref="T:Zyan.InterLinq.IQueryRemoteHandler"/>.
            </summary>
            <returns>Returns the registered <see cref="T:Zyan.InterLinq.IQueryRemoteHandler"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Remoting.ServerQueryRemotingHandler.InitializeLifetimeService">
            <summary>
            This methods is overwritten because this class is made for a singleton service and should
            live until the application terminates.
            </summary>
            <returns>This method will always return <see langword="null"/></returns>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Remoting.ServerQueryRemotingHandler.Start(System.Boolean)">
            <summary>
            Publishes this object for remoting.
            </summary>
            <param name="createDefaultChannels">
            Determinates if the default channels should be created or not.
            <seealso cref="T:Zyan.InterLinq.Communication.Remoting.RemotingConstants"/>
            </param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Remoting.ServerQueryRemotingHandler.Start(System.String,System.Boolean)">
            <summary>
            Publishes this object for remoting.
            </summary>
            <param name="objectUri">The remoting uri of the object.</param>
            <param name="createDefaultChannels">
            Determinates if the default channels should be created or not.
            <seealso cref="T:Zyan.InterLinq.Communication.Remoting.RemotingConstants"/>
            </param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Remoting.ServerQueryRemotingHandler.Retrieve(Zyan.InterLinq.Expressions.SerializableExpression)">
            <summary>
            Retrieves data from the server by an <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            </summary>
            <remarks>
            This method's return type depends on the submitted 
            <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            Here some examples ('T' is the requested type):
            <list type="list">
                <listheader>
                    <term>Method</term>
                    <description>Return Type</description>
                </listheader>
                <item>
                    <term>Select(...)</term>
                    <description>T[]</description>
                </item>
                <item>
                    <term>First(...), Last(...)</term>
                    <description>T</description>
                </item>
                <item>
                    <term>Count(...)</term>
                    <description><see langword="int"/></description>
                </item>
                <item>
                    <term>Contains(...)</term>
                    <description><see langword="bool"/></description>
                </item>
            </list>
            </remarks>
            <param name="expression">
                <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">Expression</see> tree 
                containing selection and projection.
            </param>
            <returns>Returns requested data.</returns>
            <seealso cref="M:Zyan.InterLinq.IQueryRemoteHandler.Retrieve(Zyan.InterLinq.Expressions.SerializableExpression)"/>
        </member>
        <member name="P:Zyan.InterLinq.Communication.Remoting.ServerQueryRemotingHandler.InnerHandler">
            <summary>
            Gets the <see cref="T:Zyan.InterLinq.IQueryRemoteHandler"/>.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Delegates.SessionEventFilter">
            <summary>
            Event filter for session-bound events.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.SessionEventFilter.#ctor(System.Guid[])">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Delegates.SessionEventFilter"/> class.
            </summary>
            <param name="sessions">Allowed session identities.</param>
        </member>
        <member name="M:Zyan.Communication.Delegates.SessionEventFilter.AllowInvocation(System.Object,Zyan.Communication.Delegates.SessionEventArgs)">
            <summary>
            Returns true if <see cref="T:Zyan.Communication.Delegates.SessionEventArgs"/> is allowed to pass through the filter.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="args">The <see cref="T:Zyan.Communication.Delegates.SessionEventArgs"/> instance containing the event data.</param>
            <returns>
              <c>true</c> if invocation is allowed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Zyan.Communication.Delegates.SessionEventFilter.Sessions">
            <summary>
            Gets the session identity set for this event filter.
            </summary>
        </member>
        <member name="T:Zyan.Communication.InvokeRemoteMethodDelegate">
            <summary>
            Delegat für den Aufruf von InvokeRemoteMethod.
            </summary>
            <param name="methodCallMessage">Remoting-Nachricht</param>
            <param name="allowCallInterception">Gibt an, ob das Abfangen von Aufrufen zugelassen wird, oder nicht</param>
            <returns>Antwortnachricht</returns>
        </member>
        <member name="T:Zyan.Communication.ZyanProxy">
            <summary>
            Stellvertreterobjekt für den Zugriff auf eine entfernte Komponente.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanProxy.#ctor(System.String,System.Type,Zyan.Communication.ZyanConnection,System.Boolean,System.Guid,System.String,System.Boolean,System.Collections.Hashtable,Zyan.Communication.ActivationType)">
            <summary>
            Konstruktor.
            </summary>
            <param name="uniqueName">Eindeutiger Komponentenname</param>
            <param name="type">Schnittstelle der entfernten Komponente</param>
            <param name="connection">Verbindungsobjekt</param>
            <param name="implicitTransactionTransfer">Implizite Transaktionsübertragung</param>
            <param name="sessionID">Sitzungsschlüssel</param>
            <param name="componentHostName">Name des entfernten Komponentenhosts</param>
            <param name="autoLoginOnExpiredSession">Gibt an, ob sich der Proxy automatisch neu anmelden soll, wenn die Sitzung abgelaufen ist</param>
            <param name="autoLogoninCredentials">Optional! Anmeldeinformationen, die nur benötigt werden, wenn autoLoginOnExpiredSession auf Wahr eingestellt ist</param>
            <param name="activationType">Aktivierungsart</param>
        </member>
        <member name="M:Zyan.Communication.ZyanProxy.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Invoke remote method.
            </summary>
            <param name="message">Remoting method invocation message.</param>
            <returns>Reply message</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanProxy.AddRemoteEventHandler(Zyan.Communication.Delegates.DelegateCorrelationInfo)">
            <summary>
            Adds a handler to a remote event or delegate.
            </summary>
            <param name="correlationInfo">Correlation data</param>
        </member>
        <member name="M:Zyan.Communication.ZyanProxy.RemoveRemoteEventHandler(Zyan.Communication.Delegates.DelegateCorrelationInfo)">
            <summary>
            Removes a handler from a remote event or delegate.
            </summary>
            <param name="correlationInfo">Correlation data</param>
        </member>
        <member name="M:Zyan.Communication.ZyanProxy.ReconnectRemoteEvents">
            <summary>
            Reconnects to all remote events or delegates after a server restart.
            <remarks>
            Caution! This method does not check, if the event handler registrations are truly lost (caused by a server restart).
            </remarks>
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanProxy.ExtractEventHandlerDetails(System.Delegate@,Zyan.Communication.Delegates.IEventFilter@)">
            <summary>
            Extracts the event handler details such as event filter.
            </summary>
            <param name="eventHandler">The event handler delegate.</param>
            <param name="eventFilter">The event filter.</param>
        </member>
        <member name="M:Zyan.Communication.ZyanProxy.InvokeLocally(System.String,System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Handles certain invocations locally for methods declared by System.Object class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanProxy.InvokeRemoteMethod(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Boolean)">
            <summary>
            Führt einen entfernten Methodenaufruf aus.
            </summary>
            <param name="methodCallMessage">Remoting-Nachricht mit Details für den entfernten Methodenaufruf</param>
            <param name="allowCallInterception">Gibt an, ob das Abfangen von Aufrufen zugelassen wird, oder nicht</param>
            <returns>Remoting Antwortnachricht</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanProxy.InterceptDelegateParameters(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Ersetzt Delegaten-Parameter einer Remoting-Nachricht durch eine entsprechende Delegaten-Abfangvorrichtung.
            </summary>
            <param name="message">Remoting-Nachricht</param>
            <returns>argumentliste</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanProxy.RemoveAllRemoteEventHandlers">
            <summary>
            Removes all remote event handlers.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanProxy.ComponentHostName">
            <summary>
            Gets the name of the remote Component Host.
            </summary>
        </member>
        <member name="T:Zyan.Communication.SessionMgmt.SessionVariableAdapter">
            <summary>
            Session variable container.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionVariableAdapter.#ctor(Zyan.Communication.SessionMgmt.ISessionManager,System.Guid)">
            <summary>
            Initializes a new instance of SessionVariableAdapter.
            </summary>
            <param name="sessionManager">Session manager component.</param>
            <param name="sessionID">Session unique identifier.</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionVariableAdapter.SetSessionVariable(System.String,System.Object)">
            <summary>
            Set the new value for a session variable with the given name.
            </summary>
            <param name="name">Variable name.</param>
            <param name="value">Variable value.</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionVariableAdapter.GetSessionVariable(System.String)">
            <summary>
            Get an untyped value of the session variable with the given name.
            </summary>
            <param name="name">Variable name</param>
            <returns>
            Variable value.
            </returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionVariableAdapter.GetSessionVariable``1(System.String)">
            <summary>
            Get strongly-typed value of the session variable with the given name.
            </summary>
            <typeparam name="T">Variable type.</typeparam>
            <param name="name">Variable name.</param>
            <returns>
            Variable value.
            </returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionVariableAdapter.GetSessionVariable``1(System.String,``0)">
            <summary>
            Get strongly-typed value of the session variable with the given name.
            </summary>
            <typeparam name="T">Variable type.</typeparam>
            <param name="name">Variable name.</param>
            <param name="defaultValue">Default value to return if the variable is not defined.</param>
            <returns>
            Variable value.
            </returns>
        </member>
        <member name="P:Zyan.Communication.SessionMgmt.SessionVariableAdapter.Item(System.String)">
            <summary>
            Gets or sets the variable value.
            </summary>
            <param name="variableName">Variable name.</param>
            <returns>The value of the session variable.</returns>
        </member>
        <member name="T:Zyan.Communication.Security.Exceptions.PasswordExpiredException">
            <summary>
            Security exception which is thrown if user's password is expired.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.PasswordExpiredException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Security.Exceptions.PasswordExpiredException"/> class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.PasswordExpiredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Security.Exceptions.PasswordExpiredException"/> class.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.PasswordExpiredException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Security.Exceptions.PasswordExpiredException"/> class.
            </summary>
            <param name="message">Exception message.</param>
            <param name="inner">The inner <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.PasswordExpiredException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Security.Exceptions.PasswordExpiredException"/> class.
            </summary>
            <param name="message">Exception message.</param>
            <param name="userName">Account user name.</param>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.PasswordExpiredException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Security.Exceptions.PasswordExpiredException"/> class.
            </summary>
            <param name="message">Exception message.</param>
            <param name="userName">Account user name.</param>
            <param name="inner">The inner <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.PasswordExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Security.Exceptions.PasswordExpiredException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Zyan.Communication.Security.Exceptions.PasswordExpiredException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the <see cref="T:Zyan.Communication.Security.Exceptions.PasswordExpiredException"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Zyan.Communication.Security.Exceptions.PasswordExpiredException.UserName">
            <summary>
            Account user name.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Security.BasicWindowsAuthProvider">
            <summary>
            Authentifizierungsanbieter für einfache Authentifizierung mit Benutzername und Passwort im Klartext.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Security.BasicWindowsAuthProvider.ValidateWindowsCredentials(System.String,System.String,System.String)">
            <summary>
            Überprüft Windows-Anmeldeinformationen.
            </summary>
            <param name="username">Windows-Benutzername</param>
            <param name="password">Windows-Kennwort</param>
            <param name="domain">Windows-Computername oder Active Directory-Domäne</param>
            <returns>Wahr, wenn die Anmeldung erflgreich war, ansonsten Falsch</returns>
        </member>
        <member name="M:Zyan.Communication.Security.BasicWindowsAuthProvider.Authenticate(Zyan.Communication.Security.AuthRequestMessage)">
            <summary>
            Authentifiziert einen bestimmten Benutzer anhand seiner Anmeldeinformationen.
            </summary>
            <param name="authRequest">Authentifizierungs-Anfragenachricht mit Anmeldeinformationen</param>
            <returns>Antwortnachricht des Authentifizierungssystems</returns>
        </member>
        <member name="T:Zyan.Communication.Protocols.Ipc.IpcBinaryServerProtocolSetup">
            <summary>
            Server protocol setup for inter process communication via Named Pipes.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Ipc.IpcBinaryServerProtocolSetup.#ctor(System.String)">
            <summary>
            Creates a new instance of the IpcBinaryServerProtocolSetup class.
            </summary>
            <param name="portName">IPC port name</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Ipc.IpcBinaryServerProtocolSetup.#ctor(System.String,Zyan.Communication.Protocols.Versioning)">
            <summary>
            Creates a new instance of the IpcBinaryServerProtocolSetup class.
            </summary>
            <param name="portName">IPC port name</param>
            <param name="versioning">Versioning behavior</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Ipc.IpcBinaryServerProtocolSetup.CreateChannel">
            <summary>
            Creates and configures a Remoting channel.
            </summary>
            <returns>Remoting channel</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Ipc.IpcBinaryServerProtocolSetup.PortName">
            <summary>
            Gets or sets the unique IPC port name.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Ipc.IpcBinaryServerProtocolSetup.UseWindowsSecurity">
            <summary>
            Gets or sets, if Windows Security should be used.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Ipc.IpcBinaryServerProtocolSetup.ImpersonationLevel">
            <summary>
            Gets or sets the level of impersonation.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Ipc.IpcBinaryServerProtocolSetup.ProtectionLevel">
            <summary>
            Get or sets the level of protection (sign or encrypt, or both)
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Ipc.IpcBinaryServerProtocolSetup.AuthenticationProvider">
            <summary>
            Gets the authentication provider.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Ipc.IpcBinaryServerProtocolSetup.Versioning">
            <summary>
            Gets or sets the versioning behavior.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Ipc.IpcBinaryClientProtocolSetup">
            <summary>
            Client protocol setup for inter process communication via Named Pipes.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Ipc.IpcBinaryClientProtocolSetup.#ctor">
            <summary>
            Creates a new instance of the IpcBinaryClientProtocolSetup class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Ipc.IpcBinaryClientProtocolSetup.#ctor(Zyan.Communication.Protocols.Versioning)">
            <summary>
            Creates a new instance of the IpcBinaryClientProtocolSetup class.
            </summary>
            <param name="versioning">Versioning behavior</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Ipc.IpcBinaryClientProtocolSetup.CreateChannel">
            <summary>
            Creates and configures a Remoting channel.
            </summary>
            <returns>Remoting channel</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Ipc.IpcBinaryClientProtocolSetup.UseWindowsSecurity">
            <summary>
            Gets or sets, if Windows Security should be used.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Ipc.IpcBinaryClientProtocolSetup.ImpersonationLevel">
            <summary>
            Gets or sets the level of impersonation.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Ipc.IpcBinaryClientProtocolSetup.ProtectionLevel">
            <summary>
            Get or sets the level of protection (sign or encrypt, or both)
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Ipc.IpcBinaryClientProtocolSetup.Versioning">
            <summary>
            Gets or sets the versioning behavior.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Types.Anonymous.AnonymousTypeHelper">
            <summary>
            A static class that contains static methods to recognize some special types like anonymous types and
            display classes.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousTypeHelper.IsAnonymous(System.Type)">
            <summary>
            Returns true if the given <see cref="T:System.Type"/> is an anonymous type.
            </summary>
            <param name="t"><see cref="T:System.Type"/> to test.</param>
            <returns>True, if the type is an anonymous type. False, if not.</returns>
            <remarks>
            A anonymous type is not really marked as anonymous.
            The only way to recognize it is it's name.
            Maybe in future versions they will be marked.
            </remarks>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousTypeHelper.IsDisplayClass(System.Type)">
            <summary>
            Returns true if the given <see cref="T:System.Type"/> is a display class.
            </summary>
            <param name="t"><see cref="T:System.Type"/> to test.</param>
            <returns>True, if the type is a display class. False, if not.</returns>
            <remarks>
            A display class is not really marked as display class.
            The only way to recognize it is it's name.
            Maybe in future versions they will be marked.
            </remarks>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousTypeHelper.IsIGrouping(System.Type)">
            <summary>
            Returns true if the given <see cref="T:System.Type"/> is a <see cref="T:System.Linq.IGrouping`2"/> class.
            </summary>
            <param name="t"><see cref="T:System.Type"/> to test.</param>
            <returns>Returns true if the given <see cref="T:System.Type"/> is a <see cref="T:System.Linq.IGrouping`2"/> class.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.AnonymousTypeHelper.IsEnumerator(System.Type)">
            <summary>
            Returns true if the given <see cref="T:System.Type"/> is a <see cref="T:System.Collections.Generic.IEnumerator`1"/> class.
            </summary>
            <param name="t"><see cref="T:System.Type"/> to test.</param>
            <returns>Returns true if the given <see cref="T:System.Type"/> is a <see cref="T:System.Collections.Generic.IEnumerator`1"/> class.</returns>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableNewArrayExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.NewArrayExpression"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableNewArrayExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableNewArrayExpression.#ctor(System.Linq.Expressions.NewArrayExpression,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.NewArrayExpression"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableNewArrayExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableNewArrayExpression.Expressions">
            <summary>
            See <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions"/>
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Communication.Remoting.RemotingConstants">
            <summary>
            Constants for the default remoting configuration.
            </summary>
        </member>
        <member name="F:Zyan.InterLinq.Communication.Remoting.RemotingConstants.DefaultServiceProtocol">
            <summary>
            The default service protocol for the server name
            </summary>
        </member>
        <member name="F:Zyan.InterLinq.Communication.Remoting.RemotingConstants.DefaultServerName">
            <summary>
            The default server name.
            </summary>
        </member>
        <member name="F:Zyan.InterLinq.Communication.Remoting.RemotingConstants.DefaultServerObjectName">
            <summary>
            The default remote object name for the factory.
            </summary>
        </member>
        <member name="F:Zyan.InterLinq.Communication.Remoting.RemotingConstants.DefaultServiceChannelName">
            <summary>
            The default service channel name for the remoting connection.
            </summary>
        </member>
        <member name="F:Zyan.InterLinq.Communication.Remoting.RemotingConstants.DefaultServicePort">
            <summary>
            The default port a for remoting connection.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Remoting.RemotingConstants.GetDefaultChannel(System.Collections.IDictionary)">
            <summary>
            A channel with the default name and the default port.
            </summary>
            <param name="properties">The properties of the channel.</param>
            <returns>Retruns a default <see cref="T:System.Runtime.Remoting.Channels.IChannel"/>.</returns>
        </member>
        <member name="T:Zyan.Communication.Toolbox.AssemblyLocator">
            <summary>
            Assembly locator to fix different load contexts problem.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.AssemblyLocator.Initialize(System.Boolean)">
            <summary>
            Initializes assembly locator.
            </summary>
            <param name="enabled">True, if AssemblyLocator should be enabled, otherwise, false.</param>
        </member>
        <member name="P:Zyan.Communication.Toolbox.AssemblyLocator.Enabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Zyan.Communication.Toolbox.AssemblyLocator"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Zyan.InterLinq.InterLinqQueryBase">
            <summary>
            Base Class for InterLinq Queries.
            </summary>
        </member>
        <member name="F:Zyan.InterLinq.InterLinqQueryBase.elementType">
            <summary>
            See <see cref="T:System.Type">Element Type</see> of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="F:Zyan.InterLinq.InterLinqQueryBase.elementInterLinqType">
            <summary>
            See <see cref="T:Zyan.InterLinq.Types.InterLinqType">InterLINQ Element Type</see> of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.InterLinqQueryBase.ElementType">
            <summary>
            Gets or sets a <see cref="T:System.Type">Element Type</see> of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.InterLinqQueryBase.ElementInterLinqType">
            <summary>
            Gets or sets a <see cref="T:Zyan.InterLinq.Types.InterLinqType">InterLINQ Element Type</see> of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.InterLinqQuery`1">
            <summary>
            Standard implementation of an InterLinqQuery.
            </summary>
            <typeparam name="T">The type of the content of the data source.</typeparam>
            <seealso cref="T:Zyan.InterLinq.InterLinqQueryBase"/>
        </member>
        <member name="M:Zyan.InterLinq.InterLinqQuery`1.#ctor(System.Linq.IQueryProvider)">
            <summary>
            Initializes this Query with the arguments.
            </summary>
            <remarks>
            This constructor creates a <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            The arguments will be checked. These exceptions will be thrown...
                ... when "provider" is null:    <see cref="T:System.ArgumentNullException"/>
            </remarks>
            <param name="provider"><see cref="T:System.Linq.IQueryProvider"/> to set.</param>
        </member>
        <member name="M:Zyan.InterLinq.InterLinqQuery`1.#ctor(System.Linq.IQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Initializes this Query with the arguments.
            </summary>
            <remarks>
            The arguments will be checked. These exceptions will be thrown...
            <list type="list">
                <listheader>
                    <term>Condition</term>
                    <description>Thrown Exception</description>
                </listheader>
                <item>
                    <term>... when "provider" is null</term>
                    <description><see cref="T:System.ArgumentNullException"/></description>
                </item>
                <item>
                    <term>... when "expression" is null</term>
                    <description><see cref="T:System.ArgumentNullException"/></description>
                </item>
                <item>
                    <term>... when "expression" is not assignable from <see cref="T:System.Linq.IQueryable`1"/></term>
                    <description><see cref="T:System.ArgumentException"/></description>
                </item>
            </list>                                  
            </remarks>
            <param name="provider"><see cref="T:System.Linq.IQueryProvider"/> to set.</param>
            <param name="expression"><see cref="P:Zyan.InterLinq.InterLinqQuery`1.Expression"/> to set.</param>
        </member>
        <member name="M:Zyan.InterLinq.InterLinqQuery`1.Initialize(System.Linq.IQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Checks the method arguments and initializes this Query object.
            </summary>
            <param name="iQueryProvider"><see cref="T:System.Linq.IQueryProvider"/> to set.</param>
            <param name="expr"><see cref="P:Zyan.InterLinq.InterLinqQuery`1.Expression"/> to set.</param>
        </member>
        <member name="M:Zyan.InterLinq.InterLinqQuery`1.ToString">
            <summary>
            Returns a <see langword="string"/> that represents this instance.
            </summary>
            <remarks>
            The following <see langword="string"/> is returned:
            <c>Type&lt;GenericArgumentType&gt;</c>
            </remarks>
            <returns>A <see langword="string"/> that represents this instance.</returns>
        </member>
        <member name="M:Zyan.InterLinq.InterLinqQuery`1.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through the returned result
            of this query.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate 
            through the returned result of this query.
            </returns>
        </member>
        <member name="M:Zyan.InterLinq.InterLinqQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that iterates through the returned result
            of this query.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate 
            through the returned result of this query.
            </returns>
        </member>
        <member name="P:Zyan.InterLinq.InterLinqQuery`1.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the 
            <see cref="P:Zyan.InterLinq.InterLinqQuery`1.Expression"/> tree associated with this instance of 
            <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
            <remarks>
            A <see cref="T:System.Type"/> that represents the type of the element(s) that are returned
            when the <see cref="P:Zyan.InterLinq.InterLinqQuery`1.Expression"/> tree associated with this object is executed.
            </remarks>
        </member>
        <member name="P:Zyan.InterLinq.InterLinqQuery`1.Provider">
            <summary>
            Gets the <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.
            </summary>
            <remarks>
            The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.
            </remarks>
        </member>
        <member name="P:Zyan.InterLinq.InterLinqQuery`1.Expression">
            <summary>
            Gets the <see cref="P:Zyan.InterLinq.InterLinqQuery`1.Expression"/> tree that is associated with the instance of 
            <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <remarks>
            The <see cref="P:Zyan.InterLinq.InterLinqQuery`1.Expression"/> that is associated with this instance of 
            <see cref="T:System.Linq.IQueryable"/>.
            </remarks>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter">
            <summary>
            Converter class to convert <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression">SerializableExpression's</see>
            to <see cref="T:System.Linq.Expressions.Expression">Expression's</see>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.#ctor(Zyan.InterLinq.Expressions.SerializableExpression,Zyan.InterLinq.IQueryHandler)">
            <summary>
            Initializes this class.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/> to convert.</param>
            <param name="queryHandler"><see cref="T:Zyan.InterLinq.IQueryHandler"/>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableBinaryExpression(Zyan.InterLinq.Expressions.SerializableBinaryExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableBinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableBinaryExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableConditionalExpression(Zyan.InterLinq.Expressions.SerializableConditionalExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableConditionalExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableConditionalExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableConstantExpression(Zyan.InterLinq.Expressions.SerializableConstantExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableConstantExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableConstantExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableInvocationExpression(Zyan.InterLinq.Expressions.SerializableInvocationExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableInvocationExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableInvocationExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableExpressionTyped``1(Zyan.InterLinq.Expressions.SerializableExpressionTyped)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableExpressionTyped"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableExpressionTyped"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableLambdaExpression(Zyan.InterLinq.Expressions.SerializableLambdaExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableLambdaExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableLambdaExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableListInitExpression(Zyan.InterLinq.Expressions.SerializableListInitExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableListInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableListInitExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableMemberExpression(Zyan.InterLinq.Expressions.SerializableMemberExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableMemberExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableMemberExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableMemberInitExpression(Zyan.InterLinq.Expressions.SerializableMemberInitExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableMemberInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableMemberInitExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableMethodCallExpression(Zyan.InterLinq.Expressions.SerializableMethodCallExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableMethodCallExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableMethodCallExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableNewArrayExpression(Zyan.InterLinq.Expressions.SerializableNewArrayExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableNewArrayExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableNewArrayExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableNewExpression(Zyan.InterLinq.Expressions.SerializableNewExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableNewExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableNewExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableParameterExpression(Zyan.InterLinq.Expressions.SerializableParameterExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableParameterExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableParameterExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableTypeBinaryExpression(Zyan.InterLinq.Expressions.SerializableTypeBinaryExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableTypeBinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableTypeBinaryExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableUnaryExpression(Zyan.InterLinq.Expressions.SerializableUnaryExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableUnaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableUnaryExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitUnknownSerializableExpression(Zyan.InterLinq.Expressions.SerializableExpression)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/>.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableElementInit(Zyan.InterLinq.Expressions.SerializableTypes.SerializableElementInit)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableElementInit"/>.
            </summary>
            <param name="elementInit"><see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableElementInit"/> to visit.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableMemberAssignment(Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment"/>.
            </summary>
            <param name="memberAssignment"><see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment"/> to visit.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableMemberListBinding(Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding"/>.
            </summary>
            <param name="memberListBinding"><see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding"/> to visit.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableMemberMemberBinding(Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding)">
            <summary>
            Visits a <see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding"/>.
            </summary>
            <param name="memberMemberBinding"><see cref="T:Zyan.InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding"/> to visit.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.GetResultConstantExpression(Zyan.InterLinq.Expressions.SerializableConstantExpression)">
            <summary>
            Executes a <see cref="T:Zyan.InterLinq.Expressions.SerializableConstantExpression"/> and returns the result.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableConstantExpression"/> to convert.</param>
            <returns>Returns the result of a <see cref="T:Zyan.InterLinq.Expressions.SerializableConstantExpression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.GetResultMethodCallExpression(Zyan.InterLinq.Expressions.SerializableMethodCallExpression)">
            <summary>
            Executes a <see cref="T:Zyan.InterLinq.Expressions.SerializableMethodCallExpression"/> and returns the result.
            </summary>
            <param name="expression"><see cref="T:Zyan.InterLinq.Expressions.SerializableMethodCallExpression"/> to convert.</param>
            <returns>Returns the result of a <see cref="T:Zyan.InterLinq.Expressions.SerializableMethodCallExpression"/>.</returns>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.InvokeMethodCall(Zyan.InterLinq.Expressions.SerializableMethodCallExpression)">
            <summary>
            Returns the return value of the method call in <paramref name="ex"/>.
            </summary>
            <param name="ex"><see cref="T:Zyan.InterLinq.Expressions.SerializableMethodCallExpression"/> to invoke.</param>
            <returns>Returns the return value of the method call in <paramref name="ex"/>.</returns>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.Helpers.SerializableExpressionConverter.QueryHandler">
            <summary>
            Gets the <see cref="T:Zyan.InterLinq.IQueryHandler">QueryHandler</see>.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.ZyanMethodQueryHandler">
            <summary>
            Wraps component method returning IEnumerable{T} or IQueryable{T}.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ComponentInfo">
            <summary>
            Schreibt eine veröffentlichte Komponente.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentInfo.InterfaceName">
            <summary>
            Gibt den Schnittstellennamen zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentInfo.UniqueName">
            <summary>
            Gibt den eindeutigen Namen der Komponente zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentInfo.ActivationType">
            <summary>
            Gibt den Aktivierungstyp zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ClientHeartbeatEventArgs">
            <summary>
            Describes arguments for client heartbeat events.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ClientHeartbeatEventArgs.#ctor">
            <summary>
            Creates a new instance of the ClientHeartbeatEventArgs class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ClientHeartbeatEventArgs.#ctor(System.DateTime,System.Guid)">
            <summary>
            Creates a new instance of the ClientHeartbeatEventArgs class.
            </summary>
            <param name="receiveTime">Receive time</param>
            <param name="sessionID">Client session key</param>
        </member>
        <member name="P:Zyan.Communication.ClientHeartbeatEventArgs.HeartbeatReceiveTime">
            <summary>
            Gets or sets, when the client heartbeat was received.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ClientHeartbeatEventArgs.SessionID">
            <summary>
            Gets or sets the session ID of the client, which sent the heartbeat signal.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.SyncContextSwitcher`1">
            <summary>
            Stellt sicher, dass die Verarbeitung von Nachrichten im ursprünglichen Thread stattfinden.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Toolbox.SyncContextSwitcher`1.Out">
            <summary>
            Aktion, die ausgeführt wird, wenn eine Nachricht verarbeitet werden soll.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.SyncContextSwitcher`1.In(`0)">
            <summary>
            Verarbeitet eine Nachricht und berücksichtigt dabei den Synchronisierungskontext.
            </summary>
            <param name="message">Nachricht</param>
        </member>
        <member name="M:Zyan.Communication.Toolbox.SyncContextSwitcher`1.WireUp(System.Action{`0})">
            <summary>
            Erstellt eine neue Instanz und verdrahtet damit zwei Pins.
            </summary>
            <param name="inputPin">Eingangs-Pin</param>
            <returns>Ausgangs-Pin</returns>
        </member>
        <member name="T:Zyan.Communication.Toolbox.Disposable">
            <summary>
            Helper class for operations that require deterministic release of resources.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.Disposable.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Toolbox.Disposable"/> class.
            </summary>
            <param name="cleanupAction">The cleanup action.</param>
        </member>
        <member name="M:Zyan.Communication.Toolbox.Disposable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Toolbox.Disposable"/> class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.Disposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.ConnectionRole">
            <summary>
            Defines connection roles. A connection may act as Server or as Client.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.ConnectionRole.ActAsClient">
            <summary>
            Connection acts as client.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.ConnectionRole.ActAsServer">
            <summary>
            Connection acts as server.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection">
            <summary>
            Encapsulates a connection, providing read/write locking for synchronisation.
            Additionally, this should provide a useful position for adding reconnection abilities.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.GetConnection(System.String,Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel,System.Boolean,System.UInt64,System.UInt64,System.Int16,System.Int32)">
            <summary>
            Gets a specified connection.
            </summary>
            <param name="address">Address of the connection</param>
            <param name="channel">Channel of the connection</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
            <param name="maxRetries">Maximum number of connection retry attempts</param>
            <param name="retryDelay">Delay after connection retry in milliseconds</param>
            <returns>Connection</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.GetRunningConnectionsOfChannel(Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel)">
            <summary>
            Get all currently running connection of a specified channel.
            </summary>
            <param name="channel">TcpEx Channel</param>
            <returns>Running connections</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.CreateConnection(System.Net.Sockets.Socket,Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel,System.Boolean,System.UInt64,System.UInt64,System.Int16,System.Int32)">
            <summary>
            Creates a connection object.
            </summary>
            <param name="socket">Connection socket</param>
            <param name="channel">Connection channel</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
            <param name="maxRetries">Maximum number of connection retry attempts</param>
            <param name="retryDelay">Delay after connection retry in milliseconds</param>
            <returns>Connection</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.#ctor(System.String,Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel,System.Boolean,System.UInt64,System.UInt64,System.Int16,System.Int32)">
            <summary>
            Creates a new instance of the Connection class.
            </summary>
            <param name="address">Address (IP oder DNS based)</param>
            <param name="channel">Remoting channel</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
            <param name="maxRetries">Maximum number of connection retry attempts</param>
            <param name="retryDelay">Delay after connection retry in milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.#ctor(System.Net.Sockets.Socket,Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel,System.Boolean,System.UInt64,System.UInt64,System.Int16,System.Int32)">
            <summary>
            Creates a new instance of the Connection class.
            </summary>
            <param name="socket">Socket which sould be used</param>
            <param name="channel">Remoting channel</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
            <param name="maxRetries">Maximum number of connection retry attempts</param>
            <param name="retryDelay">Delay after connection retry in milliseconds</param>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.BufferSize">
            <summary>
            Defines the buffer size (Default = 10K).
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._connectionRole">
            <summary>
            Defines the connection role.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._socket">
            <summary>
            Socket used for TCP communication.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._socketRemoteAddress">
            <summary>
            Address of the remote socket endpoint.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._socketRemotePort">
            <summary>
            Port of the remote socket endpoint.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._stream">
            <summary>
            Networkstream for sending and receiving raw data.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._reader">
            <summary>
            Reader for reading binary raw data from network stream.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._writer">
            <summary>
            Writer for writing binary raw data to network stream.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._channel">
            <summary>
            Parent Remoting channel of this connection.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._remoteChannelData">
            <summary>
            Configuration data of the remoting channel.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._maxRetries">
            <summary>
            Maximum number of connection retry attempts.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._retryDelay">
            <summary>
            Delay after retry attempt in milliseconds.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.CheckSocket">
            <summary>
            Tries to reconnect, if the socket was closed unexpected.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.SendChannelInfo">
            <summary>
            Sends channel data.
            </summary>
            <returns>True, if sending was successfully, otherwise false</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.ReceiveChannelInfo">
            <summary>
            Receives channel data.
            </summary>
            <returns>True, if receiving was successfully, otherwise false</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.AddToConnectionList">
            <summary>
            Adds the connection to the connection list.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.IsLocalIP(System.Net.IPAddress)">
            <summary>
            Checks if a specified IP address is a local IP or not.
            </summary>
            <param name="remoteAddress">IP address to check</param>
            <returns>true, if local, otherwise false</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.LockRead">
            <summary>
            Locks the connection for reading through other threads.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.ReleaseRead">
            <summary>
            Releases the read lock.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.LockWrite">
            <summary>
            Locks the connection for writing through other threads.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.ReleaseWrite">
            <summary>
            Releases the write lock.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.SetTcpKeepAlive(System.Net.Sockets.Socket,System.UInt64,System.UInt64)">
            <summary>
            Sets TCP-KeepAlive option for a specified socket.
            </summary>
            <param name="socket">Socket</param>
            <param name="time">Time in milliseconds</param>
            <param name="interval">Interval in milliseconds</param>
            <returns>True if successful, otherwiese false</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.Socket">
            <summary>
            Gets the underlying socket of the connection.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.Stream">
            <summary>
            Gets the Network stream.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.Reader">
            <summary>
            Gets a binary reader for reading raw data from the network stream.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.Writer">
            <summary>
            Gets a binary writer for writing raw data from the network stream.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.IsLocalHost">
            <summary>
            Checks, if the connection is a local connection or not.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.RemoteChannelID">
            <summary>
            Gets the unique identifier of the remote channel.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.RemoteAddresses">
            <summary>
            Gets a list of all registered addresses of the remote channel.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.LocalChannelID">
            <summary>
            Gets the unique identifier of the local channel.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.LocalAddress">
            <summary>
            Gets the address of the local channel.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.MaxRetries">
            <summary>
            Gets or sets the maximum number of connection retry attempts.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.RetryDelay">
            <summary>
            Gets or sets the delay after a retry attempt in milliseconds.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.TcpKeepAliveEnabled">
            <summary>
            Enables or disables TCP KeepAlive.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.TcpKeepAliveTime">
            <summary>
            Gets or sets the TCP KeepAlive time in milliseconds.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.TcpKeepAliveInterval">
            <summary>
            Gets or sets the TCP KeepAlive interval in milliseconds
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Types.Anonymous.InterLinqGroupingBase">
            <summary>
            Serializable abstraction of LINQ's <see cref="T:System.Linq.IGrouping`2"/>.
            </summary>
            <seealso cref="T:System.Linq.IGrouping`2"/>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.InterLinqGroupingBase.SetKey(System.Object)">
            <summary>
            Sets the grouping <paramref name="key"/>.
            </summary>
            <param name="key">Key to set.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.InterLinqGroupingBase.SetElements(System.Object)">
            <summary>
            Sets the grouping <paramref name="elements"/>.
            </summary>
            <param name="elements">Elements to set.</param>
        </member>
        <member name="T:Zyan.InterLinq.Types.Anonymous.InterLinqGrouping`2">
            <summary>
            Serializable abstraction of LINQ's <see cref="T:System.Linq.IGrouping`2"/>.
            </summary>
            <seealso cref="T:Zyan.InterLinq.Types.Anonymous.InterLinqGroupingBase"/>
            <seealso cref="T:System.Linq.IGrouping`2"/>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.InterLinqGrouping`2.SetElements(System.Object)">
            <summary>
            Sets the grouping <paramref name="elements"/>.
            </summary>
            <param name="elements">Elements to set.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.InterLinqGrouping`2.SetKey(System.Object)">
            <summary>
            Sets the grouping <paramref name="key"/>.
            </summary>
            <param name="key">Key to set.</param>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.InterLinqGrouping`2.#ctor">
            <summary>
            Initializes this class.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.InterLinqGrouping`2.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through the collection.
            </returns>
        </member>
        <member name="M:Zyan.InterLinq.Types.Anonymous.InterLinqGrouping`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that iterates through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that iterates through the collection.
            </returns>
        </member>
        <member name="P:Zyan.InterLinq.Types.Anonymous.InterLinqGrouping`2.Elements">
            <summary>
            Gets or sets the elements.
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Types.Anonymous.InterLinqGrouping`2.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableInvocationExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.InvocationExpression"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableInvocationExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableInvocationExpression.#ctor(System.Linq.Expressions.InvocationExpression,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.InvocationExpression"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="P:Zyan.InterLinq.Expressions.SerializableInvocationExpression.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="P:Zyan.InterLinq.Expressions.SerializableInvocationExpression.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableInvocationExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="P:Zyan.InterLinq.Expressions.SerializableInvocationExpression.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableInvocationExpression.Expression">
            <summary>
            See <see cref="P:System.Linq.Expressions.InvocationExpression.Expression"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableInvocationExpression.Arguments">
            <summary>
            See <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments"/>
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.ZyanObjectQueryHandler">
            <summary>
            Simple IEnumerable POCO server query handler
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.ZyanObjectQueryHandler.#ctor(System.Func{System.Type,System.Collections.IEnumerable})">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.InterLinq.ZyanObjectQueryHandler"/> class.
            </summary>
            <param name="handler">The query handler (returns <see cref="T:System.Collections.IEnumerable"/> for the given <see cref="T:System.Type"/>).</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanObjectQueryHandler.#ctor(Zyan.InterLinq.IObjectSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.InterLinq.ZyanObjectQueryHandler"/> class.
            </summary>
            <param name="objectSource">The object source.</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanObjectQueryHandler.Get``1">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="T">Generic Argument of the returned <see cref="T:System.Linq.IQueryable`1"/>.</typeparam>
            <returns>
            Returns an <see cref="T:System.Linq.IQueryable`1"/>.
            </returns>
        </member>
        <member name="M:Zyan.InterLinq.ZyanObjectQueryHandler.Get(System.Type)">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <param name="type">Type of the returned <see cref="T:System.Linq.IQueryable"/>.</param>
            <returns>
            Returns an <see cref="T:System.Linq.IQueryable"/>.
            </returns>
        </member>
        <member name="M:Zyan.InterLinq.ZyanObjectQueryHandler.CloseSession">
            <summary>
            Tells the <see cref="T:Zyan.InterLinq.IQueryHandler"/> to close the current session.
            </summary>
            <returns>
            True, if the session closing was successful. False, if not.
            </returns>
        </member>
        <member name="M:Zyan.InterLinq.ZyanObjectQueryHandler.StartSession">
            <summary>
            Tells the <see cref="T:Zyan.InterLinq.IQueryHandler"/> to start a new the session.
            </summary>
            <returns>
            True, if the session creation was successful. False, if not.
            </returns>
        </member>
        <member name="T:Zyan.InterLinq.Communication.Wcf.ServerQueryWcfHandler">
            <summary>
            Server class to retrieve information via WCF.
            </summary>
            <seealso cref="T:Zyan.InterLinq.Communication.ServerQueryHandler"/>
            <seealso cref="T:Zyan.InterLinq.IQueryRemoteHandler"/>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.ServerQueryWcfHandler.#ctor(Zyan.InterLinq.IQueryHandler)">
            <summary>
            Initializes this class.
            </summary>
            <param name="queryHandler"><see cref="T:Zyan.InterLinq.IQueryHandler"/> instance.</param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.ServerQueryWcfHandler.Start">
            <summary>
            Starts a default Service Instance.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.ServerQueryWcfHandler.Start(System.Boolean)">
            <summary>
            Starts a Service Instance using the settings in your App.config.
            </summary>
            <param name="useAppConfig">Uses App.config WCF Service configuration elements if true.</param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.ServerQueryWcfHandler.Start(System.ServiceModel.Channels.Binding,System.String)">
            <summary>
            Starts the Service Instance.
            </summary>
            <param name="binding">Predefined <see cref="T:System.ServiceModel.Channels.Binding"/>.</param>
            <param name="serviceUri">Service URI as <see langword="string"/>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.ServerQueryWcfHandler.Stop">
            <summary>
            Stops the Service Instance.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.ServerQueryWcfHandler.Dispose">
            <summary>
            Disposes the Service Instance.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Communication.Wcf.ServerQueryWcfHandler.HandleExceptionInRetrieve(System.Exception)">
            <summary>
            Handles an <see cref="T:System.Exception"/> occured in the 
            <see cref="M:Zyan.InterLinq.IQueryRemoteHandler.Retrieve(Zyan.InterLinq.Expressions.SerializableExpression)"/> Method.
            </summary>
            <param name="exception">
            Thrown <see cref="T:System.Exception"/> 
            in <see cref="M:Zyan.InterLinq.IQueryRemoteHandler.Retrieve(Zyan.InterLinq.Expressions.SerializableExpression)"/> Method.
            </param>
        </member>
        <member name="T:Zyan.Communication.DisconnectedEventArgs">
            <summary>
            Describes arguments for the Disconnected event.
            </summary>
        </member>
        <member name="M:Zyan.Communication.DisconnectedEventArgs.#ctor">
            <summary>
            Creates a new instance of the DisconnectedEventArgs class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.DisconnectedEventArgs.#ctor(System.Exception)">
            <summary>
            Creates a new instance of the DisconnectedEventArgs class.
            </summary>
        </member>
        <member name="P:Zyan.Communication.DisconnectedEventArgs.Exception">
            <summary>
            Gets or sets the exception occured on polling.
            </summary>
        </member>
        <member name="P:Zyan.Communication.DisconnectedEventArgs.Retry">
            <summary>
            Gets or sets whether Zyan should retry to connect.
            </summary>
        </member>
        <member name="P:Zyan.Communication.DisconnectedEventArgs.RetryCount">
            <summary>
            Gets or sets the number of retry attempts.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Compression.CompressionServerChannelSink.#ctor(System.Runtime.Remoting.Channels.IServerChannelSink,System.Int32)">
            <summary>
            Constructor with properties.
            </summary>
            <param name="nextSink">Next sink.</param>
            <param name="compressionThreshold">Compression threshold. If 0, compression is disabled globally.</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Compression.CompressionServerChannelSink.IsCompressionExempt(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Returns true if the message return value is marked as NonCompressible.
            </summary>
            <param name="msg">Message to check.</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Compression.CompressionServerChannelSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            Requests message processing from the current sink.
            </summary>
            <param name="sinkStack">A stack of channel sinks that called the current sink.</param>
            <param name="requestMsg">The message that contains the request.</param>
            <param name="requestHeaders">Headers retrieved from the incoming message from the client.</param>
            <param name="requestStream">The stream that needs to be to processed and passed on to the deserialization sink.</param>
            <param name="responseMsg">When this method returns, contains a <see cref="T:System.Runtime.Remoting.Messaging.IMessage"/> that holds the response message. This parameter is passed uninitialized.</param>
            <param name="responseHeaders">When this method returns, contains a <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders"/> that holds the headers that are to be added to return message heading to the client. This parameter is passed uninitialized.</param>
            <param name="responseStream">When this method returns, contains a <see cref="T:System.IO.Stream"/> that is heading back to the transport sink. This parameter is passed uninitialized.</param>
            <returns>
            A <see cref="T:System.Runtime.Remoting.Channels.ServerProcessing"/> status value that provides information about how message was processed.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Compression.CompressionServerChannelSink.NextChannelSink">
            <summary>
            Gets the next server channel sink in the server sink chain.
            </summary>
            <returns>The next server channel sink in the server sink chain.</returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have the required <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure"/> permission. </exception>
        </member>
        <member name="T:Zyan.Communication.Toolbox.Asynchronizer`1">
            <summary>
            Führt die Verarbeitung einer Nachricht asynchron aus.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.Asynchronizer`1.In(`0)">
            <summary>
            Bestimmte Nachricht mit der festgelegten Aktion asychron verarbeiten.
            </summary>
            <param name="message">Nachricht</param>
        </member>
        <member name="M:Zyan.Communication.Toolbox.Asynchronizer`1.WireUp(System.Action{`0})">
            <summary>
            Erstellt eine neue Instanz und verdrahtet damit zwei Pins.
            </summary>
            <param name="inputPin">Eingangs-Pin</param>
            <returns>Ausgangs-Pin</returns>
        </member>
        <member name="P:Zyan.Communication.Toolbox.Asynchronizer`1.Out">
            <summary>
            Aktion, die zur asynchronen Verarbeitung der Nachricht aufgerufen wird.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Security.AuthResponseMessage">
            <summary>
            Reply message of the authentication system.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Security.AuthResponseMessage.Success">
            <summary>
            Gets or sets value indicating whether the authentication procedure completed successfully.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Security.AuthResponseMessage.ErrorMessage">
            <summary>
            Gets or sets error message.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Security.AuthResponseMessage.AuthenticatedIdentity">
            <summary>
            Gets or sets authenticated user's identity object.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Security.AuthResponseMessage.Exception">
            <summary>
            Gets or sets security exception thrown on authentication failure.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.CryptoRemotingException">
            <summary>
            Ausnahme, die geworfen wird, wenn bei dem ver- bzw. entschlüsseln der Remoting-Kommunikation etwas schief geht.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoRemotingException.#ctor">
            <summary>
            Erstellt eine neue Instanz von CryptoRemotingException.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoRemotingException.#ctor(System.String)">
            <summary>
            Erstellt eine neue Instanz von CryptoRemotingException.
            </summary>
            <param name="message">Fehlermeldung</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoRemotingException.#ctor(System.String,System.Exception)">
            <summary>
            Erstellt eine neue Instanz von CryptoRemotingException.
            </summary>
            <param name="message">Fehlermeldung</param>
            <param name="innerException">Ausnahme, welche diese Ausnahme verursacht hat</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoRemotingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Erstellt eine neue Instanz von CryptoRemotingException.
            </summary>
            <param name="info">Serialisirungsinformationen</param>
            <param name="context">Streaming-Kontext der Serialisierung</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoRemotingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gibt Objektdaten für die Serialisierung zurück.
            </summary>
            <param name="info">Serialisierungsinformationen</param>
            <param name="context">Streaming-Kontext der Serialisierung</param>
        </member>
        <member name="T:Zyan.Communication.LanguageResource">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.AccountLockedException_DefaultMessage">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Account is locked. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.AccountNotFoundException_DefaultMessage">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Unknown username or bad password. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ApplicationException_MultipleModuleControlersNotAllowed">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Multiple module controlers per module are not allowed. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ApplicationException_NoChannel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die No channel was created. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ApplicationException_NoChannelCreated">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die No Remoting Channel was created. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ApplicationException_NoChannelFactorySpecified">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die No channel factory method specified. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ApplicationException_NoFormatterSpecified">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die No formatter specified. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ApplicationException_NotificationServiceNotRunning">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Notification service is not running on the host. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_AddressMustNotBeEmpty">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Address must not be empty. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_ComponentHostNameMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Component host name missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_EmptySessionIDIsNotAllowed">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Empty session ID is not allowed. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_FactoryMethodDelegateMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Delegate to factory method missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_InterfaceNameMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Interface name missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_InvalidConfigSetting">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Invalid configuration setting: {0} ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_InvalidConnectionAgeLimitSetting">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Setting &apos;connectionAgeLimit&apos; must be 0 or greater. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_InvalidSweepFrequencySetting">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Setting &apos;sweepFrequency&apos; must be 0 or greater. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_MaxAttempts">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Parameter &apos;maxRetries&apos; must be 1 or greater. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_MethodNameMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Method name missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_OutPutPinNameMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Outpit pin property name missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_ServerUrlMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Server URL missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_TypeHasAlreadyAHandler">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die For type &apos;{0}&apos; is already a serialization handler registered. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_TypeIsNotAClass">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The provided implementation type is not a class. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_TypeIsNotAInterface">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The provided interface type is not a interface. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentOutOfRangeException_InvalidHttpPortRange">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The HTTP port must be set within the range 0-65535 liegen. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentOutOfRangeException_InvalidTcpPortRange">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The TCP port must be set within the range 0-65535 liegen. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.CryptoRemotingException_ClientConnectionInfoMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Client connection info missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.CryptoRemotingException_InvalidClientRequest">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Invalid client request: {0}. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.CryptoRemotingException_InvalidTransactionID">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Invalid secure transaction ID. May be caused by timeout. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.CryptoRemotingException_IVMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Initialization Vector from server missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.CryptoRemotingException_KeyChanged">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Public key changed since the message was encrypted. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.CryptoRemotingException_PublicKeyNotFound">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Public key missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.CryptoRemotingException_ServerRequiresEncryption">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Server requires encrypted connection for this client. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.CryptoRemotingException_SharedKeyMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die No public key transmitted. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.Format_Exception_InvalidAddressFormat">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Invalid format for &apos;address&apos; parameter: {0} ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.InvalidCredentials">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Invalid user name or password. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.InvalidSessionException_SessionIDInvalid">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Session ID &apos;{0}&apos; is invalid. Please log on first. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.KeyNotFoundException_CannotFindComponentForInterface">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Cannot find component for interface &apos;{0}&apos;. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.KeyNotFoundException_SerializationHandlerNotFound">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die No serialization handler is registered for type &apos;{0}&apos;. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.MissingMethodException_MethodNotFound">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Method not found: &apos;{0}&apos;. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.PasswordExpiredException_DefaultMessage">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Password is expired. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.RemotingException_ConnectionError">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Error connecting remote host: {0}. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.RemotingException_ErrorReceivingChannelInfo">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Error receiving channel information from remote host. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.RemotingException_ErrorSendingChannelInfo">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Error sending channel information to remote host. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.RemotingException_MessageSinkNotSet">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die No message sink set. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.RemotingException_NoAddressForReconnect">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die No remote address specified for reconnect. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.SecurityException_ContextInfoMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Context information is missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.SecurityException_CredentialsMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Credentials missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.SecurityException_PasswordMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Password missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.SecurityException_UserNameMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die User name missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.SecurityException_WindowsTokenMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Windows security token credential missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.SocketException_LostConnectionToServer">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Lost connection to server &apos;{0}&apos;. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.UserNotAuthenicatedByWindows">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die User is not authenticated by operating system. ähnelt.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.InterLinqContext">
             <summary>
             Abstract base class holding an <see cref="T:Zyan.InterLinq.IQueryHandler"/>.
             The usage of the <see cref="T:Zyan.InterLinq.InterLinqContext"/> is comparable
             with <see cref="T:System.Data.Linq.DataContext"/>.
             </summary>
             <example>
             The following code illustrates a possible implementation of <see cref="T:Zyan.InterLinq.InterLinqContext"/>.
             <code>
            	public class CompanyContext : InterLinqContext {
            		public CompanyContext(IQueryHandler queryHandler) : base(queryHandler) { }
            
            		public IQueryable&lt;Company&gt; Companies {
            			get { return QueryHander.Get&lt;Company&gt;(); }
            		}
            
            		public IQueryable&lt;Company&gt; Departments {
            			get { return QueryHander.Get&lt;Departments&gt;(); }
            		}
            
            		public IQueryable&lt;Company&gt; Employees {
            			get { return QueryHander.Get&lt;Employee&gt;(); }
            		}
            	}
             </code>
             </example>
        </member>
        <member name="M:Zyan.InterLinq.InterLinqContext.#ctor(Zyan.InterLinq.IQueryHandler)">
            <summary>
            Initializes this class.
            </summary>
            <param name="queryHandler"><see cref="T:Zyan.InterLinq.IQueryHandler"/> instance.</param>
        </member>
        <member name="P:Zyan.InterLinq.InterLinqContext.QueryHander">
            <summary>
            Gets the <see cref="T:Zyan.InterLinq.IQueryHandler"/>.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.ZyanClientQueryHandler">
            <summary>
            Client handler class managing Zyan connection to the InterLINQ Server.
            </summary>
            <seealso cref="T:Zyan.InterLinq.Communication.ClientQueryHandler"/>
            <seealso cref="T:Zyan.InterLinq.InterLinqQueryHandler"/>
            <seealso cref="T:Zyan.InterLinq.IQueryHandler"/>
        </member>
        <member name="M:Zyan.InterLinq.ZyanClientQueryHandler.#ctor(Zyan.Communication.ZyanConnection)">
            <summary>
            Creates ZyanClientQueryHandler instance.
            </summary>
            <param name="connection">Zyan connection.</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanClientQueryHandler.#ctor(Zyan.Communication.ZyanConnection,System.String)">
            <summary>
            Creates ZyanClientQueryHandler instance.
            </summary>
            <param name="connection">Zyan connection.</param>
            <param name="unqiueName">Unique component name</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanClientQueryHandler.#ctor(System.String)">
            <summary>
            Creates ZyanClientQueryHandler instance.
            </summary>
            <param name="serverUrl">URL where the Remote Objects will be published.</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanClientQueryHandler.Connect">
            <summary>
            Connects to the server.
            <see cref="T:Zyan.InterLinq.InterLinqQueryHandler"/>
            </summary>
            <seealso cref="M:Zyan.InterLinq.Communication.ClientQueryHandler.Connect"/>
        </member>
        <member name="P:Zyan.InterLinq.ZyanClientQueryHandler.ImplicitTransactionTransfer">
            <summary>
            Gets or sets a value indicating whether ambient transaction support is enabled.
            </summary>
            <value>
            	<c>true</c> if ambient transaction support; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zyan.InterLinq.ZyanClientQueryHandler.Connection">
            <summary>
            Gets the <see cref="T:Zyan.Communication.ZyanConnection"/> associated with the client query handler.
            </summary>
        </member>
        <member name="T:Zyan.Communication.CallInterceptionData">
            <summary>
            Beschreibt eine konkretee Aufrufabfangaktion.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptionData.#ctor(System.Object[],Zyan.Communication.InvokeRemoteMethodDelegate,System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Erstellt eine neue Instanz der CallInterceptionData-Klasse.
            </summary>
            <param name="parameters">Parameterwerte des abgefangenen Aufrufs</param>
            <param name="remoteInvoker">Delegat für den Aufruf von InvokeRemoteMethod (bei Bedarf)</param>
            <param name="remotingMessage">Remoting-nachricht</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptionData.MakeRemoteCall">
            <summary>
            Führt den entfernten Methodenaufruf aus.
            </summary>
            <returns>Rückgabewert</returns>
        </member>
        <member name="P:Zyan.Communication.CallInterceptionData.Intercepted">
            <summary>
            Gibt zurück, ob der Aufruf abgefangen wurde, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CallInterceptionData.ReturnValue">
            <summary>
            Gibt den zu verwendenden Rückgabewert zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CallInterceptionData.Parameters">
            <summary>
            Gibt ein Array der Parameterwerten zurück, mit welchen die abzufangende Methode aufgerufen wurde, oder legt sie fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Compression.CompressionMethod">
            <summary>
            Compression levels.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Compression.CompressionMethod.None">
            <summary>
            No compression.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Compression.CompressionMethod.Fast">
            <summary>
            Fast compression, poor ratio (LZF).
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Compression.CompressionMethod.Average">
            <summary>
            Average compression, better ratio (DeflateStream).
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Compression.CompressionMethod.Default">
            <summary>
            Default compression level is Average.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Compression.CommonHeaders.CompressionEnabled">
            <summary>Header to hold the compression state.</summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Compression.CommonHeaders.CompressionSupported">
            <summary>Header to hold the compression supported flag.</summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSinkProvider">
            <summary>
            Anbieter für die serverseitige Kanalsenke zur verschlüsselten Kommunikation.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSinkProvider.#ctor">
            <summary>
            Erzeugt eine neue Instanz von CryptoServerChannelSinkProvider.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Erzeugt eine neue Instanz von CryptoServerChannelSinkProvider.
            </summary>
            <param name="properties">Konfigurationseinstellungen (z.B. aus der App.config)</param>
            <param name="providerData">Optionale Anbieterdaten</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelReceiver)">
            <summary>
            Erzeugt eine Senkenkette.
            </summary>
            <param name="channel">Kanal, für welchen die Senkenkette erstellt werden soll</param>
            <returns>Verkettete Kanalsenke, oder null, wenn keine erstellt wurde</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSinkProvider.GetChannelData(System.Runtime.Remoting.Channels.IChannelDataStore)">
            <summary>
            Ruft Einstellungen des zu Grunde liegenden Kanals ab.
            </summary>
            <param name="channelData">Kanal-Einstellungen</param>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSinkProvider.Algorithm">
            <summary>
            Gets or sets the name of the symmetric encryption algorithm.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSinkProvider.Oaep">
            <summary>
            Gets or sets, if OEAP padding should be activated.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSinkProvider.RequireCryptoClient">
            <summary>
            Gibt zurück, ob der zwingend auch verschlüsseln muss, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSinkProvider.Next">
            <summary>
            Gibt den nächsten Senkenanbieter zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink">
            <summary>
            Serverseitige Kanalsenke für verschlüsselte Kommunikation.
            <remarks>
            Benötigt auf der Clientseite CryptoClientChannelSink als Gegenstück!
            </remarks>
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.#ctor(System.Runtime.Remoting.Channels.IServerChannelSink,System.String,System.Boolean,System.Double,System.Double,System.Boolean,System.Net.IPAddress[])">
            <summary>Erstellt eine neue Instanz von CryptoServerChannelSink.</summary>
            <param name="nextSink">Nächste Kanalsenke in der Senkenkette</param>
            <param name="algorithm">Name des symmetrischen Verschlüsselungsalgorithmus</param>
            <param name="oaep">Gibt an, ob OAEP-Padding verwendet werden soll, oder nicht</param>
            <param name="connectionAgeLimit">Lebenszeit einer Client-Verbindung in Sekunden</param>
            <param name="sweeperFrequency">Intervall des Aufräumvorgangs in Sekunden</param>
            <param name="requireCryptoClient">Gibt an, ob clientseitig eine Kanalsenke für verschlüsselte Kommunikation vorhanden sein muss</param>
            <param name="securityExemptionList">IP-Adressen Ausnahmeliste</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.MakeSharedKey(System.Guid,System.Runtime.Remoting.Channels.ITransportHeaders,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            Erzeugt den gemeinsamen Schlüssel und bereitet dessen Übertragung zum Client vor.
            </summary>
            <param name="transactID">Sicherheitstransaktionskennung</param>
            <param name="requestHeaders">Anfrage-Header vom Client</param>
            <param name="responseMsg">Antwortnachricht</param>
            <param name="responseHeaders">Antwort-Header</param>
            <param name="responseStream">Antwort-Datenstrom</param>
            <returns>Status</returns>		
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.ProcessEncryptedMessage(System.Guid,System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            Entschlüsselt die eingehende Nachricht vom Client.
            </summary>
            <param name="transactID">Sicherheitstransaktionskennung</param>
            <param name="sinkStack">Senkenstapel</param>
            <param name="requestMsg">Anfrage-Nachricht vom Client</param>
            <param name="requestHeaders">Anfrage-Header vom Cient</param>
            <param name="requestStream">Anfrage-Datenstrom</param>
            <param name="responseMsg">Antwort-Nachricht</param>
            <param name="responseHeaders">Antwort-Header</param>
            <param name="responseStream">Antwort-Datenstrom</param>
            <returns>Verarbeitungsstatus</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.IsExistingSecurityTransaction(System.Guid)">
            <summary>
            Prüft, ob eine bestimmte Sicherheitstransaktionskennung bereits bekannt ist.
            </summary>
            <param name="transactID">Sicherheitstransaktionskennung</param>
            <returns>Wahr, wenn die Sicherheitstransaktion bekannt ist, ansonsten Falsch</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.SendEmptyToClient(Zyan.Communication.ChannelSinks.Encryption.SecureTransactionStage,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            Erzeugt eine leere Antwortnachricht.
            </summary>
            <param name="transactionStage">Art des aktuellen Transaktionsschritts</param>
            <param name="responseMsg">Antwort-Nachricht</param>
            <param name="responseHeaders">Antwort-Header</param>
            <param name="responseStream">Antwort-Datenstrom</param>
            <returns>Verarbeitungsstatus</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            Verarbeitet eine einzele Clientanfrage
            </summary>
            <param name="sinkStack">Aufrufstapel der Kanalsenken</param>
            <param name="requestMsg">Anfrage-nachricht</param>
            <param name="requestHeaders">Anfrage-Header</param>
            <param name="requestStream">Anfrage-Datenstrom</param>
            <param name="responseMsg">Antwort-Nachricht</param>
            <param name="responseHeaders">Antwort-Header</param>
            <param name="responseStream">Antwort-Datenstrom</param>
            <returns>Status serverseitigen Verarbeitung der Nachricht insgesamt</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.RequireEncryption(System.Net.IPAddress)">
            <summary>
            Prüft, ob für die Kommunikation mit einem bestimmten Client zwingend Verschlüsselung erforderlich ist, oder nicht.
            </summary>
            <param name="clientAddress">IP-Adresse des Clients</param>
            <returns>Wahr, wenn Verschlüsselung erforderlich ist, ansonsten Falsch</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>
            Gibt den Antwort-Datenstrom zurück.
            </summary>
            <param name="sinkStack">Senkenstapel</param>
            <param name="state">Optionale Statusinformationen</param>
            <param name="msg">Remoting-Nachricht</param>
            <param name="headers">Header-Informationen</param>
            <returns>Antwort-Datenstrom</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            Fordert die Verarbeitung der Antwortnachricht von dieser Senke an, wenn die Anfragenachricht asynchron verarbeitet wurde.
            </summary>
            <param name="sinkStack">Senkenstapel</param>
            <param name="state">Zustand</param>
            <param name="msg">antwort-Nachricht</param>
            <param name="headers">Antwort-Header</param>
            <param name="stream">Antwort-Datenstrom</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.StartConnectionSweeper">
            <summary>
            Startet den Zeitgeber für den Aufräumvorgang.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.SweepConnections(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Räumt abgelaufende Client-Verbindungen weg.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.NextChannelSink">
            <summary>
            Gibt die nächste Kanalsenke in der Aufrufkette zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSinkProvider">
            <summary>
            Anbieter der clientseitigen Kanalsenke für verschlüsselte Übertragung.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSinkProvider.#ctor">
            <summary>
            Erzeugt eine neue Instanz von CryptoClientChannelSinkProvider.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Erzeugt eine neue Instanz von CryptoClientChannelSinkProvider.
            </summary>
            <param name="properties">Konfigurationseinstellungen (z.B. aus der App.config)</param>
            <param name="providerData">Optionale Anbieterdaten</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelSender,System.String,System.Object)">
            <summary>
            Erzeugt eine Senkenkette.
            </summary>
            <param name="channel">Kanal, welcher den aktuellen Senkenanbieter erzeugt hat</param>
            <param name="url">URL des entfernten Objekts</param>
            <param name="remoteChannelData">Beschreibung des Serverkanals</param>
            <returns>Verkettete Kanalsenke, oder null, wenn keine erstellt wurde</returns>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSinkProvider.Algorithm">
            <summary>
            Gets or sets the name of the symmetric encryption algorithm.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSinkProvider.Oaep">
            <summary>
            Gets or sets, if OEAP padding should be activated.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSinkProvider.MaxAttempts">
            <summary>
            Gets or sets the maximum number of attempts when trying to establish a encrypted conection.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSinkProvider.Next">
            <summary>
            Gibt den nächsten Senkenanbieter zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Notification.NotificationReceiver">
            <summary>
            Clientseitige Empfangsvorrichtung für Benachrichtigungen vom Server.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Notification.NotificationReceiver._clientHandler">
            <summary>
            Ereignis: Bei Benachrichtigung vom Server.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationReceiver.#ctor(System.String,System.EventHandler{Zyan.Communication.Notification.NotificationEventArgs})">
            <summary>
            Erzeugt eine neue Instanz von NotificationReceiver.
            </summary>
            <param name="eventName">Ereignisname</param>
            <param name="clientHandler">Delegat auf Client-Ereignisprozedur</param>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationReceiver.FireNotifyEvent(System.Object,Zyan.Communication.Notification.NotificationEventArgs)">
            <summary>
            Feuert das Notify-Ereignis auf dem Client.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationReceiver.InitializeLifetimeService">
            <summary>
            Inizialisiert die Lebenszeitsteuerung der Instanz.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationReceiver.Dispose">
            <summary>
            Gibt verwendete Ressourcen frei.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Notification.NotificationReceiver.EventName">
            <summary>
            Gibt den Ereignisnamen zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.BeforeInvokeEventArgs">
            <summary>
            Beschreibt Ereignisargumente für Aufrufereignisse mit Abbruchmöglichkeit.
            </summary>
        </member>
        <member name="M:Zyan.Communication.BeforeInvokeEventArgs.ToString">
            <summary>
            Gibt den Inhalt des Objekts als Zeichenkette ausgedrückt zurück.
            </summary>
            <returns>Zeichenkette</returns>
        </member>
        <member name="P:Zyan.Communication.BeforeInvokeEventArgs.TrackingID">
            <summary>
            Gibt den Nachverfolgungsschlüssel des Methodenaufrufs zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.BeforeInvokeEventArgs.Cancel">
            <summary>
            Gibt zurück, ob der Aufruf abgebrochen werden soll, oder legt diest fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.BeforeInvokeEventArgs.CancelException">
            <summary>
            Gibt die Ausnahme für den Abbruch zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.BeforeInvokeEventArgs.InterfaceName">
            <summary>
            Gibt den Namen der Komponentenschnittstelle zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.BeforeInvokeEventArgs.DelegateCorrelationSet">
            <summary>
            Gibt den Korrelationssatz für Ausgangs-Pins zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.BeforeInvokeEventArgs.MethodName">
            <summary>
            Gibt den Methodennamen zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.BeforeInvokeEventArgs.Arguments">
            <summary>
            Gibt die Methodenargumente zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.InvokeCanceledEventArgs">
            <summary>
            Beschreibt Ereignisargumente für Aufrufabbruch-Ereignisse.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvokeCanceledEventArgs.TrackingID">
            <summary>
            Gibt den Nachverfolgungsschlüssel des Methodenaufrufs zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvokeCanceledEventArgs.CancelException">
            <summary>
            Gibt die Ausnahme für den Abbruch zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.Expressions.SerializableMemberInitExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.MemberInitExpression"/>.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableMemberInitExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableMemberInitExpression.#ctor(System.Linq.Expressions.MemberInitExpression,Zyan.InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.MemberInitExpression"/> and an <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:Zyan.InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:Zyan.InterLinq.Expressions.SerializableMemberInitExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableMemberInitExpression.NewExpression">
            <summary>
            See <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression"/>
            </summary>
        </member>
        <member name="P:Zyan.InterLinq.Expressions.SerializableMemberInitExpression.Bindings">
            <summary>
            See <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings"/>
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.ZyanExtensions">
            <summary>
            Extension methods for easier InterLINQ handlers access.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.CreateQueryableProxy(Zyan.Communication.ZyanConnection,System.Boolean)">
            <summary>
            Creates IQueryable proxy for Zyan connection
            </summary>
            <param name="connection">ZyanConnection</param>
            <param name="implicitTransactionTransfer">Transfer ambient transactions</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.CreateQueryableProxy(Zyan.Communication.ZyanConnection)">
            <summary>
            Creates IQueryable proxy for Zyan connection
            </summary>
            <param name="connection">ZyanConnection</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.CreateQueryableProxy(Zyan.Communication.ZyanConnection,System.String,System.Boolean)">
            <summary>
            Creates IQueryable proxy for Zyan connection
            </summary>
            <param name="connection">ZyanConnection</param>
            <param name="unqiueName">Unique component name</param>
            <param name="implicitTransactionTransfer">Transfer ambient transactions</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.CreateQueryableProxy(Zyan.Communication.ZyanConnection,System.String)">
            <summary>
            Creates IQueryable proxy for Zyan connection
            </summary>
            <param name="connection">ZyanConnection</param>
            <param name="unqiueName">Unique component name</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.CreateServerHandler``1(``0)">
            <summary>
            Creates function returning ZyanServerQueryHandler for the given instance
            </summary>
            <typeparam name="T">Type (either IObjectSource or IEntitySource)</typeparam>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.CreateServerHandler``1">
            <summary>
            Creates function returning ZyanServerQueryHandler for the given type
            </summary>
            <typeparam name="T">Type (either IObjectSource or IEntitySource)</typeparam>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent``1(Zyan.Communication.ZyanComponentHost)">
            <summary>
            Registers IQueryable component
            </summary>
            <typeparam name="T">Component type</typeparam>
            <param name="host">Component host</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent``1(Zyan.Communication.ZyanComponentHost,Zyan.Communication.ActivationType)">
            <summary>
            Registers IQueryable component
            </summary>
            <typeparam name="T">Component type</typeparam>
            <param name="host">Component host</param>
            <param name="activationType">Activation type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent``1(Zyan.Communication.ZyanComponentHost,System.String)">
            <summary>
            Registers IQueryable component
            </summary>
            <typeparam name="T">Component type</typeparam>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent``1(Zyan.Communication.ZyanComponentHost,``0)">
            <summary>
            Registers IQueryable component
            </summary>
            <typeparam name="T">Component type</typeparam>
            <param name="host">Component host</param>
            <param name="instance">Component instance</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent``1(Zyan.Communication.ZyanComponentHost,System.String,``0)">
            <summary>
            Registers IQueryable component
            </summary>
            <typeparam name="T">Component type</typeparam>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="instance">Component instance</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent``1(Zyan.Communication.ZyanComponentHost,System.String,Zyan.Communication.ActivationType)">
            <summary>
            Registers IQueryable component
            </summary>
            <typeparam name="T">Component type</typeparam>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="activationType">Activation type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryHandler(Zyan.Communication.ZyanComponentHost,Zyan.InterLinq.IQueryHandler)">
            <summary>
            Registers IQueryHandler as IQueryable component
            </summary>
            <param name="host">Component host</param>
            <param name="queryHandler">Query handler</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryHandler(Zyan.Communication.ZyanComponentHost,System.String,Zyan.InterLinq.IQueryHandler)">
            <summary>
            Registers IQueryHandler as IQueryable component
            </summary>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="queryHandler">Query handler</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.Func{System.Type,System.Collections.IEnumerable})">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="getMethod">Method returning IEnumerable instances of the given type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.Func{System.Type,System.Linq.IQueryable})">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="getMethod">Method returning IQueryable instances of the given type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.String,System.Func{System.Type,System.Collections.IEnumerable})">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="getMethod">Method returning IEnumerable instances of the given type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.String,System.Func{System.Type,System.Linq.IQueryable})">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="getMethod">Method returning IQueryable instances of the given type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.String,System.Func{System.Type,System.Collections.IEnumerable},Zyan.Communication.ActivationType)">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="getMethod">Method returning IEnumerable instances of the given type</param>
            <param name="activationType">Activation type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.String,System.Func{System.Type,System.Linq.IQueryable},Zyan.Communication.ActivationType)">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="getMethod">Method returning IQueryable instances of the given type</param>
            <param name="activationType">Activation type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.Func{Zyan.InterLinq.IObjectSource})">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="factoryMethod">Factory method to create component instance</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.Func{Zyan.InterLinq.IEntitySource})">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="factoryMethod">Factory method to create component instance</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.String,System.Func{Zyan.InterLinq.IObjectSource})">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="factoryMethod">Factory method to create component instance</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.String,System.Func{Zyan.InterLinq.IEntitySource})">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="factoryMethod">Factory method to create component instance</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.Func{Zyan.InterLinq.IObjectSource},Zyan.Communication.ActivationType)">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="factoryMethod">Factory method to create component instance</param>
            <param name="activationType">Activation type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.Func{Zyan.InterLinq.IEntitySource},Zyan.Communication.ActivationType)">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="factoryMethod">Factory method to create component instance</param>
            <param name="activationType">Activation type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.String,System.Func{Zyan.InterLinq.IObjectSource},Zyan.Communication.ActivationType)">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="factoryMethod">Factory method to create component instance</param>
            <param name="activationType">Activation type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.String,System.Func{Zyan.InterLinq.IEntitySource},Zyan.Communication.ActivationType)">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="factoryMethod">Factory method to create component instance</param>
            <param name="activationType">Activation type</param>
        </member>
        <member name="T:Zyan.Communication.IComponentCatalogExtensions">
            <summary>
            Component catalog shorter method overloads.
            </summary>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.RegisterComponent``2(Zyan.Communication.IComponentCatalog)">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <typeparam name="T">Implementation type of the component</typeparam>
            <param name="catalog">IComponentCatalog instance</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.RegisterComponent``2(Zyan.Communication.IComponentCatalog,System.Action{System.Object})">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <typeparam name="T">Implementation type of the component</typeparam>
            <param name="catalog">IComponentCatalog instance</param>
            <param name="cleanUpHandler">Delegate for external clean up method</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.RegisterComponent``2(Zyan.Communication.IComponentCatalog,System.String)">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <typeparam name="T">Implementation type of the component</typeparam>
            <param name="catalog">IComponentCatalog instance</param>
            <param name="uniqueName">Unique component name</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.RegisterComponent``2(Zyan.Communication.IComponentCatalog,System.String,System.Action{System.Object})">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <typeparam name="T">Implementation type of the component</typeparam>
            <param name="catalog">IComponentCatalog instance</param>
            <param name="uniqueName">Unique component name</param>
            <param name="cleanUpHandler">Delegate for external clean up method</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.RegisterComponent``2(Zyan.Communication.IComponentCatalog,Zyan.Communication.ActivationType)">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <typeparam name="T">Implementation type of the component</typeparam>
            <param name="catalog">IComponentCatalog instance</param>
            <param name="activationType">Activation type (SingleCall/Singleton)</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.RegisterComponent``2(Zyan.Communication.IComponentCatalog,Zyan.Communication.ActivationType,System.Action{System.Object})">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <typeparam name="T">Implementation type of the component</typeparam>
            <param name="catalog">IComponentCatalog instance</param>
            <param name="activationType">Activation type (SingleCall/Singleton)</param>
            <param name="cleanUpHandler">Delegate for external clean up method</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.RegisterComponent``2(Zyan.Communication.IComponentCatalog,System.String,Zyan.Communication.ActivationType)">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <typeparam name="T">Implementation type of the component</typeparam>
            <param name="catalog">IComponentCatalog instance</param>
            <param name="uniqueName">Unique component name</param>
            <param name="activationType">Activation type (SingleCall/Singleton)</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.RegisterComponent``1(Zyan.Communication.IComponentCatalog,System.Func{System.Object})">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <param name="catalog">IComponentCatalog instance</param>
            <param name="factoryMethod">Delegate of factory method for external instance creation</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.RegisterComponent``1(Zyan.Communication.IComponentCatalog,System.Func{System.Object},System.Action{System.Object})">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <param name="catalog">IComponentCatalog instance</param>
            <param name="factoryMethod">Delegate of factory method for external instance creation</param>
            <param name="cleanUpHandler">Delegate for external clean up method</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.RegisterComponent``1(Zyan.Communication.IComponentCatalog,System.String,System.Func{System.Object})">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <param name="catalog">IComponentCatalog instance</param>
            <param name="uniqueName">Unique component name</param>
            <param name="factoryMethod">Delegate of factory method for external instance creation</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.RegisterComponent``1(Zyan.Communication.IComponentCatalog,System.String,System.Func{System.Object},System.Action{System.Object})">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <param name="catalog">IComponentCatalog instance</param>
            <param name="uniqueName">Unique component name</param>
            <param name="factoryMethod">Delegate of factory method for external instance creation</param>
            <param name="cleanUpHandler">Delegate for external clean up method</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.RegisterComponent``1(Zyan.Communication.IComponentCatalog,System.Func{System.Object},Zyan.Communication.ActivationType)">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <param name="catalog">IComponentCatalog instance</param>
            <param name="factoryMethod">Delegate of factory method for external instance creation</param>
            <param name="activationType">Activation type (SingleCall/Singleton)</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.RegisterComponent``1(Zyan.Communication.IComponentCatalog,System.Func{System.Object},Zyan.Communication.ActivationType,System.Action{System.Object})">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <param name="catalog">IComponentCatalog instance</param>
            <param name="factoryMethod">Delegate of factory method for external instance creation</param>
            <param name="activationType">Activation type (SingleCall/Singleton)</param>
            <param name="cleanUpHandler">Delegate for external clean up method</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.RegisterComponent``1(Zyan.Communication.IComponentCatalog,System.String,System.Func{System.Object},Zyan.Communication.ActivationType)">
            <summary>
            Registers a component in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <param name="catalog">IComponentCatalog instance</param>
            <param name="uniqueName">Unique component name</param>
            <param name="factoryMethod">Delegate of factory method for external instance creation</param>
            <param name="activationType">Activation type (SingleCall/Singleton)</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.RegisterComponent``2(Zyan.Communication.IComponentCatalog,``1)">
            <summary>
            Registeres a component instance in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <typeparam name="T">Implementation type of the component</typeparam>
            <param name="catalog">IComponentCatalog instance</param>
            <param name="instance">Component instance</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.RegisterComponent``2(Zyan.Communication.IComponentCatalog,``1,System.Action{System.Object})">
            <summary>
            Registeres a component instance in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <typeparam name="T">Implementation type of the component</typeparam>
            <param name="catalog">IComponentCatalog instance</param>
            <param name="instance">Component instance</param>
            <param name="cleanUpHandler">Delegate for external clean up method</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.RegisterComponent``2(Zyan.Communication.IComponentCatalog,System.String,``1)">
            <summary>
            Registeres a component instance in the component catalog.
            </summary>
            <typeparam name="I">Interface type of the component</typeparam>
            <typeparam name="T">Implementation type of the component</typeparam>
            <param name="catalog">IComponentCatalog instance</param>
            <param name="uniqueName">Unique component name</param>
            <param name="instance">Component instance</param>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.GetRegistration(Zyan.Communication.IComponentCatalog,System.Type)">
            <summary>
            Gets registration data for a specified component by its interface type.
            </summary>
            <param name="catalog">IComponentCatalog instance</param>
            <param name="interfaceType">Interface type of the component</param>
            <returns>Component registration</returns>
        </member>
        <member name="M:Zyan.Communication.IComponentCatalogExtensions.UnregisterComponent``1(Zyan.Communication.IComponentCatalog)">
            <summary>
            Deletes a component registration.
            </summary>
            <typeparam name="I">Interface type of the component to unregister</typeparam>
            <param name="catalog">IComponentCatalog instance</param>
        </member>
        <member name="T:Zyan.Communication.Delegates.FilteredCustomHandler`1">
            <summary>
            Represents filtered event handler of a custom delegate type.
            </summary>
            <typeparam name="TDelegate">The type of the event handler delegate.</typeparam>
        </member>
        <member name="M:Zyan.Communication.Delegates.FilteredCustomHandler`1.#ctor(`0,Zyan.Communication.Delegates.IEventFilter,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.Delegates.FilteredCustomHandler`1"/> class.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="eventFilter">The event filter.</param>
            <param name="filterLocally">Whether the filter should also work when used locally.</param>
        </member>
        <member name="M:Zyan.Communication.Delegates.FilteredCustomHandler`1.Invoke(System.Object[])">
            <summary>
            Untyped Invoke() method.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Delegates.FilteredCustomHandler`1.InvokeMethodInfo">
            <summary>
            MethodInfo for the private Invoke(args) method.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Delegates.FilteredCustomHandler`1.op_Implicit(Zyan.Communication.Delegates.FilteredCustomHandler{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:Zyan.Communication.Delegates.FilteredCustomHandler`1"/>
            to <see cref="T:System.EventHandler"/>.
            </summary>
            <param name="filteredEventHandler">The filtered event handler.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="P:Zyan.Communication.Delegates.FilteredCustomHandler`1.TypedInvoke">
            <summary>
            Strong-typed Invoke() method, built dynamically.
            Calls the untyped Invoke() method to do the real job.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.FilteredCustomHandler`1.EventHandler">
            <summary>
            Gets the event handler.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.FilteredCustomHandler`1.EventFilter">
            <summary>
            Gets the event filter.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.FilteredCustomHandler`1.FilterLocally">
            <summary>
            Gets or sets a value indicating whether this event filter should also work locally.
            </summary>
        </member>
        <member name="T:Zyan.Communication.CallInterceptorBuilder`1">
            <summary>
            Strong-typed builder for individual call interceptors.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorBuilder`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.CallInterceptorBuilder`1"/> class.
            </summary>
            <param name="uniqueName">Unique name of the intercepted component.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.CallInterceptorBuilder`1"/> class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorBuilder`1.Action(System.Linq.Expressions.Expression{System.Action{`0}},Zyan.Communication.CallInterceptionDelegate)">
            <summary>
            Creates new CallInterceptor for the given method.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorBuilder`1.Func``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Zyan.Communication.CallInterceptionData,``0})">
            <summary>
            Creates new CallInterceptor for the given method.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorBuilder`1.Action``1(System.Linq.Expressions.Expression{System.Action{`0,``0}},System.Action{Zyan.Communication.CallInterceptionData,``0})">
            <summary>
            Creates new CallInterceptor for the given method.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorBuilder`1.Func``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1}},System.Func{Zyan.Communication.CallInterceptionData,``0,``1})">
            <summary>
            Creates new CallInterceptor for the given method.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorBuilder`1.Action``2(System.Linq.Expressions.Expression{System.Action{`0,``0,``1}},System.Action{Zyan.Communication.CallInterceptionData,``0,``1})">
            <summary>
            Creates new CallInterceptor for the given method.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorBuilder`1.Func``3(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2}},System.Func{Zyan.Communication.CallInterceptionData,``0,``1,``2})">
            <summary>
            Creates new CallInterceptor for the given method.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorBuilder`1.Action``3(System.Linq.Expressions.Expression{System.Action{`0,``0,``1,``2}},System.Action{Zyan.Communication.CallInterceptionData,``0,``1,``2})">
            <summary>
            Creates new CallInterceptor for the given method.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorBuilder`1.Func``4(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3}},System.Func{Zyan.Communication.CallInterceptionData,``0,``1,``2,``3})">
            <summary>
            Creates new CallInterceptor for the given method.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorBuilder`1.Action``4(System.Linq.Expressions.Expression{Zyan.Communication.Toolbox.Action{`0,``0,``1,``2,``3}},Zyan.Communication.Toolbox.Action{Zyan.Communication.CallInterceptionData,``0,``1,``2,``3})">
            <summary>
            Creates new CallInterceptor for the given method.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorBuilder`1.Func``5(System.Linq.Expressions.Expression{Zyan.Communication.Toolbox.Func{`0,``0,``1,``2,``3,``4}},Zyan.Communication.Toolbox.Func{Zyan.Communication.CallInterceptionData,``0,``1,``2,``3,``4})">
            <summary>
            Creates new CallInterceptor for the given method.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorBuilder`1.Action``5(System.Linq.Expressions.Expression{Zyan.Communication.Toolbox.Action{`0,``0,``1,``2,``3,``4}},Zyan.Communication.Toolbox.Action{Zyan.Communication.CallInterceptionData,``0,``1,``2,``3,``4})">
            <summary>
            Creates new CallInterceptor for the given method.
            </summary>
            <param name="expression">LINQ expression of the method to intercept.</param>
            <param name="handler">Interception handler.</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorBuilder`1.CheckNotNull``1(``0)">
            <summary>
            Checks whether the given handler is not null.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorBuilder`1.Parse(System.Linq.Expressions.LambdaExpression,System.Reflection.MemberTypes@,System.String@)">
            <summary>
            Parses lambda expression and extracts memberType and memberName.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CallInterceptorBuilder`1.UniqueName">
            <summary>
            Gets the unique name of the intercepted component.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.TypeComparer`2">
            <summary>
            Helper class for duck typing support.
            </summary>
            <typeparam name="I">Interface type</typeparam>
            <typeparam name="T">Component type</typeparam>
        </member>
        <member name="T:Zyan.Communication.Protocols.ServerProtocolSetupExtensions">
            <summary>
            Contains extension methods for server protocol setups.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.ServerProtocolSetupExtensions.AddClientSink(Zyan.Communication.Protocols.IServerProtocolSetup,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
            <summary>
            Adds a specified client sink provider into the client sink chain.
            </summary>
            <param name="protocolSetup">Protocol setup</param>
            <param name="clientSinkProvider">Client sink provider to be added</param>
            <returns>Protocol setup</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ServerProtocolSetupExtensions.AddServerSink(Zyan.Communication.Protocols.IServerProtocolSetup,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
            <summary>
            Adds a specified server sink provider into the server sink chain.
            </summary>
            <param name="protocolSetup">Protocol setup</param>
            <param name="serverSinkProvider">Server sink provider to be added</param>
            <returns>Protocol setup</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ServerProtocolSetupExtensions.AddClientSinkBeforeFormatter(Zyan.Communication.Protocols.IServerProtocolSetup,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
            <summary>
            Adds a specified client sink provider into the client sink chain before the formatter.
            </summary>
            <param name="protocolSetup">Protocol setup</param>
            <param name="clientSinkProvider">Client sink provider to be added</param>
            <returns>Protocol setup</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ServerProtocolSetupExtensions.AddClientSinkAfterFormatter(Zyan.Communication.Protocols.IServerProtocolSetup,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
            <summary>
            Adds a specified client sink provider into the client sink chain after the formatter.
            </summary>
            <param name="protocolSetup">Protocol setup</param>
            <param name="clientSinkProvider">Client sink provider to be added</param>
            <returns>Protocol setup</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ServerProtocolSetupExtensions.AddServerSinkBeforeFormatter(Zyan.Communication.Protocols.IServerProtocolSetup,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
            <summary>
            Adds a specified server sink provider into the server sink chain before the formatter.
            </summary>
            <param name="protocolSetup">Protocol setup</param>
            <param name="serverSinkProvider">Server sink provider to be added</param>
            <returns>Protocol setup</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ServerProtocolSetupExtensions.AddServerSinkAfterFormatter(Zyan.Communication.Protocols.IServerProtocolSetup,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
            <summary>
            Adds a specified server sink provider into the server sink chain after the formatter.
            </summary>
            <param name="protocolSetup">Protocol setup</param>
            <param name="serverSinkProvider">Server sink provider to be added</param>
            <returns>Protocol setup</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ServerProtocolSetupExtensions.GetClientFormatter(Zyan.Communication.Protocols.IServerProtocolSetup)">
            <summary>
            Returns the configured formatter from the client sink chain of a specified client protocol setup.
            </summary>
            <param name="protocolSetup">Protocol setup</param>
            <returns>client formatter sink</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ServerProtocolSetupExtensions.GetServerFormatter(Zyan.Communication.Protocols.IServerProtocolSetup)">
            <summary>
            Returns the configured formatter from the server sink chain of a specified client protocol setup.
            </summary>
            <param name="protocolSetup">Protocol setup</param>
            <returns>server formatter sink</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.ServerProtocolSetupExtensions.AddChannelSetting(Zyan.Communication.Protocols.IServerProtocolSetup,System.String,System.Object)">
            <summary>
            Adds a single channel setting.
            </summary>
            <param name="protocolSetup">Protocol setup</param>
            <param name="name">Name of channel setting (example: "port")</param>
            <param name="value">Value of channel setting (example: 8080)</param>
            <returns></returns>
        </member>
        <member name="T:Zyan.Communication.Delegates.DynamicWire`1">
            <summary>
            Strongly typed wrapper for DelegateInterceptor.
            </summary>
            <typeparam name="T">Delegate type.</typeparam>
        </member>
        <member name="M:Zyan.Communication.Delegates.DynamicWire`1.#ctor">
            <summary>
            Initializes <see cref="T:Zyan.Communication.Delegates.DynamicWire`1"/> instance.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.DynamicWire`1.In">
            <summary>
            Dynamic wire delegate.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Delegates.DynamicWire`1.InDelegate">
            <summary>
            Gets the untyped In delegate.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Compression.ICompressible">
            <summary>
            The ICompressible interface implements a property that returns a flag,
            which determines if the request or response should be compressed.
            This interface is used in conjuction with the compression sink implementation
            and allows to determine dynamically if the request or response is
            to be compressed.
            </summary>
            <remarks>
            The following is the order, in which the criteria are evaluated to determine
            if the request or response is to be compressed: Threshold should be greater than
            zero. NonCompressible marks the object as an exempt. If object size is
            greater than threshold and not marked as NonCompressible, the ICompressible is evaluated.
            </remarks>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Compression.ICompressible.PerformCompression">
            <summary>
            Gets a value indicating whether the data can be compressed.
            </summary>
            <value>
              <c>true</c> if the data should be compressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Compression.CompressionClientChannelSink.#ctor(System.Runtime.Remoting.Channels.IClientChannelSink,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zyan.Communication.ChannelSinks.Compression.CompressionClientChannelSink"/> class.
            </summary>
            <param name="nextSink">Next sink.</param>
            <param name="compressionThreshold">Compression threshold. If 0, compression is disabled globally.</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Compression.CompressionClientChannelSink.AsyncProcessRequest(System.Runtime.Remoting.Channels.IClientChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            Requests asynchronous processing of a method call on the current sink.
            </summary>
            <param name="sinkStack">A stack of channel sinks that called this sink.</param>
            <param name="msg">The message to process.</param>
            <param name="headers">The headers to add to the outgoing message heading to the server.</param>
            <param name="stream">The stream headed to the transport sink.</param>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Compression.CompressionClientChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            Requests asynchronous processing of a response to a method call on the current sink.
            </summary>
            <param name="sinkStack">A stack of sinks that called this sink.</param>
            <param name="state">Information generated on the request side that is associated with this sink.</param>
            <param name="headers">The headers retrieved from the server response stream.</param>
            <param name="stream">The stream coming back from the transport sink.</param>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Compression.CompressionClientChannelSink.GetRequestStream(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>
            Returns the <see cref="T:System.IO.Stream"/> onto which the provided message is to be serialized. Always returns null.
            </summary>
            <param name="msg">The <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage"/> containing details about the method call.</param>
            <param name="headers">The headers to add to the outgoing message heading to the server.</param>
            <returns>
            The <see cref="T:System.IO.Stream"/> onto which the provided message is to be serialized.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Compression.CompressionClientChannelSink.IsCompressionExempt(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Returns true if the message contains the compression exempt parameters, marked as NonCompressible.
            </summary>
            <param name="msg">Message</param>
            <returns>True if the message should not be compressed.</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Compression.CompressionClientChannelSink.ProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            Requests message processing from the current sink.
            </summary>
            <param name="msg">The message to process.</param>
            <param name="requestHeaders">The headers to add to the outgoing message heading to the server.</param>
            <param name="requestStream">The stream headed to the transport sink.</param>
            <param name="responseHeaders">When this method returns, contains a <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders"/> interface that holds the headers that the server returned. This parameter is passed uninitialized.</param>
            <param name="responseStream">When this method returns, contains a <see cref="T:System.IO.Stream"/> coming back from the transport sink. This parameter is passed uninitialized.</param>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Compression.CompressionClientChannelSink.NextChannelSink">
            <summary>
            Gets the next client channel sink in the client sink chain.
            </summary>
            <returns>The next client channel sink in the client sink chain.</returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
        </member>
    </members>
</doc>
