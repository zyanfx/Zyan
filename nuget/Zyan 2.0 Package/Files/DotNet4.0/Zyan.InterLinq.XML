<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zyan.InterLinq</name>
    </assembly>
    <members>
        <member name="T:Zyan.InterLinq.ZyanObjectQueryHandler">
            <summary>
            Simple IEnumerable POCO server query handler
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.ZyanQueryHandler">
            <summary>
            Abstract query handler implementation
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.ZyanClientQueryHandler">
            <summary>
            Client handler class managing Zyan connection to the InterLINQ Server.
            </summary>
            <seealso cref="T:InterLinq.Communication.ClientQueryHandler"/>
            <seealso cref="T:InterLinq.InterLinqQueryHandler"/>
            <seealso cref="T:InterLinq.IQueryHandler"/>
        </member>
        <member name="M:Zyan.InterLinq.ZyanClientQueryHandler.#ctor(Zyan.Communication.ZyanConnection)">
            <summary>
            Creates ZyanClientQueryHandler instance.
            </summary>
            <param name="connection">Zyan connection.</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanClientQueryHandler.#ctor(Zyan.Communication.ZyanConnection,System.String)">
            <summary>
            Creates ZyanClientQueryHandler instance.
            </summary>
            <param name="connection">Zyan connection.</param>
            <param name="unqiueName">Unique component name</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanClientQueryHandler.#ctor(System.String)">
            <summary>
            Creates ZyanClientQueryHandler instance.
            </summary>
            <param name="serverUrl">URL where the Remote Objects will be published.</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanClientQueryHandler.Connect">
            <summary>
            Connects to the server.
            <see cref="T:InterLinq.InterLinqQueryHandler"/>
            </summary>
            <seealso cref="M:InterLinq.Communication.ClientQueryHandler.Connect"/>
        </member>
        <member name="T:Zyan.InterLinq.IBaseSource">
            <summary>
            Base interface the built-in Linq support
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.ZyanEntityQueryHandler">
            <summary>
            Simple IQueryable server query handler
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.IObjectSource">
            <summary>
            Interface required for the built-in Linq to objects support
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.IEntitySource">
            <summary>
            Interface required for the built-in Linq to entities support
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.ZyanServerQueryHandler">
            <summary>
            Provides methods to communicate with the InterLINQ service over Zyan. 
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.ZyanServerQueryHandler.#ctor(InterLinq.IQueryHandler)">
            <summary>
            Creates ZyanServerQueryHandler instance.
            </summary>
            <param name="innerHandler">Inner Handler of this Server</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanServerQueryHandler.#ctor(System.Func{System.Type,System.Collections.IEnumerable})">
            <summary>
            Creates ZyanServerQueryHandler instance.
            </summary>
            <param name="handler">IEnumerable delegate</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanServerQueryHandler.#ctor(System.Func{System.Type,System.Linq.IQueryable})">
            <summary>
            Creates ZyanServerQueryHandler instance.
            </summary>
            <param name="handler">IQueryable delegate</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanServerQueryHandler.#ctor(Zyan.InterLinq.IObjectSource)">
            <summary>
            Creates ZyanServerQueryHandler instance.
            </summary>
            <param name="source">IObjectSource instance</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanServerQueryHandler.#ctor(Zyan.InterLinq.IEntitySource)">
            <summary>
            Creates ZyanServerQueryHandler instance.
            </summary>
            <param name="source">IEntitySource instance</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanServerQueryHandler.Retrieve(InterLinq.Expressions.SerializableExpression)">
            <summary>
            Retrieves data from the server by an <see cref="T:InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            </summary>
            <remarks>
            This method's return type depends on the submitted 
            <see cref="T:InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            Here some examples ('T' is the requested type):
            <list type="list">
                <listheader>
                    <term>Method</term>
                    <description>Return Type</description>
                </listheader>
                <item>
                    <term>Select(...)</term>
                    <description>T[]</description>
                </item>
                <item>
                    <term>First(...), Last(...)</term>
                    <description>T</description>
                </item>
                <item>
                    <term>Count(...)</term>
                    <description><see langword="int"/></description>
                </item>
                <item>
                    <term>Contains(...)</term>
                    <description><see langword="bool"/></description>
                </item>
            </list>
            </remarks>
            <param name="expression">
                <see cref="T:InterLinq.Expressions.SerializableExpression">Expression</see> tree 
                containing selection and projection.
            </param>
            <returns>Returns requested data.</returns>
            <seealso cref="M:InterLinq.IQueryRemoteHandler.Retrieve(InterLinq.Expressions.SerializableExpression)"/>
        </member>
        <member name="P:Zyan.InterLinq.ZyanServerQueryHandler.InnerHandler">
            <summary>
            Gets the <see cref="T:InterLinq.IQueryRemoteHandler"/>.
            </summary>
        </member>
        <member name="T:Zyan.InterLinq.ZyanExtensions">
            <summary>
            Extension methods for easier InterLINQ handlers access.
            </summary>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.CreateQueryableProxy(Zyan.Communication.ZyanConnection,System.Boolean)">
            <summary>
            Creates IQueryable proxy for Zyan connection
            </summary>
            <param name="connection">ZyanConnection</param>
            <param name="implicitTransactionTransfer">Transfer ambient transactions</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.CreateQueryableProxy(Zyan.Communication.ZyanConnection)">
            <summary>
            Creates IQueryable proxy for Zyan connection
            </summary>
            <param name="connection">ZyanConnection</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.CreateQueryableProxy(Zyan.Communication.ZyanConnection,System.String,System.Boolean)">
            <summary>
            Creates IQueryable proxy for Zyan connection
            </summary>
            <param name="connection">ZyanConnection</param>
            <param name="unqiueName">Unique component name</param>
            <param name="implicitTransactionTransfer">Transfer ambient transactions</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.CreateQueryableProxy(Zyan.Communication.ZyanConnection,System.String)">
            <summary>
            Creates IQueryable proxy for Zyan connection
            </summary>
            <param name="connection">ZyanConnection</param>
            <param name="unqiueName">Unique component name</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.CreateServerHandler``1(``0)">
            <summary>
            Creates function returning ZyanServerQueryHandler for the given instance
            </summary>
            <typeparam name="T">Type (either IObjectSource or IEntitySource)</typeparam>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.CreateServerHandler``1">
            <summary>
            Creates function returning ZyanServerQueryHandler for the given type
            </summary>
            <typeparam name="T">Type (either IObjectSource or IEntitySource)</typeparam>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent``1(Zyan.Communication.ZyanComponentHost)">
            <summary>
            Registers IQueryable component
            </summary>
            <typeparam name="T">Component type</typeparam>
            <param name="host">Component host</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent``1(Zyan.Communication.ZyanComponentHost,Zyan.Communication.ActivationType)">
            <summary>
            Registers IQueryable component
            </summary>
            <typeparam name="T">Component type</typeparam>
            <param name="host">Component host</param>
            <param name="activationType">Activation type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent``1(Zyan.Communication.ZyanComponentHost,System.String)">
            <summary>
            Registers IQueryable component
            </summary>
            <typeparam name="T">Component type</typeparam>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent``1(Zyan.Communication.ZyanComponentHost,``0)">
            <summary>
            Registers IQueryable component
            </summary>
            <typeparam name="T">Component type</typeparam>
            <param name="host">Component host</param>
            <param name="instance">Component instance</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent``1(Zyan.Communication.ZyanComponentHost,System.String,``0)">
            <summary>
            Registers IQueryable component
            </summary>
            <typeparam name="T">Component type</typeparam>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="instance">Component instance</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent``1(Zyan.Communication.ZyanComponentHost,System.String,Zyan.Communication.ActivationType)">
            <summary>
            Registers IQueryable component
            </summary>
            <typeparam name="T">Component type</typeparam>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="activationType">Activation type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.Func{System.Type,System.Collections.IEnumerable})">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="getMethod">Method returning IEnumerable instances of the given type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.Func{System.Type,System.Linq.IQueryable})">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="getMethod">Method returning IQueryable instances of the given type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.String,System.Func{System.Type,System.Collections.IEnumerable})">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="getMethod">Method returning IEnumerable instances of the given type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.String,System.Func{System.Type,System.Linq.IQueryable})">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="getMethod">Method returning IQueryable instances of the given type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.String,System.Func{System.Type,System.Collections.IEnumerable},Zyan.Communication.ActivationType)">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="getMethod">Method returning IEnumerable instances of the given type</param>
            <param name="activationType">Activation type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.String,System.Func{System.Type,System.Linq.IQueryable},Zyan.Communication.ActivationType)">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="getMethod">Method returning IQueryable instances of the given type</param>
            <param name="activationType">Activation type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.Func{Zyan.InterLinq.IObjectSource})">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="factoryMethod">Factory method to create component instance</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.Func{Zyan.InterLinq.IEntitySource})">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="factoryMethod">Factory method to create component instance</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.String,System.Func{Zyan.InterLinq.IObjectSource})">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="factoryMethod">Factory method to create component instance</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.String,System.Func{Zyan.InterLinq.IEntitySource})">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="factoryMethod">Factory method to create component instance</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.Func{Zyan.InterLinq.IObjectSource},Zyan.Communication.ActivationType)">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="factoryMethod">Factory method to create component instance</param>
            <param name="activationType">Activation type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.Func{Zyan.InterLinq.IEntitySource},Zyan.Communication.ActivationType)">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="factoryMethod">Factory method to create component instance</param>
            <param name="activationType">Activation type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.String,System.Func{Zyan.InterLinq.IObjectSource},Zyan.Communication.ActivationType)">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="factoryMethod">Factory method to create component instance</param>
            <param name="activationType">Activation type</param>
        </member>
        <member name="M:Zyan.InterLinq.ZyanExtensions.RegisterQueryableComponent(Zyan.Communication.ZyanComponentHost,System.String,System.Func{Zyan.InterLinq.IEntitySource},Zyan.Communication.ActivationType)">
            <summary>
            Registers IQueryable component factory
            </summary>
            <param name="host">Component host</param>
            <param name="uniqueName">Unique component name</param>
            <param name="factoryMethod">Factory method to create component instance</param>
            <param name="activationType">Activation type</param>
        </member>
    </members>
</doc>
