<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InterLinq</name>
    </assembly>
    <members>
        <member name="T:InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.MemberMemberBinding"/>.
            </summary>
        </member>
        <member name="T:InterLinq.Expressions.SerializableTypes.SerializableMemberBinding">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.MemberBinding"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypes.SerializableMemberBinding.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypes.SerializableMemberBinding.#ctor(System.Linq.Expressions.MemberBinding,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.MemberBinding"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="memberBinding">The original, not serializable <see cref="T:System.Linq.Expressions.MemberBinding"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypes.SerializableMemberBinding.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.MemberBinding"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypes.SerializableMemberBinding.ToString">
            <summary>
            Returns a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.MemberBinding"/>.
            </summary>
            <returns>Returns a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.MemberBinding"/>.</returns>
        </member>
        <member name="P:InterLinq.Expressions.SerializableTypes.SerializableMemberBinding.Member">
            <summary>
            See <see cref="P:System.Linq.Expressions.MemberBinding.Member"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableTypes.SerializableMemberBinding.BindingType">
            <summary>
            See <see cref="P:System.Linq.Expressions.MemberBinding.BindingType"/>
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding.#ctor(System.Linq.Expressions.MemberMemberBinding,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.MemberMemberBinding"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="memberMemberBinding">The original, not serializable <see cref="T:System.Linq.Expressions.MemberBinding"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.MemberBinding"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding.Bindings">
            <summary>
            See <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings"/>
            </summary>
        </member>
        <member name="T:InterLinq.Expressions.SerializableInvocationExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.InvocationExpression"/>.
            </summary>
        </member>
        <member name="T:InterLinq.Expressions.SerializableExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableExpression.#ctor(System.Linq.Expressions.Expression,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.Expression"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableExpression.#ctor(System.Linq.Expressions.ExpressionType,System.Type,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.ExpressionType"/>, a <see cref="P:InterLinq.Expressions.SerializableExpression.Type"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="nodeType">The <see cref="T:System.Linq.Expressions.ExpressionType"/> of the <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="type">The <see cref="P:InterLinq.Expressions.SerializableExpression.Type"/> of the <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableExpression.ToString">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>A <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.SerializableExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:InterLinq.Expressions.SerializableExpression.HashCode">
            <summary>
            The hashcode of the original <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableExpression.NodeType">
            <summary>
            See <see cref="P:System.Linq.Expressions.Expression.NodeType"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableExpression.Type">
            <summary>
            See <see cref="P:System.Linq.Expressions.Expression.Type"/>
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableInvocationExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableInvocationExpression.#ctor(System.Linq.Expressions.InvocationExpression,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.InvocationExpression"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="P:InterLinq.Expressions.SerializableInvocationExpression.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="P:InterLinq.Expressions.SerializableInvocationExpression.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableInvocationExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="P:InterLinq.Expressions.SerializableInvocationExpression.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:InterLinq.Expressions.SerializableInvocationExpression.Expression">
            <summary>
            See <see cref="P:System.Linq.Expressions.InvocationExpression.Expression"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableInvocationExpression.Arguments">
            <summary>
            See <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments"/>
            </summary>
        </member>
        <member name="T:InterLinq.Expressions.SerializableConditionalExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.ConditionalExpression"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableConditionalExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableConditionalExpression.#ctor(System.Linq.Expressions.ConditionalExpression,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.ConditionalExpression"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableConditionalExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:InterLinq.Expressions.SerializableConditionalExpression.IfTrue">
            <summary>
            See <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableConditionalExpression.IfFalse">
            <summary>
            See <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableConditionalExpression.Test">
            <summary>
            See <see cref="P:System.Linq.Expressions.ConditionalExpression.Test"/>
            </summary>
        </member>
        <member name="T:InterLinq.Communication.Wcf.ServiceConstants">
            <summary>
            Constant class for the WCF implementation.
            </summary>
        </member>
        <member name="F:InterLinq.Communication.Wcf.ServiceConstants.ServerAddress">
            <summary>
            Default WCF Server address.
            </summary>
        </member>
        <member name="F:InterLinq.Communication.Wcf.ServiceConstants.ServerPort">
            <summary>
            Default WCF Server port.
            </summary>
        </member>
        <member name="F:InterLinq.Communication.Wcf.ServiceConstants.ServicePath">
            <summary>
            Default WCF Service path.
            </summary>
        </member>
        <member name="T:InterLinq.Types.InterLinqMethodInfo">
            <summary>
            InterLINQ representation of <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <seealso cref="T:InterLinq.Types.InterLinqMethodBase"/>
            <seealso cref="T:InterLinq.Types.InterLinqMemberInfo"/>
            <seealso cref="T:System.Reflection.MethodInfo"/>
        </member>
        <member name="T:InterLinq.Types.InterLinqMethodBase">
            <summary>
            InterLINQ representation of <see cref="T:System.Reflection.MethodBase"/>.
            </summary>
            <seealso cref="T:InterLinq.Types.InterLinqMemberInfo"/>
            <seealso cref="T:System.Reflection.MethodBase"/>
        </member>
        <member name="T:InterLinq.Types.InterLinqMemberInfo">
            <summary>
            InterLINQ representation of <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <seealso cref="T:System.Reflection.MemberInfo"/>
        </member>
        <member name="M:InterLinq.Types.InterLinqMemberInfo.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:InterLinq.Types.InterLinqMemberInfo.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="memberInfo">Represented CLR <see cref="T:System.Reflection.MemberInfo"/>.</param>
        </member>
        <member name="M:InterLinq.Types.InterLinqMemberInfo.Initialize(System.Reflection.MemberInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="memberInfo">Represented <see cref="T:System.Reflection.MemberInfo"/></param>
        </member>
        <member name="M:InterLinq.Types.InterLinqMemberInfo.GetClrVersion">
            <summary>
            Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <returns>Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:InterLinq.Types.InterLinqMemberInfo.Equals(System.Object)">
            <summary>
            Compares <paramref name="obj"/> to this instance.
            </summary>
            <param name="obj"><see langword="object"/> to compare.</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:InterLinq.Types.InterLinqMemberInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see langword="object"/>.</returns>
        </member>
        <member name="P:InterLinq.Types.InterLinqMemberInfo.MemberType">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberTypes">MemberType</see>.
            </summary>
            <seealso cref="P:System.Reflection.MemberInfo.MemberType"/>
        </member>
        <member name="P:InterLinq.Types.InterLinqMemberInfo.Name">
            <summary>
            Gets or sets the name of this <see cref="T:InterLinq.Types.InterLinqMemberInfo"/>.
            </summary>
            <seealso cref="P:System.Reflection.MemberInfo.Name"/>
        </member>
        <member name="P:InterLinq.Types.InterLinqMemberInfo.DeclaringType">
            <summary>
            Gets or sets the class that declares this <see cref="T:InterLinq.Types.InterLinqMemberInfo"/>.
            </summary>
            <seealso cref="P:System.Reflection.MemberInfo.DeclaringType"/>
        </member>
        <member name="M:InterLinq.Types.InterLinqMethodBase.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:InterLinq.Types.InterLinqMethodBase.#ctor(System.Reflection.MethodBase)">
            <summary>
            Initializes this class.
            </summary>
            <param name="methodBase">Represented CLR <see cref="T:System.Reflection.MethodBase"/>.</param>
        </member>
        <member name="M:InterLinq.Types.InterLinqMethodBase.Initialize(System.Reflection.MemberInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="memberInfo">Represented <see cref="T:System.Reflection.MemberInfo"/></param>
            <seealso cref="M:InterLinq.Types.InterLinqMemberInfo.Initialize(System.Reflection.MemberInfo)"/>
        </member>
        <member name="M:InterLinq.Types.InterLinqMethodBase.Equals(System.Object)">
            <summary>
            Compares <paramref name="obj"/> to this instance.
            </summary>
            <param name="obj"><see langword="object"/> to compare.</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:InterLinq.Types.InterLinqMethodBase.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see langword="object"/>.</returns>
        </member>
        <member name="P:InterLinq.Types.InterLinqMethodBase.ParameterTypes">
            <summary>
            Gets or sets the ParameterTypes.
            </summary>
        </member>
        <member name="M:InterLinq.Types.InterLinqMethodInfo.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:InterLinq.Types.InterLinqMethodInfo.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="methodInfo">Represented CLR <see cref="T:System.Reflection.MethodInfo"/>.</param>
        </member>
        <member name="M:InterLinq.Types.InterLinqMethodInfo.Initialize(System.Reflection.MemberInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="memberInfo">Represented <see cref="T:System.Reflection.MemberInfo"/></param>
            <seealso cref="M:InterLinq.Types.InterLinqMemberInfo.Initialize(System.Reflection.MemberInfo)"/>
        </member>
        <member name="M:InterLinq.Types.InterLinqMethodInfo.GetClrVersion">
            <summary>
            Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <returns>Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:InterLinq.Types.InterLinqMethodInfo.Equals(System.Object)">
            <summary>
            Compares <paramref name="obj"/> to this instance.
            </summary>
            <param name="obj"><see langword="object"/> to compare.</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:InterLinq.Types.InterLinqMethodInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see langword="object"/>.</returns>
        </member>
        <member name="P:InterLinq.Types.InterLinqMethodInfo.MemberType">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberTypes">MemberType</see>.
            </summary>
            <seealso cref="P:InterLinq.Types.InterLinqMemberInfo.MemberType"/>
            <seealso cref="P:System.Reflection.MethodInfo.MemberType"/>
        </member>
        <member name="P:InterLinq.Types.InterLinqMethodInfo.ReturnType">
            <summary>
            Gets or sets the <see cref="T:InterLinq.Types.InterLinqType">ReturnType</see>.
            </summary>
            <seealso cref="P:System.Reflection.MethodInfo.ReturnType"/>
        </member>
        <member name="P:InterLinq.Types.InterLinqMethodInfo.IsGeneric">
            <summary>
            Returns true if the <see cref="T:InterLinq.Types.InterLinqMethodInfo"/> is generic.
            </summary>
            <seealso cref="P:System.Reflection.MethodInfo.IsGenericMethod"/>
        </member>
        <member name="P:InterLinq.Types.InterLinqMethodInfo.GenericArguments">
            <summary>
            Gets or sets the generic arguments.
            </summary>
            <seealso cref="M:System.Reflection.MethodInfo.GetGenericArguments"/>
        </member>
        <member name="T:InterLinq.Types.Anonymous.AnonymousMetaType">
            <summary>
            A class representing an anonymous type.
            <seealso cref="T:InterLinq.Types.InterLinqType"/>
            </summary>
        </member>
        <member name="T:InterLinq.Types.InterLinqType">
            <summary>
            InterLINQ representation of <see cref="T:System.Type"/>.
            </summary>
            <seealso cref="T:InterLinq.Types.InterLinqMemberInfo"/>
            <seealso cref="T:System.Type"/>
        </member>
        <member name="M:InterLinq.Types.InterLinqType.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:InterLinq.Types.InterLinqType.#ctor(System.Type)">
            <summary>
            Initializes this class.
            </summary>
            <param name="representedType">Represented CLR <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:InterLinq.Types.InterLinqType.Initialize(System.Reflection.MemberInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="memberInfo">Represented <see cref="T:System.Reflection.MemberInfo"/></param>
            <seealso cref="M:InterLinq.Types.InterLinqMemberInfo.Initialize(System.Reflection.MemberInfo)"/>
        </member>
        <member name="M:InterLinq.Types.InterLinqType.CreateClrType">
            <summary>
            Creates and returns the CLR <see cref="T:System.Type"/>.
            </summary>
            <returns>Creates and returns the CLR <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:InterLinq.Types.InterLinqType.GetClrVersion">
            <summary>
            Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <returns>Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:InterLinq.Types.InterLinqType.Equals(System.Object)">
            <summary>
            Compares <paramref name="obj"/> to this instance.
            </summary>
            <param name="obj"><see langword="object"/> to compare.</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:InterLinq.Types.InterLinqType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see langword="object"/>.</returns>
        </member>
        <member name="P:InterLinq.Types.InterLinqType.IsGeneric">
            <summary>
            Gets or sets if this is a generic <see cref="T:System.Type"/>.
            </summary>
            <seealso cref="P:System.Type.IsGenericType"/>
        </member>
        <member name="P:InterLinq.Types.InterLinqType.MemberType">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberTypes">MemberType</see>.
            </summary>
            <seealso cref="P:System.Type.MemberType"/>
        </member>
        <member name="P:InterLinq.Types.InterLinqType.RepresentedType">
            <summary>
            Gets or sets the represented <see cref="T:System.Type"/>.
            </summary> 
        </member>
        <member name="P:InterLinq.Types.InterLinqType.GenericArguments">
            <summary>
            Gets or sets the generic Arguments.
            </summary>
            <seealso cref="M:System.Type.GetGenericArguments"/>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaType.#ctor">
            <summary>
            Default constructor for serialization or to create an uninitialized <see cref="T:InterLinq.Types.Anonymous.AnonymousMetaType"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaType.#ctor(System.Type)">
            <summary>
            Instance an instance of the class <see cref="T:InterLinq.Types.Anonymous.AnonymousMetaType"/>
            </summary>
            <param name="anonymousType">The <see cref="T:System.Type"/> to generate the <see cref="T:InterLinq.Types.Anonymous.AnonymousMetaType"/> from.</param>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaType.Initialize(System.Reflection.MemberInfo)">
            <summary>
            Initializes the <see cref="T:InterLinq.Types.Anonymous.AnonymousMetaType"/>.
            </summary>
            <param name="memberInfo">The <see cref="T:System.Type"/> to generate the <see cref="T:InterLinq.Types.Anonymous.AnonymousMetaType"/> from.</param>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaType.CreateClrType">
            <summary>
            Generate the a clr type at runtime.
            </summary>
            <returns>Returns the generated <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaType.Equals(System.Object)">
            <summary>
            Overrides the equality comparision.
            </summary>
            <param name="obj">Other object to compare with.</param>
            <returns>True, if the other <see langword="object"/> is equal to this. False, if not.</returns>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see langword="object"/>.</returns>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaType.GenerateAnonymousType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Generate the a clr type at runtime.
            </summary>
            <returns>Returns the generated <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaType.GenerateConstructor(System.Reflection.Emit.TypeBuilder,System.String[],System.Collections.Generic.IList{System.Reflection.Emit.FieldBuilder})">
            <summary>
            Generate a constructor with for a type.
            </summary>
            <param name="dynamicType">A <see cref="T:System.Reflection.Emit.TypeBuilder"/> generate the constructor for.</param>
            <param name="propertyNames"><see langword="string">strings</see> to create a constructor for.</param>
            <param name="fields">Fields to fill in the constructor.</param>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaType.GenerateToStringMethod(System.Reflection.Emit.TypeBuilder,System.String[],System.Reflection.Emit.FieldBuilder[])">
            <summary>
            Generate a ToString method.
            </summary>
            <param name="dynamicType">A <see cref="T:System.Reflection.Emit.TypeBuilder"/> to generate a ToString method for.</param>
            <param name="propertyNames">The names of the properties of the type.</param>
            <param name="fields">Fields to read in the ToString method.</param>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaType.GenerateGetHashCodeMethod(System.Reflection.Emit.TypeBuilder,System.Collections.Generic.IEnumerable{System.Reflection.Emit.FieldBuilder})">
            <summary>
            Generates a GetHashCode method.
            </summary>
            <param name="dynamicType">A <see cref="T:System.Reflection.Emit.TypeBuilder"/> to generate a GetHashCode method for.</param>
            <param name="fields">Fields to read in the GetHashCode method.</param>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaType.GenerateEqualsMethod(System.Reflection.Emit.TypeBuilder,System.Collections.Generic.IEnumerable{System.Reflection.Emit.FieldBuilder})">
            <summary>
            Generates a Equals method.
            </summary>
            <param name="dynamicType">A <see cref="T:System.Reflection.Emit.TypeBuilder"/> to generate a Equals method for.</param>
            <param name="fields">Fields to read in the GetHashCode method.</param>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaType.GenerateProperty(System.Reflection.Emit.TypeBuilder,System.String,System.Reflection.Emit.FieldBuilder)">
            <summary>
            Generates a property.
            </summary>
            <param name="dynamicType">A <see cref="T:System.Reflection.Emit.TypeBuilder"/> to generate a property for.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="field">Field to access in the property.</param>
            <returns>Returns the created property.</returns>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaType.GenerateGetMethod(System.Reflection.Emit.TypeBuilder,System.Reflection.Emit.PropertyBuilder,System.Reflection.Emit.FieldBuilder)">
            <summary>
            Generates a Get method for a property.
            </summary>
            <param name="dynamicType">A <see cref="T:System.Reflection.Emit.TypeBuilder"/> to generate a Get method for.</param>
            <param name="property">Property to create a get method for.</param>
            <param name="field">Field to access in the method.</param>
            <returns>Returns the created method.</returns>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaType.GenerateClassAttributes(System.Reflection.Emit.TypeBuilder,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates attributes for a type.
            </summary>
            <param name="dynamicType">A <see cref="T:System.Reflection.Emit.TypeBuilder"/> to generate the attributes for.</param>
            <param name="propertyNames">Names of the properties.</param>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaType.AddDebuggerHiddenAttribute(System.Reflection.Emit.MethodBuilder)">
            <summary>
            Adds a <see cref="T:System.Diagnostics.DebuggerHiddenAttribute"/> to a method.
            </summary>
            <param name="method">The method to add the attribute.</param>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaType.AddDebuggerHiddenAttribute(System.Reflection.Emit.ConstructorBuilder)">
            <summary>
            Adds a <see cref="T:System.Diagnostics.DebuggerHiddenAttribute"/> to a constructor.
            </summary>
            <param name="constructor">The constructor to add the attribute.</param>
        </member>
        <member name="P:InterLinq.Types.Anonymous.AnonymousMetaType.MetaProperties">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> with the properties of the type.
            </summary>
        </member>
        <member name="P:InterLinq.Types.Anonymous.AnonymousMetaType.IsGeneric">
            <summary>
            Is allways <see langword="true"/>.
            <see cref="P:InterLinq.Types.InterLinqType.IsGeneric"/>
            </summary>
        </member>
        <member name="P:InterLinq.Types.Anonymous.AnonymousMetaType.PropertyNames">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the names of all properties.
            </summary>
        </member>
        <member name="P:InterLinq.Types.Anonymous.AnonymousMetaType.GenericClassParameterNames">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the names of all parameters.
            </summary>
        </member>
        <member name="P:InterLinq.Types.Anonymous.AnonymousMetaType.FieldNames">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the names of all fields.
            </summary>
        </member>
        <member name="T:InterLinq.IQueryRemoteHandler">
            <summary>
            Interface providing methods to communicate with
            the InterLINQ service.
            </summary>
        </member>
        <member name="M:InterLinq.IQueryRemoteHandler.Retrieve(InterLinq.Expressions.SerializableExpression)">
            <summary>
            Retrieves data from the server by an <see cref="T:InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            </summary>
            <remarks>
            This method's return type depends on the submitted 
            <see cref="T:InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            Here some examples ('T' is the requested type):
            <list type="list">
                <listheader>
                    <term>Method</term>
                    <description>Return Type</description>
                </listheader>
                <item>
                    <term>Select(...)</term>
                    <description>T[]</description>
                </item>
                <item>
                    <term>First(...), Last(...)</term>
                    <description>T</description>
                </item>
                <item>
                    <term>Count(...)</term>
                    <description><see langword="int"/></description>
                </item>
                <item>
                    <term>Contains(...)</term>
                    <description><see langword="bool"/></description>
                </item>
            </list>
            </remarks>
            <param name="expression">
                <see cref="T:InterLinq.Expressions.SerializableExpression">Expression</see> tree 
                containing selection and projection.
            </param>
            <returns>Returns requested data.</returns>
        </member>
        <member name="T:InterLinq.Expressions.SerializableListInitExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.ListInitExpression"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableListInitExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableListInitExpression.#ctor(System.Linq.Expressions.ListInitExpression,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.ListInitExpression"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableListInitExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:InterLinq.Expressions.SerializableListInitExpression.NewExpression">
            <summary>
            See <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableListInitExpression.Initializers">
            <summary>
            See <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers"/>
            </summary>
        </member>
        <member name="T:InterLinq.Expressions.Helpers.ExpressionVisitor">
            <summary>
            A visitor for <see cref="P:InterLinq.Expressions.Helpers.ExpressionVisitor.Expression">Expressions</see>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Creates a new <see cref="T:InterLinq.Expressions.Helpers.ExpressionVisitor"/> with an <see cref="P:InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/>.
            </summary>
            <param name="expression"><see cref="P:InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/> to initialize the visitor.</param>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.Visit">
            <summary>
            Visit the <see cref="P:InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/> in this visitor.
            </summary>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.Visit``1(System.Linq.Expressions.Expression)">
            <summary>
            Visits an <see cref="P:InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/> and returns a result of the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the returned value.</typeparam>
            <param name="expression"><see cref="P:InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/> to visit.</param>
            <returns>Returns a result of the type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visit an <see cref="P:InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/>.
            </summary>
            <param name="expression"><see cref="P:InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitCollection``1(System.Collections.IEnumerable)">
            <summary>
            Visit a collection of <see cref="P:InterLinq.Expressions.Helpers.ExpressionVisitor.Expression">expressions</see>.
            </summary>
            <typeparam name="T">Type of the visit results.</typeparam>
            <param name="enumerable">Collection to visit.</param>
            <returns>Returns a list of visit results.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitObject``1(System.Object)">
            <summary>
            Visits an <see langword="object"/> and returns a result of the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the returned value.</typeparam>
            <param name="objectToVisit"><see langword="object"/> to visit.</param>
            <returns>Returns a result of the type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitObject(System.Object)">
            <summary>
            Visit an <see langword="object"/>.
            </summary>
            <param name="objectToVisit"><see langword="object"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitObjectCollection``1(System.Collections.IEnumerable)">
            <summary>
            Visit a collection of <see langword="object">objects</see>.
            </summary>
            <typeparam name="T">Type of the visit results.</typeparam>
            <param name="enumerable">Collection to visit.</param>
            <returns>Returns a list of visit results.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.BinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.BinaryExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitConditionalExpression(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.ConditionalExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ConditionalExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitConstantExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ConstantExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitTypedExpression``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.Expression`1"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression`1"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitInvocationExpression(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.InvocationExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.InvocationExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitLambdaExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.LambdaExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.LambdaExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitListInitExpression(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.ListInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ListInitExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.MemberExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MemberExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberInitExpression(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.MemberInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MemberInitExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MethodCallExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitNewArrayExpression(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.NewArrayExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.NewArrayExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitNewExpression(System.Linq.Expressions.NewExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.NewExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.NewExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitParameterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.ParameterExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ParameterExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitTypeBinaryExpression(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.TypeBinaryExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitUnaryExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.UnaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.UnaryExpression"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.ElementInit"/>.
            </summary>
            <param name="elementInit"><see cref="T:System.Linq.Expressions.ElementInit"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.MemberAssignment"/>.
            </summary>
            <param name="memberAssignment"><see cref="T:System.Linq.Expressions.MemberAssignment"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.MemberListBinding"/>.
            </summary>
            <param name="memberListBinding"><see cref="T:System.Linq.Expressions.MemberListBinding"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visit a <see cref="T:System.Linq.Expressions.MemberMemberBinding"/>.
            </summary>
            <param name="memberMemberBinding"><see cref="T:System.Linq.Expressions.MemberMemberBinding"/> to visit.</param>
            <returns>Returns the result of the visit.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitObjectPrecondition(System.Object)">
            <summary>
            Precondition of the method <see cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitObject(System.Object)"/>.
            </summary>
            <param name="objectToVisit"><see langword="object"/> to visit.</param>
            <returns>True, if the condition is true. False, if not.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitObjectHandleNull">
            <summary>
            Handle when the method <see cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitObject(System.Object)"/> is <see langword="null"/>.
            </summary>
            <returns>Returns the result of a <see langword="null"/> input.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitHandleNull">
            <summary>
            Handle when the method <see cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)"/> is <see langword="null"/>.
            </summary>
            <returns>Returns the result of a <see langword="null"/> input.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitPrecondition(System.Linq.Expressions.Expression)">
            <summary>
            Precondition of the method <see cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)"/>.
            </summary>
            <param name="exp"><see cref="P:InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/> to visit.</param>
            <returns>True, if the condition is true. False, if not.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitUnknownExpression(System.Linq.Expressions.Expression)">
            <summary>
            Handles the case, when the type of the <see cref="P:InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/> is unkonwn.
            </summary>
            <param name="expression">The unknown <see cref="P:InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/>.</param>
            <returns>Returns the result of a unknown <see cref="P:InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitUnkownObject(System.Object)">
            <summary>
            Handles the case, when the type of the <see langword="object"/> is unkonwn.
            </summary>
            <param name="unknownObject">The unknown <see langword="object"/>.</param>
            <returns>Returns the result of a unknown <see langword="object"/>.</returns>
        </member>
        <member name="P:InterLinq.Expressions.Helpers.ExpressionVisitor.Expression">
            <summary>
            The <see cref="P:InterLinq.Expressions.Helpers.ExpressionVisitor.Expression"/> to visit.
            </summary>
        </member>
        <member name="T:InterLinq.Types.Anonymous.AnonymousProperty">
            <summary>
            Represents an instance of an <see cref="T:InterLinq.Types.Anonymous.AnonymousMetaProperty"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousProperty.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousProperty.#ctor(System.String,System.Object)">
            <summary>
            Instance a new instance of the class <see cref="T:InterLinq.Types.Anonymous.AnonymousProperty"/> and initialize it.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousProperty.ToString">
            <summary>
            Returns a <see langword="string"/> representing this object.
            </summary>
            <returns>Returns a <see langword="string"/> representing this object.</returns>
        </member>
        <member name="P:InterLinq.Types.Anonymous.AnonymousProperty.Name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="P:InterLinq.Types.Anonymous.AnonymousProperty.Value">
            <summary>
            The value of the property.
            </summary>
        </member>
        <member name="T:InterLinq.Expressions.SerializableConstantExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableConstantExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableConstantExpression.#ctor(System.Linq.Expressions.ConstantExpression,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.ConstantExpression"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableConstantExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:InterLinq.Expressions.SerializableConstantExpression.Value">
            <summary>
            See <see cref="P:System.Linq.Expressions.ConstantExpression.Value"/>
            </summary>
        </member>
        <member name="T:InterLinq.Expressions.SerializableBinaryExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.BinaryExpression"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableBinaryExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableBinaryExpression.#ctor(System.Linq.Expressions.BinaryExpression,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.BinaryExpression"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableBinaryExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableBinaryExpression.GetOperator">
            <summary>
            Gets the operator as string.
            </summary>
            <returns>Returns the operator as a string.</returns>
        </member>
        <member name="P:InterLinq.Expressions.SerializableBinaryExpression.Left">
            <summary>
            See <see cref="P:System.Linq.Expressions.BinaryExpression.Left"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableBinaryExpression.Right">
            <summary>
            See <see cref="P:System.Linq.Expressions.BinaryExpression.Right"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableBinaryExpression.Conversion">
            <summary>
            See <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableBinaryExpression.Method">
            <summary>
            See <see cref="P:System.Linq.Expressions.BinaryExpression.Method"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableBinaryExpression.IsLiftedToNull">
            <summary>
            See <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull"/>
            </summary>
        </member>
        <member name="T:InterLinq.Expressions.SerializableMemberInitExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.MemberInitExpression"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableMemberInitExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableMemberInitExpression.#ctor(System.Linq.Expressions.MemberInitExpression,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.MemberInitExpression"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableMemberInitExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:InterLinq.Expressions.SerializableMemberInitExpression.NewExpression">
            <summary>
            See <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableMemberInitExpression.Bindings">
            <summary>
            See <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings"/>
            </summary>
        </member>
        <member name="T:InterLinq.Communication.Wcf.ClientQueryWcfHandler">
            <summary>
            Client handler class managing the connection 
            via WCF to the InterLINQ Server.
            </summary>
            <seealso cref="T:InterLinq.Communication.ClientQueryHandler"/>
            <seealso cref="T:InterLinq.InterLinqQueryHandler"/>
            <seealso cref="T:InterLinq.IQueryHandler"/>
        </member>
        <member name="T:InterLinq.Communication.ClientQueryHandler">
            <summary>
            Client implementation of the <see cref="T:InterLinq.InterLinqQueryHandler"/>.
            </summary>
            <seealso cref="T:InterLinq.InterLinqQueryHandler"/>
            <seealso cref="T:InterLinq.IQueryHandler"/>
        </member>
        <member name="T:InterLinq.InterLinqQueryHandler">
            <summary>
            Abstract implementation of an <see cref="T:InterLinq.IQueryHandler"/>.
            This class provides methods to get an <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <seealso cref="T:InterLinq.IQueryHandler"/>
        </member>
        <member name="T:InterLinq.IQueryHandler">
            <summary>
            Interface providing methods to get <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
        </member>
        <member name="M:InterLinq.IQueryHandler.GetTable``1">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable`1"/>.
            Can be replaced with <see cref="M:InterLinq.IQueryHandler.Get``1"/>.
            </summary>
            <typeparam name="T">Generic Argument of the returned <see cref="T:System.Linq.IQueryable`1"/>.</typeparam>
            <returns>Returns an <see cref="T:System.Linq.IQueryable`1"/>.</returns>
        </member>
        <member name="M:InterLinq.IQueryHandler.GetTable(System.Type)">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable`1"/>.
            Can be replaced with <see cref="M:InterLinq.IQueryHandler.Get(System.Type)"/>.
            </summary>
            <param name="type">Type of the returned <see cref="T:System.Linq.IQueryable`1"/>.</param>
            <returns>Returns an <see cref="T:System.Linq.IQueryable`1"/>.</returns>
        </member>
        <member name="M:InterLinq.IQueryHandler.Get(System.Type)">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">Type of the returned <see cref="T:System.Linq.IQueryable`1"/>.</param>
            <returns>Returns an <see cref="T:System.Linq.IQueryable`1"/>.</returns>
        </member>
        <member name="M:InterLinq.IQueryHandler.Get``1">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="T">Generic Argument of the returned <see cref="T:System.Linq.IQueryable`1"/>.</typeparam>
            <returns>Returns an <see cref="T:System.Linq.IQueryable`1"/>.</returns>
        </member>
        <member name="M:InterLinq.IQueryHandler.StartSession">
            <summary>
            Tells the <see cref="T:InterLinq.IQueryHandler"/> to start a new the session.
            </summary>
            <returns>True, if the session creation was successful. False, if not.</returns>
        </member>
        <member name="M:InterLinq.IQueryHandler.CloseSession">
            <summary>
            Tells the <see cref="T:InterLinq.IQueryHandler"/> to close the current session.
            </summary>
            <returns>True, if the session closing was successful. False, if not.</returns>
        </member>
        <member name="M:InterLinq.InterLinqQueryHandler.GetTable``1">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="T">Type of the returned <see cref="T:System.Linq.IQueryable`1"/>.</typeparam>
            <returns>Returns an <see cref="T:System.Linq.IQueryable`1"/>.</returns>
            <seealso cref="M:InterLinq.IQueryHandler.Get``1"/>
        </member>
        <member name="M:InterLinq.InterLinqQueryHandler.GetTable(System.Type)">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <param name="type">Type contained in the returned <see cref="T:System.Linq.IQueryable"/>.</param>
            <returns>Returns an <see cref="T:System.Linq.IQueryable"/>.</returns>
            <seealso cref="M:InterLinq.IQueryHandler.Get(System.Type)"/>
        </member>
        <member name="M:InterLinq.InterLinqQueryHandler.Get(System.Type)">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">Type of the returned <see cref="T:System.Linq.IQueryable`1"/>.</param>
            <returns>Returns an <see cref="T:System.Linq.IQueryable`1"/>.</returns>
        </member>
        <member name="M:InterLinq.InterLinqQueryHandler.Get``1">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="T">Generic Argument of the returned <see cref="T:System.Linq.IQueryable`1"/>.</typeparam>
            <returns>Returns an <see cref="T:System.Linq.IQueryable`1"/>.</returns>
        </member>
        <member name="M:InterLinq.InterLinqQueryHandler.StartSession">
            <summary>
            Tells the <see cref="T:InterLinq.IQueryHandler"/> to start a new the session.
            </summary>
            <returns>True, if the session creation was successful. False, if not.</returns>
            <seealso cref="M:InterLinq.IQueryHandler.StartSession"/>
        </member>
        <member name="M:InterLinq.InterLinqQueryHandler.CloseSession">
            <summary>
            Tells the <see cref="T:InterLinq.IQueryHandler"/> to close the current session.
            </summary>
            <returns>True, if the session closing was successful. False, if not.</returns>
            <seealso cref="M:InterLinq.IQueryHandler.CloseSession"/>
        </member>
        <member name="P:InterLinq.InterLinqQueryHandler.QueryProvider">
            <summary>
            Gets the <see cref="T:System.Linq.IQueryProvider"/>.
            </summary>
        </member>
        <member name="F:InterLinq.Communication.ClientQueryHandler.queryRemoteHandler">
            <summary>
            <see cref="T:InterLinq.IQueryRemoteHandler"/> instance.
            </summary>
        </member>
        <member name="M:InterLinq.Communication.ClientQueryHandler.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:InterLinq.Communication.ClientQueryHandler.#ctor(InterLinq.IQueryRemoteHandler)">
            <summary>
            Initializes this class.
            </summary>
            <param name="queryRemoteHandler"><see cref="T:InterLinq.IQueryRemoteHandler"/> to communicate with the server.</param>
        </member>
        <member name="M:InterLinq.Communication.ClientQueryHandler.Connect">
            <summary>
            Connects to the server.
            </summary>
        </member>
        <member name="P:InterLinq.Communication.ClientQueryHandler.QueryProvider">
            <summary>
            Gets the <see cref="T:System.Linq.IQueryProvider"/>.
            </summary>
            <seealso cref="P:InterLinq.InterLinqQueryHandler.QueryProvider"/>
        </member>
        <member name="P:InterLinq.Communication.ClientQueryHandler.QueryRemoteHandler">
            <summary>
            Gets the <see cref="T:InterLinq.IQueryRemoteHandler"/>;
            </summary>
        </member>
        <member name="M:InterLinq.Communication.Wcf.ClientQueryWcfHandler.Connect">
            <summary>
            Connects to the server.
            <see cref="T:InterLinq.InterLinqQueryHandler"/>
            </summary>
            <seealso cref="M:InterLinq.Communication.ClientQueryHandler.Connect"/>
        </member>
        <member name="M:InterLinq.Communication.Wcf.ClientQueryWcfHandler.Connect(System.String)">
            <summary>
            Connects to the Server using the settings in your App.config.
            </summary>
            <param name="endpointConfigurationName">The name of the client endpoint in App.config</param>
        </member>
        <member name="M:InterLinq.Communication.Wcf.ClientQueryWcfHandler.Connect(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            Connects to the server.
            </summary>
            <param name="binding">Predefined <see cref="T:System.ServiceModel.Channels.Binding"/>.</param>
            <param name="endpointAddress"><see cref="T:System.ServiceModel.EndpointAddress"/> of the server.</param>
        </member>
        <member name="T:InterLinq.Types.InterLinqTypeSystem">
            <summary>
            Singleton class for the <see cref="T:InterLinq.Types.InterLinqTypeSystem"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Types.InterLinqTypeSystem.#ctor">
            <summary>
            Private constructor to avoid external instantiation.
            </summary>
        </member>
        <member name="M:InterLinq.Types.InterLinqTypeSystem.GetInterLinqMemberInfo(System.Reflection.MemberInfo)">
            <summary>
            Returns the <see cref="T:InterLinq.Types.InterLinqMemberInfo"/> for a C# <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberInfo"><see cref="T:System.Reflection.MemberInfo"/>.</param>
            <returns>Returns the <see cref="T:InterLinq.Types.InterLinqMemberInfo"/> for a C# <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:InterLinq.Types.InterLinqTypeSystem.GetCollectionOf``1(System.Collections.IEnumerable)">
            <summary>
            Returns a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> with each element in <paramref name="memberInfos"/>.
            The elements in <paramref name="memberInfos"/> will be converted to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Element <see cref="T:System.Type">Types</see> in the returned ReadOnlyColelction.</typeparam>
            <param name="memberInfos"><see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Reflection.MemberInfo">MemberInfo's</see>.</param>
            <returns>Returns a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> with each element in <paramref name="memberInfos"/>.</returns>
        </member>
        <member name="M:InterLinq.Types.InterLinqTypeSystem.GetInterLinqVersionOf``1(System.Reflection.MemberInfo)">
            <summary>
            Returns the <see cref="T:InterLinq.Types.InterLinqMemberInfo"/> for a C# <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the requested <see cref="T:InterLinq.Types.InterLinqMemberInfo"/></typeparam>
            <param name="memberInfo"><see cref="T:System.Reflection.MemberInfo"/>.</param>
            <returns>Returns the <see cref="T:InterLinq.Types.InterLinqMemberInfo"/> for a C# <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:InterLinq.Types.InterLinqTypeSystem.IsInterLinqMemberInfoRegistered(InterLinq.Types.InterLinqMemberInfo)">
            <summary>
            Returns true if the <see cref="T:InterLinq.Types.InterLinqMemberInfo"/> was already constructed.
            </summary>
            <param name="memberInfo"><see cref="T:InterLinq.Types.InterLinqMemberInfo"/>.</param>
            <returns>Returns true if the <see cref="T:InterLinq.Types.InterLinqMemberInfo"/> was already constructed.</returns>
        </member>
        <member name="M:InterLinq.Types.InterLinqTypeSystem.GetClrVersion``1(InterLinq.Types.InterLinqMemberInfo)">
            <summary>
            Returns the C# <see cref="T:System.Reflection.MemberInfo"/> for a <see cref="T:InterLinq.Types.InterLinqMemberInfo"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the requested <see cref="T:System.Reflection.MemberInfo"/></typeparam>
            <param name="memberInfo"><see cref="T:InterLinq.Types.InterLinqMemberInfo"/>.</param>
            <returns>Returns the C# <see cref="T:System.Reflection.MemberInfo"/> for a <see cref="T:InterLinq.Types.InterLinqMemberInfo"/>.</returns>
        </member>
        <member name="M:InterLinq.Types.InterLinqTypeSystem.SetClrVersion(InterLinq.Types.InterLinqMemberInfo,System.Reflection.MemberInfo)">
            <summary>
            Stores the <see cref="T:InterLinq.Types.InterLinqMemberInfo"/>-<see cref="T:System.Reflection.MemberInfo"/>
            mapping locally.
            </summary>
            <param name="memberInfo"><see cref="T:InterLinq.Types.InterLinqMemberInfo"/>.</param>
            <param name="clrMeberInfo"><see cref="T:System.Reflection.MemberInfo"/>.</param>
        </member>
        <member name="M:InterLinq.Types.InterLinqTypeSystem.GetElementType(System.Type)">
            <summary>
            Gets the generic argument of an <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="seqType"><see cref="T:System.Type"/> to search in.</param>
            <returns>Returns the generic argument of an <see cref="T:System.Collections.IEnumerable"/>.</returns>
        </member>
        <member name="M:InterLinq.Types.InterLinqTypeSystem.FindIEnumerable(System.Type)">
            <summary>
            Finds an <see cref="T:System.Collections.IEnumerable"/> in <paramref name="seqType"/>.
            </summary>
            <param name="seqType"><see cref="T:System.Type"/> to search in.</param>
            <returns>Returns an <see cref="T:System.Collections.IEnumerable"/>.</returns>
        </member>
        <member name="P:InterLinq.Types.InterLinqTypeSystem.Instance">
            <summary>
            Gets an instance of the <see cref="T:InterLinq.Types.InterLinqTypeSystem"/>.
            </summary>
        </member>
        <member name="T:InterLinq.Communication.Remoting.RemotingConstants">
            <summary>
            Constants for the default remoting configuration.
            </summary>
        </member>
        <member name="F:InterLinq.Communication.Remoting.RemotingConstants.DefaultServiceProtcol">
            <summary>
            The default service protocol for the server name
            </summary>
        </member>
        <member name="F:InterLinq.Communication.Remoting.RemotingConstants.DefaultServerName">
            <summary>
            The default server name.
            </summary>
        </member>
        <member name="F:InterLinq.Communication.Remoting.RemotingConstants.DefaultServerObjectName">
            <summary>
            The default remote object name for the factory.
            </summary>
        </member>
        <member name="F:InterLinq.Communication.Remoting.RemotingConstants.DefaultServiceChannelName">
            <summary>
            The default service channel name for the remoting connection.
            </summary>
        </member>
        <member name="F:InterLinq.Communication.Remoting.RemotingConstants.DefaultServicePort">
            <summary>
            The default port a for remoting connection.
            </summary>
        </member>
        <member name="M:InterLinq.Communication.Remoting.RemotingConstants.GetDefaultChannel(System.Collections.IDictionary)">
            <summary>
            A channel with the default name and the default port.
            </summary>
            <param name="properties">The properties of the channel.</param>
            <returns>Retruns a default <see cref="T:System.Runtime.Remoting.Channels.IChannel"/>.</returns>
        </member>
        <member name="T:InterLinq.Communication.Remoting.ClientQueryRemotingHandler">
            <summary>
            Client handler class managing the connection 
            via Remoting to the InterLINQ Server.
            </summary>
            <seealso cref="T:InterLinq.Communication.ClientQueryHandler"/>
            <seealso cref="T:InterLinq.InterLinqQueryHandler"/>
            <seealso cref="T:InterLinq.IQueryHandler"/>
        </member>
        <member name="M:InterLinq.Communication.Remoting.ClientQueryRemotingHandler.#ctor">
            <summary>
            Initializes this class.
            </summary>
        </member>
        <member name="M:InterLinq.Communication.Remoting.ClientQueryRemotingHandler.#ctor(System.Boolean)">
            <summary>
            Initializes this class.
            </summary>
            <param name="makeDefaultConnection">If set to true, the client will connect to tcp://localhost:7890/InterLINQ_Remoting_Server.</param>
        </member>
        <member name="M:InterLinq.Communication.Remoting.ClientQueryRemotingHandler.#ctor(System.String)">
            <summary>
            Initializes this class.
            </summary>
            <param name="url">URL where the Remote Objects will be published.</param>
        </member>
        <member name="M:InterLinq.Communication.Remoting.ClientQueryRemotingHandler.Connect">
            <summary>
            Connects to the server.
            <see cref="T:InterLinq.InterLinqQueryHandler"/>
            </summary>
            <seealso cref="M:InterLinq.Communication.ClientQueryHandler.Connect"/>
        </member>
        <member name="T:InterLinq.Expressions.SerializableExpressionTyped">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.LambdaExpression"/>.
            </summary>
        </member>
        <member name="T:InterLinq.Expressions.SerializableLambdaExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.LambdaExpression"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableLambdaExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableLambdaExpression.#ctor(System.Linq.Expressions.LambdaExpression,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.LambdaExpression"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableLambdaExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:InterLinq.Expressions.SerializableLambdaExpression.Body">
            <summary>
            See <see cref="P:System.Linq.Expressions.LambdaExpression.Body"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableLambdaExpression.Parameters">
            <summary>
            See <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"/>
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableExpressionTyped.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableExpressionTyped.#ctor(System.Linq.Expressions.LambdaExpression,System.Type,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.LambdaExpression"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="delegateType"><see cref="T:System.Type"/> of the delegate.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="T:InterLinq.Expressions.Helpers.SerializableExpressionConverter">
            <summary>
            Converter class to convert <see cref="T:InterLinq.Expressions.SerializableExpression">SerializableExpression's</see>
            to <see cref="T:System.Linq.Expressions.Expression">Expression's</see>.
            </summary>
        </member>
        <member name="T:InterLinq.Expressions.Helpers.SerializableExpressionVisitor">
            <summary>
            This is a basic visitor for serializable expressions.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.#ctor(InterLinq.Expressions.SerializableExpression)">
            <summary>
            Initializes this class.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableExpression"/> to convert.</param>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.Visit">
            <summary>
            Visits the <see cref="T:InterLinq.Expressions.SerializableExpression"/> tree to convert and
            returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.Visit(InterLinq.Expressions.SerializableExpression)">
            <summary>
            Returns an <see cref="T:System.Linq.Expressions.Expression"/> by visiting and converting <paramref name="expression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableExpression"/> to visit.</param>
            <returns>Returns an <see cref="T:System.Linq.Expressions.Expression"/> by visiting and converting <paramref name="expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitCollection``1(System.Collections.IEnumerable)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/>. Each element in <paramref name="enumerable"/>
            will be visited by calling Visit&lt;T&gt;.
            </summary>
            <typeparam name="T">Generic argument of the returned <see cref="T:System.Collections.IEnumerable"/>.</typeparam>
            <param name="enumerable"><see cref="T:System.Collections.Generic.IEnumerable`1"/> to visit.</param>
            <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitObject``1(System.Object)">
            <summary>
            Returns the value of the <see langword="object"/>.
            </summary>
            <typeparam name="T">Return <see cref="T:System.Type"/>.</typeparam>
            <param name="otherObject"><see langword="object"/> to visit.</param>
            <returns>Returns the value of the <see langword="object"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitObjectCollection``1(System.Collections.IEnumerable)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/>. Each element in <paramref name="enumerable"/>
            will be visited by calling <see cref="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitObject``1(System.Object)"/>.
            </summary>
            <typeparam name="T">Generic argument of the returned <see cref="T:System.Collections.IEnumerable"/>.</typeparam>
            <param name="enumerable"><see cref="T:System.Collections.Generic.IEnumerable`1"/> to visit.</param>
            <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitResult(InterLinq.Expressions.SerializableExpression)">
            <summary>
            Returns the value of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression"/> to visit.</param>
            <returns>Returns the value of the <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableBinaryExpression(InterLinq.Expressions.SerializableBinaryExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableBinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableBinaryExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableConditionalExpression(InterLinq.Expressions.SerializableConditionalExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableConditionalExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableConditionalExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableConstantExpression(InterLinq.Expressions.SerializableConstantExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableConstantExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableConstantExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableInvocationExpression(InterLinq.Expressions.SerializableInvocationExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableInvocationExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableInvocationExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableExpressionTyped``1(InterLinq.Expressions.SerializableExpressionTyped)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableExpressionTyped"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableExpressionTyped"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableLambdaExpression(InterLinq.Expressions.SerializableLambdaExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableLambdaExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableLambdaExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableListInitExpression(InterLinq.Expressions.SerializableListInitExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableListInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableListInitExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableMemberExpression(InterLinq.Expressions.SerializableMemberExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableMemberExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableMemberExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableMemberInitExpression(InterLinq.Expressions.SerializableMemberInitExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableMemberInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableMemberInitExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableMethodCallExpression(InterLinq.Expressions.SerializableMethodCallExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableMethodCallExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableMethodCallExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableNewArrayExpression(InterLinq.Expressions.SerializableNewArrayExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableNewArrayExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableNewArrayExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableNewExpression(InterLinq.Expressions.SerializableNewExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableNewExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableNewExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableParameterExpression(InterLinq.Expressions.SerializableParameterExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableParameterExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableParameterExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableTypeBinaryExpression(InterLinq.Expressions.SerializableTypeBinaryExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableTypeBinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableTypeBinaryExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableUnaryExpression(InterLinq.Expressions.SerializableUnaryExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableUnaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableUnaryExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitUnknownSerializableExpression(InterLinq.Expressions.SerializableExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableElementInit(InterLinq.Expressions.SerializableTypes.SerializableElementInit)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableTypes.SerializableElementInit"/>.
            </summary>
            <param name="elementInit"><see cref="T:InterLinq.Expressions.SerializableTypes.SerializableElementInit"/> to visit.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableMemberAssignment(InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment"/>.
            </summary>
            <param name="memberAssignment"><see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment"/> to visit.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableMemberListBinding(InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding"/>.
            </summary>
            <param name="memberListBinding"><see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding"/> to visit.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.VisitSerializableMemberMemberBinding(InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding"/>.
            </summary>
            <param name="memberMemberBinding"><see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding"/> to visit.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.GetResultConstantExpression(InterLinq.Expressions.SerializableConstantExpression)">
            <summary>
            Executes a <see cref="T:InterLinq.Expressions.SerializableConstantExpression"/> and returns the result.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableConstantExpression"/> to convert.</param>
            <returns>Returns the result of a <see cref="T:InterLinq.Expressions.SerializableConstantExpression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.GetResultMethodCallExpression(InterLinq.Expressions.SerializableMethodCallExpression)">
            <summary>
            Executes a <see cref="T:InterLinq.Expressions.SerializableMethodCallExpression"/> and returns the result.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableMethodCallExpression"/> to convert.</param>
            <returns>Returns the result of a <see cref="T:InterLinq.Expressions.SerializableMethodCallExpression"/>.</returns>
        </member>
        <member name="P:InterLinq.Expressions.Helpers.SerializableExpressionVisitor.ExpressionToConvert">
            <summary>
            Gets the <see cref="T:InterLinq.Expressions.SerializableExpression">ExpressionToConvert</see>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.#ctor(InterLinq.Expressions.SerializableExpression,InterLinq.IQueryHandler)">
            <summary>
            Initializes this class.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableExpression"/> to convert.</param>
            <param name="queryHandler"><see cref="T:InterLinq.IQueryHandler"/>.</param>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableBinaryExpression(InterLinq.Expressions.SerializableBinaryExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableBinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableBinaryExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableConditionalExpression(InterLinq.Expressions.SerializableConditionalExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableConditionalExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableConditionalExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableConstantExpression(InterLinq.Expressions.SerializableConstantExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableConstantExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableConstantExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableInvocationExpression(InterLinq.Expressions.SerializableInvocationExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableInvocationExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableInvocationExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableExpressionTyped``1(InterLinq.Expressions.SerializableExpressionTyped)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableExpressionTyped"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableExpressionTyped"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableLambdaExpression(InterLinq.Expressions.SerializableLambdaExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableLambdaExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableLambdaExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableListInitExpression(InterLinq.Expressions.SerializableListInitExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableListInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableListInitExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableMemberExpression(InterLinq.Expressions.SerializableMemberExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableMemberExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableMemberExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableMemberInitExpression(InterLinq.Expressions.SerializableMemberInitExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableMemberInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableMemberInitExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableMethodCallExpression(InterLinq.Expressions.SerializableMethodCallExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableMethodCallExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableMethodCallExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableNewArrayExpression(InterLinq.Expressions.SerializableNewArrayExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableNewArrayExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableNewArrayExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableNewExpression(InterLinq.Expressions.SerializableNewExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableNewExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableNewExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableParameterExpression(InterLinq.Expressions.SerializableParameterExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableParameterExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableParameterExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableTypeBinaryExpression(InterLinq.Expressions.SerializableTypeBinaryExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableTypeBinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableTypeBinaryExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableUnaryExpression(InterLinq.Expressions.SerializableUnaryExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableUnaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableUnaryExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitUnknownSerializableExpression(InterLinq.Expressions.SerializableExpression)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableExpression"/>.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableExpression"/> to visit.</param>
            <returns>Returns the converted <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableElementInit(InterLinq.Expressions.SerializableTypes.SerializableElementInit)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableTypes.SerializableElementInit"/>.
            </summary>
            <param name="elementInit"><see cref="T:InterLinq.Expressions.SerializableTypes.SerializableElementInit"/> to visit.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableMemberAssignment(InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment"/>.
            </summary>
            <param name="memberAssignment"><see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment"/> to visit.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableMemberListBinding(InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding"/>.
            </summary>
            <param name="memberListBinding"><see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding"/> to visit.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.VisitSerializableMemberMemberBinding(InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding)">
            <summary>
            Visits a <see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding"/>.
            </summary>
            <param name="memberMemberBinding"><see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding"/> to visit.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.GetResultConstantExpression(InterLinq.Expressions.SerializableConstantExpression)">
            <summary>
            Executes a <see cref="T:InterLinq.Expressions.SerializableConstantExpression"/> and returns the result.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableConstantExpression"/> to convert.</param>
            <returns>Returns the result of a <see cref="T:InterLinq.Expressions.SerializableConstantExpression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.GetResultMethodCallExpression(InterLinq.Expressions.SerializableMethodCallExpression)">
            <summary>
            Executes a <see cref="T:InterLinq.Expressions.SerializableMethodCallExpression"/> and returns the result.
            </summary>
            <param name="expression"><see cref="T:InterLinq.Expressions.SerializableMethodCallExpression"/> to convert.</param>
            <returns>Returns the result of a <see cref="T:InterLinq.Expressions.SerializableMethodCallExpression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.SerializableExpressionConverter.InvokeMethodCall(InterLinq.Expressions.SerializableMethodCallExpression)">
            <summary>
            Returns the return value of the method call in <paramref name="ex"/>.
            </summary>
            <param name="ex"><see cref="T:InterLinq.Expressions.SerializableMethodCallExpression"/> to invoke.</param>
            <returns>Returns the return value of the method call in <paramref name="ex"/>.</returns>
        </member>
        <member name="P:InterLinq.Expressions.Helpers.SerializableExpressionConverter.QueryHandler">
            <summary>
            Gets the <see cref="T:InterLinq.IQueryHandler">QueryHandler</see>.
            </summary>
        </member>
        <member name="T:InterLinq.Communication.ServerQueryHandler">
            <summary>
            Server implementation of the <see cref="T:InterLinq.IQueryRemoteHandler"/>.
            </summary>
            <seealso cref="T:InterLinq.IQueryRemoteHandler"/>
        </member>
        <member name="M:InterLinq.Communication.ServerQueryHandler.#ctor(InterLinq.IQueryHandler)">
            <summary>
            Initializes this class.
            </summary>
            <param name="queryHandler"><see cref="T:InterLinq.IQueryHandler"/> instance.</param>
        </member>
        <member name="M:InterLinq.Communication.ServerQueryHandler.Retrieve(InterLinq.Expressions.SerializableExpression)">
            <summary>
            Retrieves data from the server by an <see cref="T:InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            </summary>
            <remarks>
            This method's return type depends on the submitted 
            <see cref="T:InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            Here some examples ('T' is the requested type):
            <list type="list">
                <listheader>
                    <term>Method</term>
                    <description>Return Type</description>
                </listheader>
                <item>
                    <term>Select(...)</term>
                    <description>T[]</description>
                </item>
                <item>
                    <term>First(...), Last(...)</term>
                    <description>T</description>
                </item>
                <item>
                    <term>Count(...)</term>
                    <description><see langword="int"/></description>
                </item>
                <item>
                    <term>Contains(...)</term>
                    <description><see langword="bool"/></description>
                </item>
            </list>
            </remarks>
            <param name="expression">
                <see cref="T:InterLinq.Expressions.SerializableExpression">Expression</see> tree 
                containing selection and projection.
            </param>
            <returns>Returns requested data.</returns>
            <seealso cref="M:InterLinq.IQueryRemoteHandler.Retrieve(InterLinq.Expressions.SerializableExpression)"/>
        </member>
        <member name="M:InterLinq.Communication.ServerQueryHandler.RetrieveGeneric``1(InterLinq.Expressions.SerializableExpression)">
            <summary>
            Retrieves data from the server by an <see cref="T:InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            </summary>
            <typeparam name="T">Type of the <see cref="T:System.Linq.IQueryable"/>.</typeparam>
            <param name="serializableExpression">
                <see cref="T:InterLinq.Expressions.SerializableExpression">Expression</see> tree 
                containing selection and projection.
            </param>
            <returns>Returns requested data.</returns>
            <seealso cref="M:InterLinq.IQueryRemoteHandler.Retrieve(InterLinq.Expressions.SerializableExpression)"/>
            <remarks>
            This method's return type depends on the submitted 
            <see cref="T:InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            Here some examples ('T' is the requested type):
            <list type="list">
                <listheader>
                    <term>Method</term>
                    <description>Return Type</description>
                </listheader>
                <item>
                    <term>Select(...)</term>
                    <description>T[]</description>
                </item>
                <item>
                    <term>First(...), Last(...)</term>
                    <description>T</description>
                </item>
                <item>
                    <term>Count(...)</term>
                    <description><see langword="int"/></description>
                </item>
                <item>
                    <term>Contains(...)</term>
                    <description><see langword="bool"/></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:InterLinq.Communication.ServerQueryHandler.RetrieveNonGenericObject(InterLinq.Expressions.SerializableExpression)">
            <summary>
            Retrieves data from the server by an <see cref="T:InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            </summary>
            <param name="serializableExpression">
                <see cref="T:InterLinq.Expressions.SerializableExpression">Expression</see> tree 
                containing selection and projection.
            </param>
            <returns>Returns requested data.</returns>
            <remarks>
            This method's return type depends on the submitted 
            <see cref="T:InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            Here some examples ('T' is the requested type):
            <list type="list">
                <listheader>
                    <term>Method</term>
                    <description>Return Type</description>
                </listheader>
                <item>
                    <term>Select(...)</term>
                    <description>T[]</description>
                </item>
                <item>
                    <term>First(...), Last(...)</term>
                    <description>T</description>
                </item>
                <item>
                    <term>Count(...)</term>
                    <description><see langword="int"/></description>
                </item>
                <item>
                    <term>Contains(...)</term>
                    <description><see langword="bool"/></description>
                </item>
            </list>
            </remarks>
            <seealso cref="M:InterLinq.IQueryRemoteHandler.Retrieve(InterLinq.Expressions.SerializableExpression)"/>
        </member>
        <member name="M:InterLinq.Communication.ServerQueryHandler.HandleExceptionInRetrieve(System.Exception)">
            <summary>
            Handles an <see cref="T:System.Exception"/> occured in the 
            <see cref="M:InterLinq.IQueryRemoteHandler.Retrieve(InterLinq.Expressions.SerializableExpression)"/> Method.
            </summary>
            <param name="exception">
            Thrown <see cref="T:System.Exception"/> 
            in <see cref="M:InterLinq.IQueryRemoteHandler.Retrieve(InterLinq.Expressions.SerializableExpression)"/> Method.
            </param>
        </member>
        <member name="M:InterLinq.Communication.ServerQueryHandler.Dispose">
            <summary>
            Disposes the server instance.
            </summary>
        </member>
        <member name="P:InterLinq.Communication.ServerQueryHandler.QueryHandler">
            <summary>
            Gets the <see cref="T:InterLinq.IQueryHandler"/>.
            </summary>
        </member>
        <member name="T:InterLinq.Types.Anonymous.InterLinqGroupingBase">
            <summary>
            Serializable abstraction of LINQ's <see cref="T:System.Linq.IGrouping`2"/>.
            </summary>
            <seealso cref="T:System.Linq.IGrouping`2"/>
        </member>
        <member name="M:InterLinq.Types.Anonymous.InterLinqGroupingBase.SetKey(System.Object)">
            <summary>
            Sets the grouping <paramref name="key"/>.
            </summary>
            <param name="key">Key to set.</param>
        </member>
        <member name="M:InterLinq.Types.Anonymous.InterLinqGroupingBase.SetElements(System.Object)">
            <summary>
            Sets the grouping <paramref name="elements"/>.
            </summary>
            <param name="elements">Elements to set.</param>
        </member>
        <member name="T:InterLinq.Types.Anonymous.InterLinqGrouping`2">
            <summary>
            Serializable abstraction of LINQ's <see cref="T:System.Linq.IGrouping`2"/>.
            </summary>
            <seealso cref="T:InterLinq.Types.Anonymous.InterLinqGroupingBase"/>
            <seealso cref="T:System.Linq.IGrouping`2"/>
        </member>
        <member name="M:InterLinq.Types.Anonymous.InterLinqGrouping`2.SetElements(System.Object)">
            <summary>
            Sets the grouping <paramref name="elements"/>.
            </summary>
            <param name="elements">Elements to set.</param>
        </member>
        <member name="M:InterLinq.Types.Anonymous.InterLinqGrouping`2.SetKey(System.Object)">
            <summary>
            Sets the grouping <paramref name="key"/>.
            </summary>
            <param name="key">Key to set.</param>
        </member>
        <member name="M:InterLinq.Types.Anonymous.InterLinqGrouping`2.#ctor">
            <summary>
            Initializes this class.
            </summary>
        </member>
        <member name="M:InterLinq.Types.Anonymous.InterLinqGrouping`2.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through the collection.
            </returns>
        </member>
        <member name="M:InterLinq.Types.Anonymous.InterLinqGrouping`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that iterates through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that iterates through the collection.
            </returns>
        </member>
        <member name="P:InterLinq.Types.Anonymous.InterLinqGrouping`2.Elements">
            <summary>
            Gets or sets the elements.
            </summary>
        </member>
        <member name="P:InterLinq.Types.Anonymous.InterLinqGrouping`2.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="T:InterLinq.Communication.Wcf.ServiceHelper">
            <summary>
            Helper class providing different methods required by 
            WCF Clients / Servers.
            </summary>
        </member>
        <member name="M:InterLinq.Communication.Wcf.ServiceHelper.GetEndpoint">
            <summary>
            Returns the default Service <see cref="T:System.ServiceModel.EndpointAddress"/>.
            </summary>
            <returns>Returns the default Service <see cref="T:System.ServiceModel.EndpointAddress"/>.</returns>
        </member>
        <member name="M:InterLinq.Communication.Wcf.ServiceHelper.GetEndpoint(System.String,System.String,System.String)">
            <summary>
            Returns a Service <see cref="T:System.ServiceModel.EndpointAddress"/>.
            </summary>
            <param name="serverAddress">Address of the Server.</param>
            <param name="serverPort">Port of the Server.</param>
            <param name="servicePath">Path of the WCF Service.</param>
            <returns>Returns a Service <see cref="T:System.ServiceModel.EndpointAddress"/>.</returns>
        </member>
        <member name="M:InterLinq.Communication.Wcf.ServiceHelper.GetServiceUri">
            <summary>
            Returns the default Service URI as <see langword="string" />.
            </summary>
            <returns>Returns the default Service URI as <see langword="string" />.</returns>
        </member>
        <member name="M:InterLinq.Communication.Wcf.ServiceHelper.GetServiceUri(System.String,System.String,System.String)">
            <summary>
            Returns a Service URI as <see langword="string"/>.
            </summary>
            <param name="serverAddress">Address of the Server.</param>
            <param name="serverPort">Port of the Server.</param>
            <param name="servicePath">Path of the WCF Service.</param>
            <returns>Returns a Service URI as <see langword="string"/>.</returns>
        </member>
        <member name="M:InterLinq.Communication.Wcf.ServiceHelper.GetNetTcpBinding">
            <summary>
            Returns a default <see cref="T:System.ServiceModel.NetTcpBinding"/>.
            </summary>
            <remarks>
            The <see cref="T:System.ServiceModel.NetTcpBinding"/> looks like this:
            
            <list type="list">
                <listheader>
                    <term>Property</term>
                    <description>Value</description>
                </listheader>
                <item>
                    <term><see cref="P:System.ServiceModel.NetTcpSecurity.Mode">Security.Mode</see></term>
                    <description><see cref="F:System.ServiceModel.SecurityMode.None"/></description>
                </item>
                <item>
                    <term><see cref="P:System.ServiceModel.NetTcpBinding.MaxBufferSize"/></term>
                    <description><see cref="F:System.Int32.MaxValue"/></description>
                </item>
                <item>
                    <term><see cref="P:System.ServiceModel.NetTcpBinding.MaxReceivedMessageSize"/></term>
                    <description><see cref="F:System.Int32.MaxValue"/></description>
                </item>
                <item>
                    <term><see cref="P:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength">ReaderQuotas.MaxArrayLength</see></term>
                    <description><see cref="F:System.Int32.MaxValue"/></description>
                </item>
                <item>
                    <term><see cref="P:System.ServiceModel.Channels.Binding.OpenTimeout">OpenTimeout</see></term>
                    <description>new <see cref="T:System.TimeSpan"/>( 0, 10, 0 ) = 10 Minutes</description>
                </item>
                <item>
                    <term><see cref="P:System.ServiceModel.Channels.Binding.CloseTimeout">CloseTimeout</see></term>
                    <description>new <see cref="T:System.TimeSpan"/>( 0, 10, 0 ) = 10 Minutes</description>
                </item>
                <item>
                    <term><see cref="P:System.ServiceModel.Channels.Binding.SendTimeout">SendTimeout</see></term>
                    <description>new <see cref="T:System.TimeSpan"/>( 0, 10, 0 ) = 10 Minutes</description>
                </item>
            </list>
            </remarks>
            <returns>Returns a default <see cref="T:System.ServiceModel.NetTcpBinding"/>.</returns>
        </member>
        <member name="T:InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.MemberAssignment"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment.#ctor(System.Linq.Expressions.MemberAssignment,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.MemberAssignment"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="memberAssignment">The original, not serializable <see cref="T:System.Linq.Expressions.MemberBinding"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="P:InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.MemberBinding"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment.Expression">
            <summary>
            See <see cref="P:System.Linq.Expressions.MemberAssignment.Expression"/>
            </summary>
        </member>
        <member name="T:InterLinq.Expressions.ExpressionConversionHelper">
            <summary>
            Static helper class providing several C# 3.0 Extension Methods.
            </summary>
            <seealso cref="T:InterLinq.Expressions.SerializableExpression"/>
            <seealso cref="T:System.Linq.Expressions.Expression"/>
            <seealso cref="T:System.Collections.IEnumerable"/>
        </member>
        <member name="M:InterLinq.Expressions.ExpressionConversionHelper.MakeSerializable(System.Linq.Expressions.Expression)">
            <summary>
            Extension Method for <see cref="T:System.Linq.Expressions.Expression"/>.
            Converts an <see cref="T:System.Linq.Expressions.Expression"/> to a <see cref="T:InterLinq.Expressions.SerializableExpression"/>.
            </summary>
            <param name="exp">Extended class instance.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableExpression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.ExpressionConversionHelper.MakeSerializable(System.Linq.Expressions.Expression,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Extension Method for <see cref="T:System.Linq.Expressions.Expression"/>.
            Converts an <see cref="T:System.Linq.Expressions.Expression"/> to a <see cref="T:InterLinq.Expressions.SerializableExpression"/>.
            </summary>
            <param name="exp">Extended class instance.</param>
            <param name="expConverter"><see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> instance.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableExpression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.ExpressionConversionHelper.MakeSerializable``1(System.Linq.Expressions.Expression,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Extension Method for <see cref="T:System.Linq.Expressions.Expression"/>.
            Converts an <see cref="T:System.Linq.Expressions.Expression"/> to a <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Return type (must be subclass of <see cref="T:InterLinq.Expressions.SerializableExpression"/>.</typeparam>
            <param name="exp">Extended class instance.</param>
            <param name="expConverter"><see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> instance.</param>
            <returns>Returns the converted <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.ExpressionConversionHelper.MakeSerializableCollection``1(System.Collections.IEnumerable,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Extension Method for <see cref="T:System.Collections.IEnumerable"/>.
            Converts an <see cref="T:System.Collections.IEnumerable"/> to a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.
            </summary>
            <typeparam name="T">Return type (must be subclass of <see cref="T:InterLinq.Expressions.SerializableExpression"/>.</typeparam>
            <param name="exp">Extended class instance.</param>
            <param name="expConverter"><see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> instance.</param>
            <returns>Returns the converted <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.ExpressionConversionHelper.Convert(InterLinq.Expressions.SerializableExpression,InterLinq.IQueryHandler)">
            <summary>
            Extension Method for <see cref="T:System.Collections.IEnumerable"/>.
            Returns the result of the executed <see cref="T:InterLinq.Expressions.SerializableExpression"/>.
            </summary>
            <param name="exp">Extended class instance.</param>
            <param name="linqHandler"><see cref="T:InterLinq.IQueryHandler"/>.</param>
            <returns>Returns the result of the executed <see cref="T:InterLinq.Expressions.SerializableExpression"/>.</returns>
        </member>
        <member name="T:InterLinq.InterLinqQueryBase">
            <summary>
            Base Class for InterLinq Queries.
            </summary>
        </member>
        <member name="F:InterLinq.InterLinqQueryBase.elementType">
            <summary>
            See <see cref="T:System.Type">Element Type</see> of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="F:InterLinq.InterLinqQueryBase.elementInterLinqType">
            <summary>
            See <see cref="T:InterLinq.Types.InterLinqType">InterLINQ Element Type</see> of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="P:InterLinq.InterLinqQueryBase.ElementType">
            <summary>
            Gets or sets a <see cref="T:System.Type">Element Type</see> of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="P:InterLinq.InterLinqQueryBase.ElementInterLinqType">
            <summary>
            Gets or sets a <see cref="T:InterLinq.Types.InterLinqType">InterLINQ Element Type</see> of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="T:InterLinq.InterLinqQuery`1">
            <summary>
            Standard implementation of an InterLinqQuery.
            </summary>
            <typeparam name="T">The type of the content of the data source.</typeparam>
            <seealso cref="T:InterLinq.InterLinqQueryBase"/>
        </member>
        <member name="M:InterLinq.InterLinqQuery`1.#ctor(System.Linq.IQueryProvider)">
            <summary>
            Initializes this Query with the arguments.
            </summary>
            <remarks>
            This constructor creates a <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            The arguments will be checked. These exceptions will be thrown...
                ... when "provider" is null:    <see cref="T:System.ArgumentNullException"/>
            </remarks>
            <param name="provider"><see cref="T:System.Linq.IQueryProvider"/> to set.</param>
        </member>
        <member name="M:InterLinq.InterLinqQuery`1.#ctor(System.Linq.IQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Initializes this Query with the arguments.
            </summary>
            <remarks>
            The arguments will be checked. These exceptions will be thrown...
            <list type="list">
                <listheader>
                    <term>Condition</term>
                    <description>Thrown Exception</description>
                </listheader>
                <item>
                    <term>... when "provider" is null</term>
                    <description><see cref="T:System.ArgumentNullException"/></description>
                </item>
                <item>
                    <term>... when "expression" is null</term>
                    <description><see cref="T:System.ArgumentNullException"/></description>
                </item>
                <item>
                    <term>... when "expression" is not assignable from <see cref="T:System.Linq.IQueryable`1"/></term>
                    <description><see cref="T:System.ArgumentException"/></description>
                </item>
            </list>                                  
            </remarks>
            <param name="provider"><see cref="T:System.Linq.IQueryProvider"/> to set.</param>
            <param name="expression"><see cref="P:InterLinq.InterLinqQuery`1.Expression"/> to set.</param>
        </member>
        <member name="M:InterLinq.InterLinqQuery`1.Initialize(System.Linq.IQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Checks the method arguments and initializes this Query object.
            </summary>
            <param name="iQueryProvider"><see cref="T:System.Linq.IQueryProvider"/> to set.</param>
            <param name="expr"><see cref="P:InterLinq.InterLinqQuery`1.Expression"/> to set.</param>
        </member>
        <member name="M:InterLinq.InterLinqQuery`1.ToString">
            <summary>
            Returns a <see langword="string"/> that represents this instance.
            </summary>
            <remarks>
            The following <see langword="string"/> is returned:
            <c>Type&lt;GenericArgumentType&gt;</c>
            </remarks>
            <returns>A <see langword="string"/> that represents this instance.</returns>
        </member>
        <member name="M:InterLinq.InterLinqQuery`1.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through the returned result
            of this query.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate 
            through the returned result of this query.
            </returns>
        </member>
        <member name="M:InterLinq.InterLinqQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that iterates through the returned result
            of this query.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate 
            through the returned result of this query.
            </returns>
        </member>
        <member name="P:InterLinq.InterLinqQuery`1.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the 
            <see cref="P:InterLinq.InterLinqQuery`1.Expression"/> tree associated with this instance of 
            <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
            <remarks>
            A <see cref="T:System.Type"/> that represents the type of the element(s) that are returned
            when the <see cref="P:InterLinq.InterLinqQuery`1.Expression"/> tree associated with this object is executed.
            </remarks>
        </member>
        <member name="P:InterLinq.InterLinqQuery`1.Provider">
            <summary>
            Gets the <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.
            </summary>
            <remarks>
            The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.
            </remarks>
        </member>
        <member name="P:InterLinq.InterLinqQuery`1.Expression">
            <summary>
            Gets the <see cref="P:InterLinq.InterLinqQuery`1.Expression"/> tree that is associated with the instance of 
            <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <remarks>
            The <see cref="P:InterLinq.InterLinqQuery`1.Expression"/> that is associated with this instance of 
            <see cref="T:System.Linq.IQueryable"/>.
            </remarks>
        </member>
        <member name="T:InterLinq.Expressions.SerializableNewExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.NewArrayExpression"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableNewExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableNewExpression.#ctor(System.Linq.Expressions.NewExpression,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.NewExpression"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="P:InterLinq.Expressions.SerializableNewExpression.Arguments">
            <summary>
            See <see cref="P:System.Linq.Expressions.NewExpression.Arguments"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableNewExpression.Members">
            <summary>
            See <see cref="P:System.Linq.Expressions.NewExpression.Members"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableNewExpression.Constructor">
            <summary>
            See <see cref="P:System.Linq.Expressions.NewExpression.Constructor"/>
            </summary>
        </member>
        <member name="T:InterLinq.Communication.Remoting.ServerQueryRemotingHandler">
            <summary>
            Server handler class to retrieve information via .NET Remoting.
            </summary>
            <seealso cref="T:InterLinq.IQueryRemoteHandler"/>
            <seealso cref="T:System.MarshalByRefObject"/>
        </member>
        <member name="M:InterLinq.Communication.Remoting.ServerQueryRemotingHandler.#ctor">
            <summary>
            Initializes this class.
            </summary>
        </member>
        <member name="M:InterLinq.Communication.Remoting.ServerQueryRemotingHandler.#ctor(InterLinq.IQueryHandler)">
            <summary>
            Initializes this class.
            </summary>
            <param name="innerHandler">Inner Handler of this Server.</param>
        </member>
        <member name="M:InterLinq.Communication.Remoting.ServerQueryRemotingHandler.RegisterService(InterLinq.IQueryRemoteHandler)">
            <summary>
            Registers the <see cref="T:InterLinq.IQueryRemoteHandler"/> as service.
            </summary>
            <param name="serviceHandler"><see cref="T:InterLinq.IQueryRemoteHandler"/> to register.</param>
        </member>
        <member name="M:InterLinq.Communication.Remoting.ServerQueryRemotingHandler.GetRegisteredService">
            <summary>
            Returns the registered <see cref="T:InterLinq.IQueryRemoteHandler"/>.
            </summary>
            <returns>Returns the registered <see cref="T:InterLinq.IQueryRemoteHandler"/>.</returns>
        </member>
        <member name="M:InterLinq.Communication.Remoting.ServerQueryRemotingHandler.InitializeLifetimeService">
            <summary>
            This methods is overwritten because this class is made for a singleton service and should
            live until the application terminates.
            </summary>
            <returns>This method will always return <see langword="null"/></returns>
        </member>
        <member name="M:InterLinq.Communication.Remoting.ServerQueryRemotingHandler.Start(System.Boolean)">
            <summary>
            Publishes this object for remoting.
            </summary>
            <param name="createDefaultChannels">
            Determinates if the default channels should be created or not.
            <seealso cref="T:InterLinq.Communication.Remoting.RemotingConstants"/>
            </param>
        </member>
        <member name="M:InterLinq.Communication.Remoting.ServerQueryRemotingHandler.Start(System.String,System.Boolean)">
            <summary>
            Publishes this object for remoting.
            </summary>
            <param name="objectUri">The remoting uri of the object.</param>
            <param name="createDefaultChannels">
            Determinates if the default channels should be created or not.
            <seealso cref="T:InterLinq.Communication.Remoting.RemotingConstants"/>
            </param>
        </member>
        <member name="M:InterLinq.Communication.Remoting.ServerQueryRemotingHandler.Retrieve(InterLinq.Expressions.SerializableExpression)">
            <summary>
            Retrieves data from the server by an <see cref="T:InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            </summary>
            <remarks>
            This method's return type depends on the submitted 
            <see cref="T:InterLinq.Expressions.SerializableExpression">Expression</see> tree.
            Here some examples ('T' is the requested type):
            <list type="list">
                <listheader>
                    <term>Method</term>
                    <description>Return Type</description>
                </listheader>
                <item>
                    <term>Select(...)</term>
                    <description>T[]</description>
                </item>
                <item>
                    <term>First(...), Last(...)</term>
                    <description>T</description>
                </item>
                <item>
                    <term>Count(...)</term>
                    <description><see langword="int"/></description>
                </item>
                <item>
                    <term>Contains(...)</term>
                    <description><see langword="bool"/></description>
                </item>
            </list>
            </remarks>
            <param name="expression">
                <see cref="T:InterLinq.Expressions.SerializableExpression">Expression</see> tree 
                containing selection and projection.
            </param>
            <returns>Returns requested data.</returns>
            <seealso cref="M:InterLinq.IQueryRemoteHandler.Retrieve(InterLinq.Expressions.SerializableExpression)"/>
        </member>
        <member name="P:InterLinq.Communication.Remoting.ServerQueryRemotingHandler.InnerHandler">
            <summary>
            Gets the <see cref="T:InterLinq.IQueryRemoteHandler"/>.
            </summary>
        </member>
        <member name="T:InterLinq.Expressions.SerializableParameterExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.ParameterExpression"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableParameterExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableParameterExpression.#ctor(System.Linq.Expressions.ParameterExpression,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.ParameterExpression"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableParameterExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:InterLinq.Expressions.SerializableParameterExpression.Name">
            <summary>
            See <see cref="P:System.Linq.Expressions.ParameterExpression.Name"/>
            </summary>
        </member>
        <member name="T:InterLinq.Expressions.SerializableMethodCallExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableMethodCallExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableMethodCallExpression.#ctor(System.Linq.Expressions.MethodCallExpression,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.MethodCallExpression"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableMethodCallExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:InterLinq.Expressions.SerializableMethodCallExpression.Object">
            <summary>
            See <see cref="P:System.Linq.Expressions.MethodCallExpression.Object"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableMethodCallExpression.Arguments">
            <summary>
            See <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableMethodCallExpression.Method">
            <summary>
            See <see cref="P:System.Linq.Expressions.MethodCallExpression.Method"/>
            </summary>
        </member>
        <member name="T:InterLinq.Communication.Wcf.ServerQueryWcfHandler">
            <summary>
            Server class to retrieve information via WCF.
            </summary>
            <seealso cref="T:InterLinq.Communication.ServerQueryHandler"/>
            <seealso cref="T:InterLinq.IQueryRemoteHandler"/>
        </member>
        <member name="M:InterLinq.Communication.Wcf.ServerQueryWcfHandler.#ctor(InterLinq.IQueryHandler)">
            <summary>
            Initializes this class.
            </summary>
            <param name="queryHandler"><see cref="T:InterLinq.IQueryHandler"/> instance.</param>
        </member>
        <member name="M:InterLinq.Communication.Wcf.ServerQueryWcfHandler.Start">
            <summary>
            Starts a default Service Instance.
            </summary>
        </member>
        <member name="M:InterLinq.Communication.Wcf.ServerQueryWcfHandler.Start(System.Boolean)">
            <summary>
            Starts a Service Instance using the settings in your App.config.
            </summary>
            <param name="useAppConfig">Uses App.config WCF Service configuration elements if true.</param>
        </member>
        <member name="M:InterLinq.Communication.Wcf.ServerQueryWcfHandler.Start(System.ServiceModel.Channels.Binding,System.String)">
            <summary>
            Starts the Service Instance.
            </summary>
            <param name="binding">Predefined <see cref="T:System.ServiceModel.Channels.Binding"/>.</param>
            <param name="serviceUri">Service URI as <see langword="string"/>.</param>
        </member>
        <member name="M:InterLinq.Communication.Wcf.ServerQueryWcfHandler.Stop">
            <summary>
            Stops the Service Instance.
            </summary>
        </member>
        <member name="M:InterLinq.Communication.Wcf.ServerQueryWcfHandler.Dispose">
            <summary>
            Disposes the Service Instance.
            </summary>
        </member>
        <member name="M:InterLinq.Communication.Wcf.ServerQueryWcfHandler.HandleExceptionInRetrieve(System.Exception)">
            <summary>
            Handles an <see cref="T:System.Exception"/> occured in the 
            <see cref="M:InterLinq.IQueryRemoteHandler.Retrieve(InterLinq.Expressions.SerializableExpression)"/> Method.
            </summary>
            <param name="exception">
            Thrown <see cref="T:System.Exception"/> 
            in <see cref="M:InterLinq.IQueryRemoteHandler.Retrieve(InterLinq.Expressions.SerializableExpression)"/> Method.
            </param>
        </member>
        <member name="T:InterLinq.Types.Anonymous.AnonymousMetaProperty">
            <summary>
            Class that represents a property of an anonymous type.
            </summary>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaProperty.#ctor">
            <summary>
            Default constructor for serialization
            </summary>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaProperty.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Instance an instance of the class <see cref="T:InterLinq.Types.Anonymous.AnonymousMetaProperty"/> with a <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="property"><see cref="T:System.Reflection.PropertyInfo"/> to create a <see cref="T:InterLinq.Types.Anonymous.AnonymousMetaProperty"/> from.</param>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaProperty.Equals(System.Object)">
            <summary>
            Overrides the equality check.
            </summary>
            <param name="obj">Object to compare with.</param>
            <returns>True, if the other <see langword="object"/> is equal to this. False, if not.</returns>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousMetaProperty.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see langword="object"/>.</returns>
        </member>
        <member name="P:InterLinq.Types.Anonymous.AnonymousMetaProperty.PropertyType">
            <summary>
            The <see cref="T:InterLinq.Types.InterLinqType"/> of the property.
            </summary>
        </member>
        <member name="P:InterLinq.Types.Anonymous.AnonymousMetaProperty.Name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="T:InterLinq.InterLinqContext">
            <summary>
            Abstract base class holding an <see cref="T:InterLinq.IQueryHandler"/>.
            The usage of the <see cref="T:InterLinq.InterLinqContext"/> is comparable
            with <see cref="T:System.Data.Linq.DataContext"/>.
            </summary>
            <example>
            The following code illustrates a possible implementation of <see cref="T:InterLinq.InterLinqContext"/>.
            <code>
                public class CompanyContext : InterLinqContext {
                   public CompanyContext( IQueryHandler queryHandler ) : base( queryHandler ) { }
                  
                    public IQueryable&lt;Company&gt; Companies {
                        get { return QueryHander.GetTable&lt;Company&gt;(); }
                    }
                
                    public IQueryable&lt;Company&gt; Departments {
                        get { return QueryHander.GetTable&lt;Departments&gt;(); }
                    }
                
                    public IQueryable&lt;Company&gt; Employees {
                        get { return QueryHander.GetTable&lt;Employee&gt;(); }
                    }
                }
            </code>
            </example>
        </member>
        <member name="M:InterLinq.InterLinqContext.#ctor(InterLinq.IQueryHandler)">
            <summary>
            Initializes this class.
            </summary>
            <param name="queryHandler"><see cref="T:InterLinq.IQueryHandler"/> instance.</param>
        </member>
        <member name="P:InterLinq.InterLinqContext.QueryHander">
            <summary>
            Gets the <see cref="T:InterLinq.IQueryHandler"/>.
            </summary>
        </member>
        <member name="T:InterLinq.Expressions.Helpers.RewriteExpressionVisitor">
            <summary>
            This is a visitor that rewrites an expression tree during visiting.
            The result is the same tree like the one, given to the visitor.
            </summary>
            <seealso cref="T:InterLinq.Expressions.Helpers.ExpressionVisitor"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Creates a new <see cref="T:InterLinq.Expressions.Helpers.RewriteExpressionVisitor"/> with an <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression"/> to initialize the visitor.</param>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitExpression(System.Linq.Expressions.Expression)">
            <summary>
            Visit the <see cref="T:System.Linq.Expressions.Expression"/> and returns an expression.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression"/> to execute.</param>
            <returns>Returns an <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.BinaryExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.BinaryExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitBinaryExpression(System.Linq.Expressions.BinaryExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitConditionalExpression(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ConditionalExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.ConditionalExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitConditionalExpression(System.Linq.Expressions.ConditionalExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitConstantExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ConstantExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.ConstantExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitConstantExpression(System.Linq.Expressions.ConstantExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitTypedExpression``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.Expression`1"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression`1"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.Expression`1"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitTypedExpression``1(System.Linq.Expressions.Expression{``0})"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitInvocationExpression(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.InvocationExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.InvocationExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.InvocationExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitInvocationExpression(System.Linq.Expressions.InvocationExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitLambdaExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.LambdaExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.LambdaExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.LambdaExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitLambdaExpression(System.Linq.Expressions.LambdaExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitListInitExpression(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.ListInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ListInitExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.ListInitExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitListInitExpression(System.Linq.Expressions.ListInitExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MemberExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MemberExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.MemberExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberExpression(System.Linq.Expressions.MemberExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitMemberInitExpression(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MemberInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MemberInitExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.MemberInitExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberInitExpression(System.Linq.Expressions.MemberInitExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MethodCallExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMethodCallExpression(System.Linq.Expressions.MethodCallExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitNewArrayExpression(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.NewArrayExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.NewArrayExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitNewArrayExpression(System.Linq.Expressions.NewArrayExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitNewExpression(System.Linq.Expressions.NewExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.NewExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.NewExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.NewExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitNewExpression(System.Linq.Expressions.NewExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitParameterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.ParameterExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ParameterExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.ParameterExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitParameterExpression(System.Linq.Expressions.ParameterExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitTypeBinaryExpression(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.TypeBinaryExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitTypeBinaryExpression(System.Linq.Expressions.TypeBinaryExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitUnaryExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.UnaryExpression"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.UnaryExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitUnaryExpression(System.Linq.Expressions.UnaryExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.ElementInit"/>.
            </summary>
            <param name="elementInit"><see cref="T:System.Linq.Expressions.ElementInit"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.ElementInit"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MemberAssignment"/>.
            </summary>
            <param name="memberAssignment"><see cref="T:System.Linq.Expressions.MemberAssignment"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.MemberAssignment"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MemberListBinding"/>.
            </summary>
            <param name="memberListBinding"><see cref="T:System.Linq.Expressions.MemberListBinding"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.MemberListBinding"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.RewriteExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding"/>.
            </summary>
            <param name="memberMemberBinding"><see cref="T:System.Linq.Expressions.MemberMemberBinding"/> to visit.</param>
            <returns>Returns a <see cref="T:System.Linq.Expressions.MemberMemberBinding"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)"/>
        </member>
        <member name="T:InterLinq.Types.Anonymous.AnonymousObject">
            <summary>
            Represents an instance of an <see cref="T:InterLinq.Types.Anonymous.AnonymousMetaType"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousObject.#ctor">
            <summary>
            Instance a new instance of the class <see cref="T:InterLinq.Types.Anonymous.AnonymousObject"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousObject.#ctor(System.Collections.Generic.IEnumerable{InterLinq.Types.Anonymous.AnonymousProperty})">
            <summary>
            Instance a new instance of the class <see cref="T:InterLinq.Types.Anonymous.AnonymousObject"/>
            and initialze it with a list of properties.
            </summary>
            <param name="properties"><see cref="T:InterLinq.Types.Anonymous.AnonymousProperty">Anonymous properties</see> to add.</param>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousObject.ToString">
            <summary>
            Returns a string representing this <see cref="T:InterLinq.Types.Anonymous.AnonymousObject"/>.
            </summary>
            <returns>Returns a string representing this <see cref="T:InterLinq.Types.Anonymous.AnonymousObject"/>.</returns>
        </member>
        <member name="P:InterLinq.Types.Anonymous.AnonymousObject.Properties">
            <summary>
            The properties of the instance.
            </summary>
        </member>
        <member name="T:InterLinq.Types.InterLinqConstructorInfo">
            <summary>
            InterLINQ representation of <see cref="T:System.Reflection.ConstructorInfo"/>.
            </summary>
            <seealso cref="T:InterLinq.Types.InterLinqMethodBase"/>
            <seealso cref="T:InterLinq.Types.InterLinqMemberInfo"/>
            <seealso cref="T:System.Reflection.ConstructorInfo"/>
        </member>
        <member name="M:InterLinq.Types.InterLinqConstructorInfo.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:InterLinq.Types.InterLinqConstructorInfo.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="constrcutorInfo">Represented CLR <see cref="T:System.Reflection.ConstructorInfo"/>.</param>
        </member>
        <member name="M:InterLinq.Types.InterLinqConstructorInfo.GetClrVersion">
            <summary>
            Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <returns>Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="P:InterLinq.Types.InterLinqConstructorInfo.MemberType">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberTypes">MemberType</see>.
            </summary>
            <seealso cref="P:InterLinq.Types.InterLinqMemberInfo.MemberType"/>
            <seealso cref="P:System.Reflection.ConstructorInfo.MemberType"/>
        </member>
        <member name="T:InterLinq.Expressions.SerializableNewArrayExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.NewArrayExpression"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableNewArrayExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableNewArrayExpression.#ctor(System.Linq.Expressions.NewArrayExpression,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.NewArrayExpression"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableNewArrayExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:InterLinq.Expressions.SerializableNewArrayExpression.Expressions">
            <summary>
            See <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions"/>
            </summary>
        </member>
        <member name="T:InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.MemberListBinding"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding.#ctor(System.Linq.Expressions.MemberListBinding,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.MemberListBinding"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="memberListBinding">The original, not serializable <see cref="T:System.Linq.Expressions.MemberBinding"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.MemberBinding"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding.Initializers">
            <summary>
            See <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers"/>
            </summary>
        </member>
        <member name="T:InterLinq.Expressions.SerializableTypeBinaryExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypeBinaryExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypeBinaryExpression.#ctor(System.Linq.Expressions.TypeBinaryExpression,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="P:InterLinq.Expressions.SerializableTypeBinaryExpression.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="P:InterLinq.Expressions.SerializableTypeBinaryExpression.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypeBinaryExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="P:InterLinq.Expressions.SerializableTypeBinaryExpression.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:InterLinq.Expressions.SerializableTypeBinaryExpression.Expression">
            <summary>
            See <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableTypeBinaryExpression.TypeOperand">
            <summary>
            See <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand"/>
            </summary>
        </member>
        <member name="T:InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractSerializerOperationBehavior">
            <summary>
            Represents the run-time behavior of the <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractSerializerOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior"/>
            class with the specified operation.
            </summary>
            <param name="operationDescription">An <see cref="T:System.ServiceModel.Description.OperationDescription"/> that represents the operation.</param>
        </member>
        <member name="M:InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractSerializerOperationBehavior.CreateSerializer(System.Type,System.String,System.String,System.Collections.Generic.IList{System.Type})">
            <summary>
            Creates an instance of a class that inherits from <see cref="T:System.Runtime.Serialization.XmlObjectSerializer"/> 
            for serialization and deserialization operations.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to create the serializer for.</param>
            <param name="name">The name of the generated <see cref="T:System.Type"/>.</param>
            <param name="ns">The namespace of the generated <see cref="T:System.Type"/>.</param>
            <param name="knownTypes">An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Type"/> that contains known types.</param>
            <returns>An instance of a class that inherits from the <see cref="T:System.Runtime.Serialization.XmlObjectSerializer"/> class.</returns>
        </member>
        <member name="M:InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractSerializerOperationBehavior.CreateSerializer(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IList{System.Type})">
            <summary>
            Creates an instance of a class that inherits from <see cref="T:System.Runtime.Serialization.XmlObjectSerializer"/>
            for serialization and deserialization operations with an <see cref="T:System.Xml.XmlDictionaryString"/>
            that contains the namespace.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to create the serializer for.</param>
            <param name="name">The name of the generated <see cref="T:System.Type"/>.</param>
            <param name="ns">An <see cref="T:System.Xml.XmlDictionaryString"/> that contains the namespace of the serialized <see cref="T:System.Type"/>.</param>
            <param name="knownTypes">An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Type"/> that contains known types.</param>
            <returns>An instance of a class that inherits from the <see cref="T:System.Runtime.Serialization.XmlObjectSerializer"/> class.</returns>
        </member>
        <member name="T:InterLinq.Types.InterLinqPropertyInfo">
            <summary>
            InterLINQ representation of <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <seealso cref="T:InterLinq.Types.InterLinqMemberInfo"/>
            <seealso cref="T:System.Reflection.PropertyInfo"/>
        </member>
        <member name="M:InterLinq.Types.InterLinqPropertyInfo.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:InterLinq.Types.InterLinqPropertyInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="fieldInfo">Represented CLR <see cref="T:System.Reflection.PropertyInfo"/>.</param>
        </member>
        <member name="M:InterLinq.Types.InterLinqPropertyInfo.Initialize(System.Reflection.MemberInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="memberInfo">Represented <see cref="T:System.Reflection.MemberInfo"/></param>
            <seealso cref="M:InterLinq.Types.InterLinqMemberInfo.Initialize(System.Reflection.MemberInfo)"/>
        </member>
        <member name="M:InterLinq.Types.InterLinqPropertyInfo.GetClrVersion">
            <summary>
            Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <returns>Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:InterLinq.Types.InterLinqPropertyInfo.Equals(System.Object)">
            <summary>
            Compares <paramref name="obj"/> to this instance.
            </summary>
            <param name="obj"><see langword="object"/> to compare.</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:InterLinq.Types.InterLinqPropertyInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see langword="object"/>.</returns>
        </member>
        <member name="P:InterLinq.Types.InterLinqPropertyInfo.MemberType">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberTypes">MemberType</see>.
            </summary>
            <seealso cref="P:InterLinq.Types.InterLinqMemberInfo.MemberType"/>
            <seealso cref="P:System.Reflection.PropertyInfo.MemberType"/>
        </member>
        <member name="P:InterLinq.Types.InterLinqPropertyInfo.PropertyType">
            <summary>
            Gets or sets the <see cref="T:InterLinq.Types.InterLinqType"/> of this property.
            </summary>
            <seealso cref="P:System.Reflection.PropertyInfo.PropertyType"/>
        </member>
        <member name="T:InterLinq.Types.InterLinqFieldInfo">
            <summary>
            InterLINQ representation of <see cref="T:System.Reflection.FieldInfo"/>.
            </summary>
            <seealso cref="T:InterLinq.Types.InterLinqMemberInfo"/>
            <seealso cref="T:System.Reflection.FieldInfo"/>
        </member>
        <member name="M:InterLinq.Types.InterLinqFieldInfo.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:InterLinq.Types.InterLinqFieldInfo.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="fieldInfo">Represented CLR <see cref="T:System.Reflection.FieldInfo"/>.</param>
        </member>
        <member name="M:InterLinq.Types.InterLinqFieldInfo.Initialize(System.Reflection.MemberInfo)">
            <summary>
            Initializes this class.
            </summary>
            <param name="memberInfo">Represented <see cref="T:System.Reflection.MemberInfo"/></param>
            <seealso cref="M:InterLinq.Types.InterLinqMemberInfo.Initialize(System.Reflection.MemberInfo)"/>
        </member>
        <member name="M:InterLinq.Types.InterLinqFieldInfo.GetClrVersion">
            <summary>
            Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <returns>Returns the CLR <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:InterLinq.Types.InterLinqFieldInfo.Equals(System.Object)">
            <summary>
            Compares <paramref name="obj"/> to this instance.
            </summary>
            <param name="obj"><see langword="object"/> to compare.</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:InterLinq.Types.InterLinqFieldInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see langword="object"/>.</returns>
        </member>
        <member name="P:InterLinq.Types.InterLinqFieldInfo.MemberType">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberTypes">MemberType</see>.
            </summary>
            <seealso cref="P:System.Reflection.FieldInfo.MemberType"/>
        </member>
        <member name="P:InterLinq.Types.InterLinqFieldInfo.FieldType">
            <summary>
            Gets or sets the <see cref="T:InterLinq.Types.InterLinqType"/> of this field.
            </summary>
            <seealso cref="P:System.Reflection.FieldInfo.FieldType"/>
        </member>
        <member name="T:InterLinq.Expressions.SerializableTypes.SerializableElementInit">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.ElementInit"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypes.SerializableElementInit.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypes.SerializableElementInit.#ctor(System.Linq.Expressions.ElementInit,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.ElementInit"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="elementInit">The original, not serializable <see cref="T:System.Linq.Expressions.ElementInit"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypes.SerializableElementInit.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.ElementInit"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableTypes.SerializableElementInit.ToString">
            <summary>
            Returns a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.ElementInit"/>.
            </summary>
            <returns>Returns a <see langword="string"/> representing this object.</returns>
        </member>
        <member name="P:InterLinq.Expressions.SerializableTypes.SerializableElementInit.Arguments">
            <summary>
            See <see cref="P:System.Linq.Expressions.ElementInit.Arguments"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableTypes.SerializableElementInit.AddMethod">
            <summary>
            See <see cref="P:System.Linq.Expressions.ElementInit.AddMethod"/>
            </summary>
        </member>
        <member name="T:InterLinq.Types.TypeConverter">
            <summary>
            The <see cref="T:InterLinq.Types.TypeConverter"/> is a helper class providing
            several static methods to convert <see cref="T:InterLinq.Types.Anonymous.AnonymousObject"/> to
            C# Anonymous Types and back.
            </summary>
        </member>
        <member name="M:InterLinq.Types.TypeConverter.ConvertFromSerializable(System.Type,System.Object)">
            <summary>
            Converts an <see langword="object"/> into a target <see cref="T:System.Type"/>.
            </summary>
            <param name="wantedType">Target <see cref="T:System.Type"/>.</param>
            <param name="objectToConvert"><see langword="object"/> to convert.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:InterLinq.Types.TypeConverter.ConvertFromSerializableCollection``1(System.Collections.IEnumerable)">
            <summary>
            Converts each element of an <see cref="T:System.Collections.IEnumerable"/> 
            into a target <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">Target <see cref="T:System.Type"/>.</typeparam>
            <param name="enumerable"><see cref="T:System.Collections.IEnumerable"/>.</param>
            <returns>Returns the converted <see cref="T:System.Collections.IEnumerable"/>.</returns>
        </member>
        <member name="M:InterLinq.Types.TypeConverter.ConvertToSerializable(System.Object)">
            <summary>
            Converts an object to an <see cref="T:InterLinq.Types.Anonymous.AnonymousObject"/> 
            or an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="objectToConvert"><see langword="object"/> to convert.</param>
            <returns>Returns the converted <see langword="object"/>.</returns>
        </member>
        <member name="M:InterLinq.Types.TypeConverter.ConvertToSerializableCollection``1(System.Collections.IEnumerable)">
            <summary>
            Converts each element of an <see cref="T:System.Collections.IEnumerable"/> to 
            an <see cref="T:System.Collections.Generic.IEnumerable`1"/> 
            </summary>
            <typeparam name="T">Target <see cref="T:System.Type"/>.</typeparam>
            <param name="enumerable"><see cref="T:System.Collections.IEnumerable"/>.</param>
            <returns>Returns the converted <see cref="T:System.Collections.IEnumerable"/>.</returns>
        </member>
        <member name="T:InterLinq.Communication.ClientQueryProvider">
            <summary>
            Client implementation of the <see cref="T:InterLinq.InterLinqQueryProvider"/>.
            </summary>
            <seealso cref="T:InterLinq.InterLinqQueryProvider"/>
            <seealso cref="T:System.Linq.IQueryProvider"/>
        </member>
        <member name="T:InterLinq.InterLinqQueryProvider">
            <summary>
            Abstract implementation of an <see cref="T:System.Linq.IQueryProvider"/>.
            Defines methods to create and execute queries that are described 
            by an <see cref="T:System.Linq.IQueryable"/> object.
            </summary>
            <seealso cref="T:System.Linq.IQueryProvider"/>
        </member>
        <member name="M:InterLinq.InterLinqQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an <see cref="T:System.Linq.IQueryable`1"/> object that can evaluate the query
            represented by a specified <see cref="T:System.Linq.Expressions.Expression"/> tree.
            </summary>
            <typeparam name="TElement">
                The <see cref="T:System.Type"/> of the elements of the <see cref="T:System.Linq.IQueryable`1"/> that is returned.
            </typeparam>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> that represents a LINQ query.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable`1"/> that can evaluate the query represented by the
            specified <see cref="T:System.Linq.Expressions.Expression"/> tree.
            </returns>
            <seealso cref="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)"/>
        </member>
        <member name="M:InterLinq.InterLinqQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an <see cref="T:System.Linq.IQueryable"/> object that can evaluate the query represented
            by a specified <see cref="T:System.Linq.Expressions.Expression"/> tree.        
            </summary>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> that represents a LINQ query.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> that can evaluate the query represented by the
            specified <see cref="T:System.Linq.Expressions.Expression"/> tree.
            </returns>
            <seealso cref="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)"/>
        </member>
        <member name="M:InterLinq.InterLinqQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the strongly-typed query represented by a specified <see cref="T:System.Linq.Expressions.Expression"/> tree.
            </summary>
            <typeparam name="TResult">The <see cref="T:System.Type"/> of the value that is returned by the query execution.</typeparam>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> that represents a LINQ query.</param>
            <returns>A value of type TResult that results from executing the specified query.</returns>
            <seealso cref="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)"/>
        </member>
        <member name="M:InterLinq.InterLinqQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified <see cref="T:System.Linq.Expressions.Expression"/> tree.
            </summary>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> that represents a LINQ query.</param>
            <returns>An <see langword="object"/> that represents the result of executing the specified query.</returns>
            <seealso cref="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)"/>
        </member>
        <member name="M:InterLinq.Communication.ClientQueryProvider.#ctor(InterLinq.IQueryRemoteHandler)">
            <summary>
            Initializes this class.
            </summary>
            <param name="queryRemoteHandler"><see cref="T:InterLinq.IQueryRemoteHandler"/> to communicate with the server.</param>
        </member>
        <member name="M:InterLinq.Communication.ClientQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query and returns the requested data.
            </summary>
            <typeparam name="TResult">Type of the return value.</typeparam>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression"/> tree to execute.</param>
            <returns>Returns the requested data of Type 'TResult'.</returns>
            <seealso cref="M:InterLinq.InterLinqQueryProvider.Execute(System.Linq.Expressions.Expression)"/>
        </member>
        <member name="M:InterLinq.Communication.ClientQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query and returns the requested data.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression"/> tree to execute.</param>
            <returns>Returns the requested data of Type <see langword="object"/>.</returns>
            <seealso cref="M:InterLinq.InterLinqQueryProvider.Execute(System.Linq.Expressions.Expression)"/>
        </member>
        <member name="P:InterLinq.Communication.ClientQueryProvider.Handler">
            <summary>
            Gets the <see cref="T:InterLinq.IQueryRemoteHandler"/>;
            </summary>
        </member>
        <member name="T:InterLinq.Expressions.SerializableUnaryExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.UnaryExpression"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableUnaryExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableUnaryExpression.#ctor(System.Linq.Expressions.UnaryExpression,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.UnaryExpression"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="T:System.Linq.Expressions.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="T:System.Linq.Expressions.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableUnaryExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:InterLinq.Expressions.SerializableUnaryExpression.Operand">
            <summary>
            See <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableUnaryExpression.Method">
            <summary>
            See <see cref="P:System.Linq.Expressions.UnaryExpression.Method"/>
            </summary>
        </member>
        <member name="T:InterLinq.Expressions.SerializableMemberExpression">
            <summary>
            A serializable version of <see cref="T:System.Linq.Expressions.MemberExpression"/>.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableMemberExpression.#ctor">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:InterLinq.Expressions.SerializableMemberExpression.#ctor(System.Linq.Expressions.MemberExpression,InterLinq.Expressions.Helpers.ExpressionConverter)">
            <summary>
            Constructor with an <see cref="T:System.Linq.Expressions.MemberExpression"/> and an <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/>.
            </summary>
            <param name="expression">The original, not serializable <see cref="P:InterLinq.Expressions.SerializableMemberExpression.Expression"/>.</param>
            <param name="expConverter">The <see cref="T:InterLinq.Expressions.Helpers.ExpressionConverter"/> to convert contained <see cref="P:InterLinq.Expressions.SerializableMemberExpression.Expression">Expressions</see>.</param>
        </member>
        <member name="M:InterLinq.Expressions.SerializableMemberExpression.BuildString(System.Text.StringBuilder)">
            <summary>
            Builds a <see langword="string"/> representing the <see cref="P:InterLinq.Expressions.SerializableMemberExpression.Expression"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to add the created <see langword="string"/>.</param>
        </member>
        <member name="P:InterLinq.Expressions.SerializableMemberExpression.Expression">
            <summary>
            See <see cref="P:System.Linq.Expressions.MemberExpression.Expression"/>
            </summary>
        </member>
        <member name="P:InterLinq.Expressions.SerializableMemberExpression.Member">
            <summary>
            See <see cref="P:System.Linq.Expressions.MemberExpression.Member"/>
            </summary>
        </member>
        <member name="T:InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractFormat">
            <summary>
            Implements methods that can be used to extend run-time behavior for an operation
            in either a service or client application.
            </summary>
        </member>
        <member name="M:InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractFormat.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
            <param name="description">
                The operation being examined. Use for examination only. 
                If the operation description is modified, the results are undefined.
            </param>
            <param name="parameters">The collection of objects that binding elements require to support the behavior.</param>
        </member>
        <member name="M:InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractFormat.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
            <summary>
            Implements a modification or extension of the client across an operation.
            </summary>
            <param name="description">
                The operation being examined. Use for examination only. 
                If the operation description is modified, the results are undefined.
            </param>
            <param name="proxy">
                The run-time object that exposes customization properties for the operation
                described by operationDescription.
            </param>
        </member>
        <member name="M:InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractFormat.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
            <summary>
            Implements a modification or extension of the service across an operation.
            </summary>
            <param name="description">
                The operation being examined. Use for examination only. If the operation
                description is modified, the results are undefined.
            </param>
            <param name="dispatch">
                The run-time object that exposes customization properties for the operation
                described by operationDescription.
            </param>
        </member>
        <member name="M:InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractFormat.Validate(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Implement to confirm that the operation meets some intended criteria.
            </summary>
            <param name="description">
                The operation being examined. Use for examination only. If the operation
                description is modified, the results are undefined.
            </param>
        </member>
        <member name="M:InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractFormat.ReplaceDataContractSerializerOperationBehavior(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Replaces the <see cref="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior">behaviour</see>
            of <paramref name="description"/> with a new instance of
            <see cref="T:InterLinq.Communication.Wcf.NetDataContractSerializer.NetDataContractSerializerOperationBehavior"/>.
            </summary>
            <param name="description">
                The <see cref="T:System.ServiceModel.Description.OperationDescription">description</see> to
                replace the <see cref="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior">behaviour</see> in.
            </param>
        </member>
        <member name="T:InterLinq.Expressions.Helpers.ExpressionConverter">
            <summary>
            This class is an <see cref="T:InterLinq.Expressions.Helpers.ExpressionVisitor"/> implementation
            used to convert a <see cref="T:System.Linq.Expressions.Expression"/> to a
            <see cref="T:InterLinq.Expressions.SerializableExpression"/>.
            </summary>
            <seealso cref="T:InterLinq.Expressions.Helpers.ExpressionVisitor"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes this class.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression"/> to convert.</param>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.Convert(System.Linq.Expressions.Expression)">
            <summary>
            Converts an <see cref="T:System.Linq.Expressions.Expression"/> to a <see cref="T:InterLinq.Expressions.SerializableExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableExpression"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.Convert``1(System.Linq.Expressions.Expression)">
            <summary>
            Converts an <see cref="T:System.Linq.Expressions.Expression"/> to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression"/> to convert.</param>
            <returns>Returns the converted <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.ConvertCollection``1(System.Collections.IEnumerable)">
            <summary>
            Converts an <see cref="T:System.Collections.IEnumerable"/> to a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <param name="enumerable"><see cref="T:System.Collections.IEnumerable"/> to convert.</param>
            <returns>Returns the converted <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.ConvertToSerializableObjectCollection``1(System.Collections.IEnumerable)">
            <summary>
            Converts an <see cref="T:System.Collections.IEnumerable"/> to a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.
            </summary>
            <remarks>
            This method is called for classes like <see cref="T:InterLinq.Expressions.SerializableTypes.SerializableElementInit"/>,
            <see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberBinding"/>, etc.
            </remarks>
            <typeparam name="T">Target type.</typeparam>
            <param name="enumerable"><see cref="T:System.Collections.IEnumerable"/> to convert.</param>
            <returns>Returns the converted <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.</returns>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.BinaryExpression"/> to a
            <see cref="T:InterLinq.Expressions.SerializableBinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.BinaryExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableBinaryExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitBinaryExpression(System.Linq.Expressions.BinaryExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitConditionalExpression(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.ConditionalExpression"/> to a
            <see cref="T:InterLinq.Expressions.SerializableConditionalExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ConditionalExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableConditionalExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitConditionalExpression(System.Linq.Expressions.ConditionalExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitConstantExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.ConstantExpression"/> to a
            <see cref="T:InterLinq.Expressions.SerializableConstantExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ConstantExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableConstantExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitConstantExpression(System.Linq.Expressions.ConstantExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitTypedExpression``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.Expression`1"/> to a
            <see cref="T:InterLinq.Expressions.SerializableExpressionTyped"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression`1"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableExpressionTyped"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitTypedExpression``1(System.Linq.Expressions.Expression{``0})"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitInvocationExpression(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.InvocationExpression"/> to a
            <see cref="T:InterLinq.Expressions.SerializableInvocationExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.InvocationExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableInvocationExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitInvocationExpression(System.Linq.Expressions.InvocationExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitLambdaExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.LambdaExpression"/> to a
            <see cref="T:InterLinq.Expressions.SerializableLambdaExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.LambdaExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableLambdaExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitLambdaExpression(System.Linq.Expressions.LambdaExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitListInitExpression(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.ListInitExpression"/> to a
            <see cref="T:InterLinq.Expressions.SerializableListInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ListInitExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableListInitExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitListInitExpression(System.Linq.Expressions.ListInitExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.MemberExpression"/> to a
            <see cref="T:InterLinq.Expressions.SerializableMemberExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MemberExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableMemberExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberExpression(System.Linq.Expressions.MemberExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitMemberInitExpression(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.MemberInitExpression"/> to a
            <see cref="T:InterLinq.Expressions.SerializableMemberInitExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MemberInitExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableMemberInitExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberInitExpression(System.Linq.Expressions.MemberInitExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> to a
            <see cref="T:InterLinq.Expressions.SerializableMethodCallExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.MethodCallExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableMethodCallExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMethodCallExpression(System.Linq.Expressions.MethodCallExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitNewArrayExpression(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.NewArrayExpression"/> to a
            <see cref="T:InterLinq.Expressions.SerializableNewArrayExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.NewArrayExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableNewArrayExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitNewArrayExpression(System.Linq.Expressions.NewArrayExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitNewExpression(System.Linq.Expressions.NewExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.NewExpression"/> to a
            <see cref="T:InterLinq.Expressions.SerializableNewExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.NewExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableNewExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitNewExpression(System.Linq.Expressions.NewExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitParameterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.ParameterExpression"/> to a
            <see cref="T:InterLinq.Expressions.SerializableParameterExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.ParameterExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableParameterExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitParameterExpression(System.Linq.Expressions.ParameterExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitTypeBinaryExpression(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/> to a
            <see cref="T:InterLinq.Expressions.SerializableTypeBinaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.TypeBinaryExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableTypeBinaryExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitTypeBinaryExpression(System.Linq.Expressions.TypeBinaryExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitUnaryExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.UnaryExpression"/> to a
            <see cref="T:InterLinq.Expressions.SerializableUnaryExpression"/>.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.UnaryExpression"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableUnaryExpression"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitUnaryExpression(System.Linq.Expressions.UnaryExpression)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.ElementInit"/> to a
            <see cref="T:InterLinq.Expressions.SerializableTypes.SerializableElementInit"/>.
            </summary>
            <param name="elementInit"><see cref="T:System.Linq.Expressions.ElementInit"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableTypes.SerializableElementInit"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.MemberAssignment"/> to a
            <see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment"/>.
            </summary>
            <param name="memberAssignment"><see cref="T:System.Linq.Expressions.MemberAssignment"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberAssignment"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.MemberListBinding"/> to a
            <see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding"/>.
            </summary>
            <param name="memberListBinding"><see cref="T:System.Linq.Expressions.MemberListBinding"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberListBinding"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)"/>
        </member>
        <member name="M:InterLinq.Expressions.Helpers.ExpressionConverter.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.MemberMemberBinding"/> to a
            <see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding"/>.
            </summary>
            <param name="memberMemberBinding"><see cref="T:System.Linq.Expressions.MemberMemberBinding"/> to convert.</param>
            <returns>Returns the converted <see cref="T:InterLinq.Expressions.SerializableTypes.SerializableMemberMemberBinding"/>.</returns>
            <seealso cref="M:InterLinq.Expressions.Helpers.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)"/>
        </member>
        <member name="T:InterLinq.Types.Anonymous.AnonymousTypeHelper">
            <summary>
            A static class that contains static methods to recognize some special types like anonymous types and
            display classes.
            </summary>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousTypeHelper.IsAnonymous(System.Type)">
            <summary>
            Returns true if the given <see cref="T:System.Type"/> is an anonymous type.
            </summary>
            <param name="t"><see cref="T:System.Type"/> to test.</param>
            <returns>True, if the type is an anonymous type. False, if not.</returns>
            <remarks>
            A anonymous type is not really marked as anonymous.
            The only way to recognize it is it's name.
            Maybe in future versions they will be marked.
            </remarks>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousTypeHelper.IsDisplayClass(System.Type)">
            <summary>
            Returns true if the given <see cref="T:System.Type"/> is a display class.
            </summary>
            <param name="t"><see cref="T:System.Type"/> to test.</param>
            <returns>True, if the type is a display class. False, if not.</returns>
            <remarks>
            A display class is not really marked as display class.
            The only way to recognize it is it's name.
            Maybe in future versions they will be marked.
            </remarks>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousTypeHelper.IsIGrouping(System.Type)">
            <summary>
            Returns true if the given <see cref="T:System.Type"/> is a <see cref="T:System.Linq.IGrouping`2"/> class.
            </summary>
            <param name="t"><see cref="T:System.Type"/> to test.</param>
            <returns>Returns true if the given <see cref="T:System.Type"/> is a <see cref="T:System.Linq.IGrouping`2"/> class.</returns>
        </member>
        <member name="M:InterLinq.Types.Anonymous.AnonymousTypeHelper.IsEnumerator(System.Type)">
            <summary>
            Returns true if the given <see cref="T:System.Type"/> is a <see cref="T:System.Collections.Generic.IEnumerator`1"/> class.
            </summary>
            <param name="t"><see cref="T:System.Type"/> to test.</param>
            <returns>Returns true if the given <see cref="T:System.Type"/> is a <see cref="T:System.Collections.Generic.IEnumerator`1"/> class.</returns>
        </member>
        <member name="T:InterLinq.Types.Anonymous.DynamicAssemblyHolder">
            <summary>
            A class that holds a <see cref="T:System.Reflection.Emit.AssemblyBuilder">dynamic assembly</see>.
            </summary>
        </member>
        <member name="M:InterLinq.Types.Anonymous.DynamicAssemblyHolder.#ctor">
            <summary>
            Private constructor to avoid external instantiation.
            </summary>
        </member>
        <member name="M:InterLinq.Types.Anonymous.DynamicAssemblyHolder.Initialize">
            <summary>
            Initializes the <see cref="T:InterLinq.Types.Anonymous.DynamicAssemblyHolder"/>.
            </summary>
        </member>
        <member name="P:InterLinq.Types.Anonymous.DynamicAssemblyHolder.Instance">
            <summary>
            Singleton instance of the <see cref="T:InterLinq.Types.Anonymous.DynamicAssemblyHolder"/>.
            </summary>
        </member>
        <member name="P:InterLinq.Types.Anonymous.DynamicAssemblyHolder.ModuleBuilder">
            <summary>
            Gets a <see cref="P:InterLinq.Types.Anonymous.DynamicAssemblyHolder.ModuleBuilder"/> to create types in it. 
            </summary>
        </member>
    </members>
</doc>
