<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zyan.Communication</name>
    </assembly>
    <members>
        <member name="T:Zyan.Communication.ZyanDispatcher">
            <summary>
            Central dispatch component for RPC requests.
            </summary>
        </member>
        <member name="T:Zyan.Communication.IZyanDispatcher">
            <summary>
            Schnittstelle für Fabriken zur Produktion verteilbarer Komponenten. 
            </summary>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.Invoke(System.Guid,System.String,System.Collections.Generic.List{Zyan.Communication.DelegateCorrelationInfo},System.String,System.Reflection.ParameterInfo[],System.Object[])">
            <summary>
            Ruft eine bestimmte Methode einer Komponente auf und übergibt die angegebene Nachricht als Parameter.
            Für jeden Aufruf wird temporär eine neue Instanz der Komponente erstellt.
            </summary>
            <param name="trackingID">Aufrufschlüssel zur Nachverfolgung</param>
            <param name="interfaceName">Name der Komponentenschnittstelle</param>
            <param name="delegateCorrelationSet">Korrelationssatz für die Verdrahtung bestimmter Delegaten und Ereignisse mit entfernten Methoden</param>
            <param name="methodName">Methodenname</param>
            <param name="paramDefs">Parameter-Definitionen</param>
            <param name="args">Parameter</param>        
            <returns>Rückgabewert</returns>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.GetRegisteredComponents">
            <summary>
            Gibt eine Liste mit allen registrierten Komponenten zurück.
            </summary>
            <returns>Liste mit Namen der registrierten Komponenten</returns>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.Logon(System.Guid,System.Collections.Hashtable)">
            <summary>
            Meldet einen Client am Applikationserver an.
            </summary>
            <param name="sessionID">Sitzungsschlüssel (wird vom Client erstellt)</param>
            <param name="credentials">Anmeldeinformationen</param>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.Logoff(System.Guid)">
            <summary>
            Meldet einen Client vom Applikationsserver ab.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.Subscribe(System.String,System.EventHandler{Zyan.Communication.Notification.NotificationEventArgs})">
            <summary>
            Registriert einen Client für den Empfang von Benachrichtigungen bei einem bestimmten Ereignis.
            </summary>
            <param name="eventName">Ereignisname</param>
            <param name="handler">Delegat auf Client-Ereignisprozedur</param>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.Unsubscribe(System.String,System.EventHandler{Zyan.Communication.Notification.NotificationEventArgs})">
            <summary>
            Hebt eine Registrierung für den Empfang von Benachrichtigungen eines bestimmten Ereignisses auf.
            </summary>
            <param name="eventName">Ereignisname</param>
            <param name="handler">Delegat auf Client-Ereignisprozedur</param>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.RenewSession">
            <summary>
            Verlängert die Sitzung des Aufrufers und gibt die aktuelle Sitzungslebensdauer zurück.
            </summary>
            <returns>Sitzungslebensdauer (in Minuten)</returns>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.AddEventHandler(System.String,Zyan.Communication.DelegateCorrelationInfo)">
            <summary>
            Abonniert ein Ereignis einer Serverkomponente.
            </summary>
            <param name="interfaceName">Schnittstellenname der Serverkomponente</param>
            <param name="correlation">Korrelationsinformation</param>
        </member>
        <member name="M:Zyan.Communication.IZyanDispatcher.RemoveEventHandler(System.String,Zyan.Communication.DelegateCorrelationInfo)">
            <summary>
            Entfernt das Abonnement eines Ereignisses einer Serverkomponente.
            </summary>
            <param name="interfaceName">Schnittstellenname der Serverkomponente</param>
            <param name="correlation">Korrelationsinformation</param>
        </member>
        <member name="P:Zyan.Communication.IZyanDispatcher.SessionAgeLimit">
            <summary>
            Gibt die maximale Sitzungslebensdauer (in Minuten) zurück.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.#ctor(Zyan.Communication.ZyanComponentHost)">
            <summary>
            Konstruktor.
            </summary>
            <param name="host">Komponentenhost</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.CreateClientServerWires(System.Type,System.Object,System.Collections.Generic.List{Zyan.Communication.DelegateCorrelationInfo},System.Collections.Generic.Dictionary{System.Guid,System.Delegate})">
            <summary>
            Creates wires between client component and server component.
            </summary>
            <param name="type">Implementation type of the server component</param>
            <param name="instance">Instance of the server component</param>
            <param name="delegateCorrelationSet">Correlation set (say how to wire)</param>
            <param name="wiringList">Collection of built wires</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.RemoveClientServerWires(System.Type,System.Object,System.Collections.Generic.List{Zyan.Communication.DelegateCorrelationInfo},System.Collections.Generic.Dictionary{System.Guid,System.Delegate})">
            <summary>
            Removes wires between server and client components (as defined in correlation set).
            </summary>
            <param name="type">Type of the server component</param>
            <param name="instance">Instance of the server component</param>
            <param name="delegateCorrelationSet">Correlation set with wiring information</param>
            <param name="wiringList">List with known wirings</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.ProcessBeforeInvoke(System.Guid,System.String@,System.Collections.Generic.List{Zyan.Communication.DelegateCorrelationInfo}@,System.String@,System.Object[]@)">
            <summary>
            Verarbeitet BeforeInvoke-Abos (falls welche registriert sind).
            </summary>
            <param name="trackingID">Aufrufschlüssel zur Nachverfolgung</param>
            <param name="interfaceName">Name der Komponentenschnittstelle</param>
            <param name="delegateCorrelationSet">Korrelationssatz für die Verdrahtung bestimmter Delegaten und Ereignisse mit entfernten Methoden</param>
            <param name="methodName">Methodenname</param>
            <param name="args">Parameter</param>   
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.ProcessAfterInvoke(System.Guid,System.String@,System.Collections.Generic.List{Zyan.Communication.DelegateCorrelationInfo}@,System.String@,System.Object[]@,System.Object@)">
            <summary>
            Verarbeitet AfterInvoke-Abos (falls welche registriert sind).
            </summary>
            <param name="trackingID">Aufrufschlüssel zur Nachverfolgung</param>
            <param name="interfaceName">Name der Komponentenschnittstelle</param>
            <param name="delegateCorrelationSet">Korrelationssatz für die Verdrahtung bestimmter Delegaten und Ereignisse mit entfernten Methoden</param>
            <param name="methodName">Methodenname</param>
            <param name="args">Parameter</param>   
            <param name="returnValue">Rückgabewert</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.GetCallingClientIPAddress">
            <summary>
            Gets the IP Address of the calling client from CallContext.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.PutClientAddressToCurrentSession">
            <summary>
            Puts the IP Address of the calling client to the current Server Session.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Invoke(System.Guid,System.String,System.Collections.Generic.List{Zyan.Communication.DelegateCorrelationInfo},System.String,System.Reflection.ParameterInfo[],System.Object[])">
            <summary>
            Processes remote method invocation.        
            </summary>
            <param name="trackingID">Key for call tracking</param>
            <param name="interfaceName">Name of the component interface</param>
            <param name="delegateCorrelationSet">Correlation set for dynamic event and delegate wiring</param>
            <param name="methodName">Name of the invoked method</param>
            <param name="paramDefs">Reflection info of parameter types</param>
            <param name="args">Parameter values</param>        
            <returns>Return value</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.AddEventHandler(System.String,Zyan.Communication.DelegateCorrelationInfo)">
            <summary>
            Abonniert ein Ereignis einer Serverkomponente.
            </summary>
            <param name="interfaceName">Schnittstellenname der Serverkomponente</param>
            <param name="correlation">Korrelationsinformation</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.RemoveEventHandler(System.String,Zyan.Communication.DelegateCorrelationInfo)">
            <summary>
            Entfernt das Abonnement eines Ereignisses einer Serverkomponente.
            </summary>
            <param name="interfaceName">Schnittstellenname der Serverkomponente</param>
            <param name="correlation">Korrelationsinformation</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.GetRegisteredComponents">
            <summary>
            Gibt eine Liste mit allen registrierten Komponenten zurück.
            </summary>
            <returns>Liste mit Namen der registrierten Komponenten</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Logon(System.Guid,System.Collections.Hashtable)">
            <summary>
            Meldet einen Client am Applikationserver an.
            </summary>
            <param name="sessionID">Sitzungsschlüssel (wird vom Client erstellt)</param>
            <param name="credentials">Anmeldeinformationen</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Logoff(System.Guid)">
            <summary>
            Meldet einen Client vom Applikationsserver ab.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Subscribe(System.String,System.EventHandler{Zyan.Communication.Notification.NotificationEventArgs})">
            <summary>
            Registriert einen Client für den Empfang von Benachrichtigungen bei einem bestimmten Ereignis.
            </summary>
            <param name="eventName">Ereignisname</param>
            <param name="handler">Delegat auf Client-Ereignisprozedur</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.Unsubscribe(System.String,System.EventHandler{Zyan.Communication.Notification.NotificationEventArgs})">
            <summary>
            Hebt eine Registrierung für den Empfang von Benachrichtigungen eines bestimmten Ereignisses auf.
            </summary>
            <param name="eventName">Ereignisname</param>
            <param name="handler">Delegat auf Client-Ereignisprozedur</param>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.RenewSession">
            <summary>
            Verlängert die Sitzung des Aufrufers und gibt die aktuelle Sitzungslebensdauer zurück.
            </summary>
            <returns>Sitzungslebensdauer (in Minuten)</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanDispatcher.InitializeLifetimeService">
            <summary>
            Inizialisiert die Lebenszeitsteuerung des Objekts.
            </summary>
            <returns>Lease</returns>
        </member>
        <member name="P:Zyan.Communication.ZyanDispatcher.SessionAgeLimit">
            <summary>
            Gibt die maximale Sitzungslebensdauer (in Minuten) zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ZyanConnection">
            <summary>
            Maintains a connection to a Zyan component host.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.#ctor(Zyan.Communication.ZyanConnectionSetup)">
            <summary>
            Konstruktor.
            </summary>
            <param name="setup">Objekt mit Konfigurationseinstellungen für die Verbindung</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.#ctor(System.String)">
            <summary>
            Konstruktor.
            </summary>
            <param name="serverUrl">Server-URL (z.B. "tcp://server1:46123/ebcserver")</param>                
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.#ctor(System.String,System.Boolean)">
            <summary>
            Konstruktor.
            </summary>
            <param name="serverUrl">Server-URL (z.B. "tcp://server1:46123/ebcserver")</param>                
            <param name="autoLoginOnExpiredSession">Gibt an, ob sich der Proxy automatisch neu anmelden soll, wenn die Sitzung abgelaufen ist</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.#ctor(System.String,Zyan.Communication.Protocols.IClientProtocolSetup)">
            <summary>
            Konstruktor.
            </summary>
            <param name="serverUrl">Server-URL (z.B. "tcp://server1:46123/ebcserver")</param>                
            <param name="protocolSetup">Protokoll-Einstellungen</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.#ctor(System.String,Zyan.Communication.Protocols.IClientProtocolSetup,System.Boolean)">
            <summary>
            Konstruktor.
            </summary>
            <param name="serverUrl">Server-URL (z.B. "tcp://server1:46123/ebcserver")</param>                
            <param name="protocolSetup">Protokoll-Einstellungen</param>
            <param name="autoLoginOnExpiredSession">Gibt an, ob sich der Proxy automatisch neu anmelden soll, wenn die Sitzung abgelaufen ist</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.#ctor(System.String,Zyan.Communication.Protocols.IClientProtocolSetup,System.Collections.Hashtable,System.Boolean,System.Boolean)">
            <summary>
            Konstruktor.
            </summary>
            <param name="serverUrl">Server-URL (z.B. "tcp://server1:46123/ebcserver")</param>        
            <param name="protocolSetup">Protokoll-Einstellungen</param>
            <param name="credentials">Anmeldeinformationen</param>
            <param name="autoLoginOnExpiredSession">Gibt an, ob sich der Proxy automatisch neu anmelden soll, wenn die Sitzung abgelaufen ist</param>
            <param name="keepSessionAlive">Gib an, ob die Sitzung automatisch verlängert werden soll</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.PrepareCallContext(System.Boolean)">
            <summary>
            Bereitet den Aufrufkontext für die Übertragung vor.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.StartKeepSessionAliveTimer">
            <summary>
            Startet den Zeitgeber für automatische Sitzungsverlängerung.
            <remarks>
            Wenn der Zeitgeber läuft, wird er neu gestartet.
            </remarks>
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.KeepSessionAlive(System.Object)">
            <summary>
            Wird vom Zeitgeber aufgerufen, wenn die Sitzung verlängert werden soll. 
            </summary>
            <param name="state">Statusobjekt</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.CreateProxy``1">
            <summary>
            Erzeugt im Server-Prozess eine neue Instanz einer bestimmten Komponente und gibt einen Proxy dafür zurück.
            </summary>
            <typeparam name="T">Typ der öffentlichen Schnittstelle der zu konsumierenden Komponente</typeparam>        
            <returns>Proxy</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.CreateProxy``1(System.String)">
            <summary>
            Erzeugt im Server-Prozess eine neue Instanz einer bestimmten Komponente und gibt einen Proxy dafür zurück.
            </summary>
            <typeparam name="T">Typ der öffentlichen Schnittstelle der zu konsumierenden Komponente</typeparam>        
            <param name="uniqueName">Eindeutiger Name der Komponente</param>
            <returns>Proxy</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.CreateProxy``1(System.Boolean)">
            <summary>
            Erzeugt im Server-Prozess eine neue Instanz einer bestimmten Komponente und gibt einen Proxy dafür zurück.
            </summary>
            <typeparam name="T">Typ der öffentlichen Schnittstelle der zu konsumierenden Komponente</typeparam>
            <param name="implicitTransactionTransfer">Implizite Transaktionsübertragung</param>
            <returns>Proxy</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.CreateProxy``1(System.String,System.Boolean)">
            <summary>
            Erzeugt im Server-Prozess eine neue Instanz einer bestimmten Komponente und gibt einen Proxy dafür zurück.
            </summary>
            <typeparam name="T">Typ der öffentlichen Schnittstelle der zu konsumierenden Komponente</typeparam>
            <param name="uniqueName">Eindeutiger Name der Komponente</param>
            <param name="implicitTransactionTransfer">Implizite Transaktionsübertragung</param>
            <returns>Proxy</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.OnBeforeInvoke(Zyan.Communication.BeforeInvokeEventArgs)">
            <summary>
            Feuert das BeforeInvoke-Ereignis.
            </summary>
            <param name="e">Ereignisargumente</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.OnAfterInvoke(Zyan.Communication.AfterInvokeEventArgs)">
            <summary>
            Feuert das AfterInvoke-Ereignis.
            </summary>
            <param name="e">Ereignisargumente</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.OnInvokeCanceled(Zyan.Communication.InvokeCanceledEventArgs)">
            <summary>
            Feuert das InvokeCanceled-Ereignis.
            </summary>
            <param name="e">Ereignisargumente</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.SubscribeEvent(System.String,System.EventHandler{Zyan.Communication.Notification.NotificationEventArgs})">
            <summary>
            Registriert einen Client für den Empfang von Benachrichtigungen bei einem bestimmten Ereignis.
            </summary>
            <param name="eventName">Ereignisname</param>
            <param name="handler">Delegat auf Client-Ereignisprozedur</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.UnsubscribeEvent(System.Guid)">
            <summary>
            Hebt eine Registrierung für den Empfang von Benachrichtigungen eines bestimmten Ereignisses auf.
            </summary>
            <param name="subscriptionID">Registrerungsschlüssel</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.OnError(Zyan.Communication.ZyanErrorEventArgs)">
            <summary>
            Fires the Error event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.Dispose">
            <summary>
            Verwaltete Ressourcen freigeben.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanConnection.Finalize">
            <summary>
            Destruktor.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.ServerUrl">
            <summary>
            Gibt den URL zum Server-Prozess zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.ComponentHostName">
            <summary>
            Gibt den Namen des Komponentenhosts zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.RemoteComponentFactory">
            <summary>
            Gibt einen Proxy für den Zugriff auf die entfernte Komponentenfabrik des Komponentenhosts zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.SerializationHandling">
            <summary>
            Gibt die Verwaltung für benutzerdefinierte Serialisierungsbehandlung zurück.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanConnection.BeforeInvoke">
            <summary>
            Ereignis: Bevor ein Komponentenaufruf durchgeführt wird.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanConnection.AfterInvoke">
            <summary>
            Ereignis: Nachdem ein Komponentenaufruf durchgeführt wurde.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanConnection.InvokeCanceled">
            <summary>
            Ereignis: Wenn ein Komponentenaufruf abgebrochen wurde.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.CallInterceptionEnabled">
            <summary>
            Gibt zurück, ob registrierte Aufrufabfangvorrichtungen verarbeitet werden, oder legt diest fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.CallInterceptors">
            <summary>
            Gibt eine Auflistung der registrierten Aufrufabfangvorrichtungen zurück.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanConnection.Error">
            <summary>
            Occures when a error is detected.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.ErrorHandlingEnabled">
            <summary>
            Gets if errors should be handled or not.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnection.Connections">
            <summary>
            Gibt eine Auflistung aller bekanten Verbindungen Hosts zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.SessionMgmt.SessionVariableAdapter">
            <summary>
            Adapter für den Zugriff auf Sitzungsvariablen.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionVariableAdapter.#ctor(Zyan.Communication.SessionMgmt.ISessionManager,System.Guid)">
            <summary>
            Erzeugt eine neue Instanz von SessionVariableAdapter.
            </summary>
            <param name="sessionManager">Sitzungsverwaltung</param>
            <param name="sessionID">Sitzungsschlüssel</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionVariableAdapter.SetSessionVariable(System.String,System.Object)">
            <summary>
            Legt den Wert einer Sitzungsvariablen fest.
            </summary>        
            <param name="name">Variablenname</param>
            <param name="value">Wert</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SessionVariableAdapter.GetSessionVariable(System.String)">
            <summary>
            Gibt den Wert einer Sitzungsvariablen zurück.
            </summary>        
            <param name="name">Variablenname</param>
            <returns>Wert</returns>
        </member>
        <member name="T:Zyan.Communication.SessionMgmt.ISessionManager">
            <summary>
            Schnittstelle für Sitzungsverwaltungskomponente.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.ISessionManager.ExistSession(System.Guid)">
            <summary>
            Prüft, ob eine Sitzung mit einer bestimmten Sitzungskennung.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
            <returns>Wahr, wenn die Sitzung existiert, ansonsten Falsch</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.ISessionManager.GetSessionBySessionID(System.Guid)">
            <summary>
            Gibt eine bestimmte Sitzung zurück.
            </summary>
            <param name="sessionID">Sitzungskennung</param>
            <returns>Sitzung</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.ISessionManager.StoreSession(Zyan.Communication.ServerSession)">
            <summary>
            Speichert eine Sitzung.
            </summary>
            <param name="session">Sitzungsdaten</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.ISessionManager.RemoveSession(System.Guid)">
            <summary>
            Löscht eine bestimmte Sitzung.
            </summary>
            <param name="sessionID">Sitzungskennung</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.ISessionManager.SetSessionVariable(System.Guid,System.String,System.Object)">
            <summary>
            Legt den Wert einer Sitzungsvariablen fest.
            </summary>
            <param name="sessionID">Sitzungskennung</param>
            <param name="name">Variablenname</param>
            <param name="value">Wert</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.ISessionManager.GetSessionVariable(System.Guid,System.String)">
            <summary>
            Gibt den Wert einer Sitzungsvariablen zurück.
            </summary>
            <param name="sessionID">Sitzungskennung</param>
            <param name="name">Variablenname</param>
            <returns>Wert</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.ISessionManager.Dispose">
            <summary>
            Verwaltete Ressourcen freigeben.
            </summary>
        </member>
        <member name="P:Zyan.Communication.SessionMgmt.ISessionManager.SessionAgeLimit">
            <summary>
            Gibt die maximale Sitzungslebensdauer (in Minuten) zurück oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.SessionMgmt.ISessionManager.SessionSweepInterval">
            <summary>
            Gibt den Intervall für den Sitzungs-Aufräumvorgang (in Minuten) zurück oder legt ihn fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.DynamicWireFactory">
            <summary>
            Factory class for creation of dynamic wires.    
            </summary>
        </member>
        <member name="M:Zyan.Communication.DynamicWireFactory.#ctor">
            <summary>
            Creates a new instance of the DynamicWireFactory class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.DynamicWireFactory.GetWireTypeCacheKeyForWire(System.Type,System.Type,System.Boolean)">
            <summary>
            Creates a unique wire cache key for a delegate wire type.
            </summary>
            <param name="componentType">Type of server component</param>
            <param name="delegateType">Delegate type of the wire</param>
            <param name="isEvent">Sets if the wire type is for a event (if false, the wire type must be of a delegate property)</param>
            <returns>Unique key</returns>
        </member>
        <member name="M:Zyan.Communication.DynamicWireFactory.GetDelegateType(System.Type,System.String,System.Boolean)">
            <summary>
            Gets the delegate type of a component´s event or delegate property.
            </summary>
            <param name="componentType">Component type</param>
            <param name="eventMemberName">Event name or name of the delegate property</param>
            <param name="isEvent">Sets if the member is a event (if false, the memeber must be a delegate property)</param>
            <returns>Delegate type</returns>
        </member>
        <member name="M:Zyan.Communication.DynamicWireFactory.CreateDynamicWire(System.Type,System.String,System.Boolean)">
            <summary>
            Creates a dynamic wire for a specified event or delegate property of a component.        
            </summary>
            <param name="componentType">Component type</param>
            <param name="eventMemberName">Event name or name of the delegate property</param>
            <param name="isEvent">Sets if the member is a event (if false, the memeber must be a delegate property)</param>
            <returns>Instance of the created dynamic wire type (ready to use)</returns>
        </member>
        <member name="M:Zyan.Communication.DynamicWireFactory.CreateDynamicWire(System.Type,System.Type)">
            <summary>
            Creates a dynamic wire for a specified event or delegate property of a component.        
            </summary>
            <param name="componentType">Component type</param>
            <param name="delegateType">Type of the delegate</param>        
            <returns>Instance of the created dynamic wire type (ready to use)</returns>
        </member>
        <member name="M:Zyan.Communication.DynamicWireFactory.BuildDynamicWireTypeForDelegate(System.Type,System.Type)">
            <summary>
            Creates a dynamic wire type dynamicly.
            </summary>
            <param name="componentType">Type of server component</param>
            <param name="delegateType">Delegate type of the wire</param>        
            <returns>Type of dynamic wire</returns>
        </member>
        <member name="M:Zyan.Communication.DynamicWireFactory.BuildDynamicWireType(System.Type,System.String,System.Boolean)">
            <summary>
            Creates a dynamic wire type dynamicly.
            </summary>
            <param name="componentType">Type of server component</param>
            <param name="eventMemberName">Event name or name of the delegate property</param>
            <param name="isEvent">Sets if the member is a event (if false, the memeber must be a delegate property)</param>
            <returns>Type of dynamic wire</returns>
        </member>
        <member name="M:Zyan.Communication.DynamicWireFactory.CreateDynamicWireSourceCodeForEvent(System.Reflection.EventInfo)">
            <summary>
            Generates source code for dynamic wiring of a specified server component event.
            </summary>
            <param name="eventInfo">Event member metadata</param>
            <returns>Generated C# source code</returns>
        </member>
        <member name="M:Zyan.Communication.DynamicWireFactory.CreateDynamicWireSourceCodeForDelegate(System.Reflection.PropertyInfo)">
            <summary>
            Generates source code for dynamic wiring of a specified server component delegate property.
            </summary>
            <param name="delegatePropInfo">Metadata of the delegate proerty</param>
            <returns>Generated C# source code</returns>
        </member>
        <member name="M:Zyan.Communication.DynamicWireFactory.CreateDynamicWireSourceCodeForDelegate(System.Type)">
            <summary>
            Generates source code for dynamic wiring of a specified server component delegate property.
            </summary>
            <param name="delegateType">Delegate type</param>
            <returns>Generated C# source code</returns>
        </member>
        <member name="M:Zyan.Communication.DynamicWireFactory.GetComponentReferences(System.Type)">
            <summary>
            Returns all direct and indirect references of a specified component type. 
            </summary>
            <param name="componentType">Component type</param>
            <returns>Array with full paths to the referenced assemblies</returns>
        </member>
        <member name="M:Zyan.Communication.DynamicWireFactory.AddReferencePathToList(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Adds a path to the path list, if the list doesn´t contain the path already. 
            </summary>
            <param name="path">Path to add</param>
            <param name="paths">path list</param>
            <returns>Returns true if added and false, if the list contains this path aleady</returns>
        </member>
        <member name="M:Zyan.Communication.DynamicWireFactory.FindAssemblyReferences(System.Reflection.Assembly,System.Collections.Generic.List{System.String})">
            <summary>
            Obtains all direct and indirect references of a specified Assembly.
            </summary>
            <param name="assembly">Assembly to scan for references</param>
            <param name="paths">List of file paths</param>
        </member>
        <member name="P:Zyan.Communication.DynamicWireFactory.Instance">
            <summary>
            Gets a singleton instance of the DynamicWirefactory class.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ComponentCatalog">
            <summary>
            Komponenten-Katalog
            </summary>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.GetRegistration(System.Type)">
            <summary>
            Ruft eine bestimmte Komponentenregistrierung ab.
            </summary>
            <param name="interfaceType">Schnittstellentyp</param>
            <returns>Komponentenregistrierung</returns>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.GetRegistration(System.String)">
            <summary>
            Ruft eine bestimmte Komponentenregistrierung ab.
            </summary>
            <param name="interfaceName">Schnittstellenname</param>
            <returns>Komponentenregistrierung</returns>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.UnregisterComponent``1">
            <summary>
            Hebt die Registrierung einer bestimmten Komponente auf.
            </summary>
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.UnregisterComponent(System.String)">
            <summary>
            Hebt die Registrierung einer bestimmten Komponente auf.
            </summary>
            <param name="uniqueName">Eindeutiger Name</param>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.RegisterComponent``2">
            <summary>
            Registriert eine bestimmte Komponente.
            </summary>        
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <typeparam name="T">Implementierungstyp der Komponente</typeparam>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.RegisterComponent``2(System.String)">
            <summary>
            Registriert eine bestimmte Komponente.
            </summary>        
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <typeparam name="T">Implementierungstyp der Komponente</typeparam>
            <param name="uniqueName">Eindeutiger Name der Komponente</param>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.RegisterComponent``2(Zyan.Communication.ActivationType)">
            <summary>
            Registriert eine bestimmte Komponente.
            </summary>        
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <typeparam name="T">Implementierungstyp der Komponente</typeparam>
            <param name="activationType">Aktivierungsart</param>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.RegisterComponent``2(System.String,Zyan.Communication.ActivationType)">
            <summary>
            Registriert eine bestimmte Komponente.
            </summary>        
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <typeparam name="T">Implementierungstyp der Komponente</typeparam>
            <param name="uniqueName">Eindeutiger Name der Komponente</param>
            <param name="activationType">Aktivierungsart</param>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.RegisterComponent``1(System.Func{System.Object})">
            <summary>
            Registriert eine bestimmte Komponente.
            </summary>
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <param name="factoryMethod">Delegat auf Fabrikmethode, die sich um die Erzeugung und Inizialisierung der Komponente kümmert</param>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.RegisterComponent``1(System.String,System.Func{System.Object})">
            <summary>
            Registriert eine bestimmte Komponente.
            </summary>
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <param name="uniqueName">Eindeutiger Name der Komponente</param>
            <param name="factoryMethod">Delegat auf Fabrikmethode, die sich um die Erzeugung und Inizialisierung der Komponente kümmert</param>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.RegisterComponent``1(System.Func{System.Object},Zyan.Communication.ActivationType)">
            <summary>
            Registriert eine bestimmte Komponente.
            </summary>
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <param name="factoryMethod">Delegat auf Fabrikmethode, die sich um die Erzeugung und Inizialisierung der Komponente kümmert</param>
            <param name="activationType">Aktivierungsart</param>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.RegisterComponent``1(System.String,System.Func{System.Object},Zyan.Communication.ActivationType)">
            <summary>
            Registriert eine bestimmte Komponente.
            </summary>
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <param name="uniqueName">Eindeutiger Name, über den die Komponente gefunden werden kann</param>
            <param name="factoryMethod">Delegat auf Fabrikmethode, die sich um die Erzeugung und Inizialisierung der Komponente kümmert</param>
            <param name="activationType">Aktivierungsart</param>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.RegisterComponent``2(``1)">
            <summary>
            Registriert eine bestimmte Komponenteninstanz.
            </summary>
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <typeparam name="T">Implementierungstyp der Komponente</typeparam>        
            <param name="instance">Instanz</param>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.RegisterComponent``2(System.String,``1)">
            <summary>
            Registriert eine bestimmte Komponenteninstanz.
            </summary>
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <typeparam name="T">Implementierungstyp der Komponente</typeparam>        
            <param name="uniqueName">Eindeutiger Name der Komponente</param>
            <param name="instance">Instanz</param>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.GetRegisteredComponents">
            <summary>
            Gibt eine Liste mit allen registrierten Komponenten zurück.
            </summary>
            <returns>Liste der registrierten Komponenten</returns>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.GetComponentInstance(Zyan.Communication.ComponentRegistration)">
            <summary>
            Gibt eine Instanz einer registrierten Komponente zurück.
            </summary>
            <param name="registration">Komponentenregistrierung</param>
            <returns>Komponenten-Instanz</returns>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.GetComponent``1">
            <summary>
            Gibt eine Instanz einer bestimmten Komponente zurück.
            </summary>
            <typeparam name="I">Typ der Komponentenschnittstelle</typeparam>
            <returns>Komponenteninstanz</returns>
        </member>
        <member name="M:Zyan.Communication.ComponentCatalog.GetComponent(System.String)">
            <summary>
            Gibt eine Instanz einer bestimmten Komponente zurück.
            </summary>
            <param name="uniqueName">Eindeutiger Name der Komponente</param>
            <returns>Komponenteninstanz</returns>
        </member>
        <member name="P:Zyan.Communication.ComponentCatalog.ComponentRegistry">
            <summary>
            Gibt die Liste der Registrierten Komponenten zurück.
            <remarks>Falls die Liste noch nicht existiert, wird sie automatisch erstellt.</remarks>
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Ipc.IpcBinaryServerProtocolSetup">
            <summary>
            Beschreibt serverseitige Einstellungen für binäre IPC Kommunkation (über Named Pipes).
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.IServerProtocolSetup">
            <summary>
            Beschreibt Protokoll-Einstellungen für die Netzwerkkommunikation.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.IServerProtocolSetup.CreateChannel">
            <summary>
            Erzeugt einen fertig konfigurierten Remoting-Kanal.
            <remarks>
            Wenn der Kanal in der aktuellen Anwendungsdomäne bereits registriert wurde, wird null zurückgegeben.
            </remarks>
            </summary>
            <returns>Remoting Kanal</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.IServerProtocolSetup.AuthenticationProvider">
            <summary>
            Gibt den Authentifizierungsanbieter zurück.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Ipc.IpcBinaryServerProtocolSetup.#ctor(System.String)">
            <summary>
            Erstellt eine neue Instanz von TcpBinaryServerProtocolSetup.
            </summary>
            <param name="portName">IPC-Portname</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Ipc.IpcBinaryServerProtocolSetup.CreateChannel">
            <summary>
            Erzeugt einen fertig konfigurierten Remoting-Kanal.
            <remarks>
            Wenn der Kanal in der aktuellen Anwendungsdomäne bereits registriert wurde, wird null zurückgegeben.
            </remarks>
            </summary>
            <returns>Remoting Kanal</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Ipc.IpcBinaryServerProtocolSetup.PortName">
            <summary>
            Gibt den IPC-Portnamen zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Ipc.IpcBinaryServerProtocolSetup.UseWindowsSecurity">
            <summary>
            Gibt zurück, ob integrierte Windows-Sicherheit verwendet werden soll, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Ipc.IpcBinaryServerProtocolSetup.ImpersonationLevel">
            <summary>
            Gibt die Impersonierungsstufe zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Ipc.IpcBinaryServerProtocolSetup.ProtectionLevel">
            <summary>
            Gibt den Absicherungsgrad zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Ipc.IpcBinaryServerProtocolSetup.AuthenticationProvider">
            <summary>
            Gibt den Authentifizierungsanbieter zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Ipc.IpcBinaryClientProtocolSetup">
            <summary>
            Beschreibt clientseitige Einstellungen für binäre IPC Kommunkation (über Named Pipes).
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.IClientProtocolSetup">
            <summary>
            Beschreibt Protokoll-Einstellungen für die Netzwerkkommunikation.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.IClientProtocolSetup.CreateChannel">
            <summary>
            Erzeugt einen fertig konfigurierten Remoting-Kanal.
            <remarks>
            Wenn der Kanal in der aktuellen Anwendungsdomäne bereits registriert wurde, wird null zurückgegeben.
            </remarks>
            </summary>
            <returns>Remoting Kanal</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.Ipc.IpcBinaryClientProtocolSetup.#ctor">
            <summary>
            Erstellt eine neue Instanz von IpcBinaryClientProtocolSetup.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Ipc.IpcBinaryClientProtocolSetup.CreateChannel">
            <summary>
            Erzeugt einen fertig konfigurierten Remoting-Kanal.
            <remarks>
            Wenn der Kanal in der aktuellen Anwendungsdomäne bereits registriert wurde, wird null zurückgegeben.
            </remarks>
            </summary>
            <returns>Remoting Kanal</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Ipc.IpcBinaryClientProtocolSetup.UseWindowsSecurity">
            <summary>
            Gibt zurück, ob integrierte Windows-Sicherheit verwendet werden soll, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Ipc.IpcBinaryClientProtocolSetup.ImpersonationLevel">
            <summary>
            Gibt die Impersonierungsstufe zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Ipc.IpcBinaryClientProtocolSetup.ProtectionLevel">
            <summary>
            Gibt den Absicherungsgrad zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Security.NullAuthenticationProvider">
            <summary>
            Null-Authentifizierungsanbieter. 
            Wird benötigt, wenn keine Authentifizierung benötigt wird.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Security.IAuthenticationProvider">
            <summary>
            Schnittstelle für Authentifzierungs-Anbieter.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Security.IAuthenticationProvider.Authenticate(Zyan.Communication.Security.AuthRequestMessage)">
            <summary>
            Authentifiziert einen bestimmten Benutzer anhand seiner Anmeldeinformationen.
            </summary>
            <param name="authRequest">Authentifizierungs-Anfragenachricht mit Anmeldeinformationen</param>
            <returns>Antwortnachricht des Authentifizierungssystems</returns>
        </member>
        <member name="M:Zyan.Communication.Security.NullAuthenticationProvider.Authenticate(Zyan.Communication.Security.AuthRequestMessage)">
            <summary>
            Authentifiziert einen bestimmten Benutzer anhand seiner Anmeldeinformationen.
            </summary>
            <param name="authRequest">Authentifizierungs-Anfragenachricht mit Anmeldeinformationen</param>
            <returns>Antwortnachricht des Authentifizierungssystems</returns>
        </member>
        <member name="T:Zyan.Communication.CallInterceptionDelegate">
            <summary>
            Delegat für benutzerdefinierte Aufrufabfanglogik.
            </summary>
            <param name="action">Aufrufabfang-Aktion</param>
        </member>
        <member name="T:Zyan.Communication.CallInterceptor">
            <summary>
            Allgemeine Implementierung einer Aufrufabfangvorrichtung.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptor.#ctor(System.Type,System.Reflection.MemberTypes,System.String,System.Type[],Zyan.Communication.CallInterceptionDelegate)">
            <summary>
            Erzeugt eine neue Instanz der CallInterceptor-Klasse.
            </summary>
            <param name="interfaceType">Schnittstellentyp der Komponente, deren Aufrufe abgefangen werden sollen</param>
            <param name="memberType">Art des Members, dessen Aufrufe abgefangen werden sollen</param>
            <param name="memberName">Name des Members, dessen Aufrufe abgefangen werden sollen</param>
            <param name="parameterTypes">Array mit den Typen der Parameter des abzufangenden Members</param>
            <param name="onInterception">Delegat, der beim Abfangen aufgerufen wird</param>
        </member>
        <member name="P:Zyan.Communication.CallInterceptor.InterfaceType">
            <summary>
            Gibt die Schnittstelle der Komponenten zurück, deren Aufruf abgefangen werden soll, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CallInterceptor.MemberType">
            <summary>
            Gibt die Art des abzufangenden Members zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CallInterceptor.MemberName">
            <summary>
            Gibt den Namen der abzufangenden Methode zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CallInterceptor.ParameterTypes">
            <summary>
            Gibt ein Array der als Parameter erwarteten Typen der aubzufangenden Methode zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CallInterceptor.OnInterception">
            <summary>
            Gibt den Delegaten zurück, der beim Abfangen des Aufrufs anstelle dessen aufgerufen wird, oder legt ihn fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Security.AuthResponseMessage">
            <summary>
            Antwortnachricht des Authentifizierungs-Systems.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Security.AuthResponseMessage.Success">
            <summary>
            Gibt zurück, ob die Authentifizierung erfolgreich war, oder nicht.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Security.AuthResponseMessage.ErrorMessage">
            <summary>
            Gibt eine Fehlermeldung zurück oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Security.AuthResponseMessage.AuthenticatedIdentity">
            <summary>
            Gibt die authentifizierte Identität des angemeldeten Benutzers zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.SerializationHandlerRepository">
            <summary>
            Verwaltet Serialisierungshandler.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SerializationHandlerRepository.#ctor">
            <summary>
            Erzeugt eine neue Instanz der SerializationHandlerRepository-Klasse.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SerializationHandlerRepository.RegisterSerializationHandler(System.Type,Zyan.Communication.ISerializationHandler)">
            <summary>
            Registriert einen Serialisierungshandler für einen bestimmten Typ.
            </summary>
            <param name="handledType">Typ, dessen Serialisierung behandelt werden soll</param>
            <param name="handler">Serialisierungshandler</param>
        </member>
        <member name="M:Zyan.Communication.SerializationHandlerRepository.UnregisterSerializationHandler(System.Type)">
            <summary>
            Entfernt die Registrierung eines Serialisierungshandlers für einen bestimmten Typ.
            </summary>
            <param name="handledType">Typ</param>
        </member>
        <member name="M:Zyan.Communication.SerializationHandlerRepository.FindMatchingSerializationHandler(System.Type,System.Type@,Zyan.Communication.ISerializationHandler@)">
            <summary>
            Ermittelt - wenn möglich - einen passenden Serialisierungshandler für den angegebenen Typen.
            </summary>
            <param name="type">Typ</param>
            <param name="handledType">Behandelter Typ</param>
            <param name="handler">Serialisierungshandler</param>        
        </member>
        <member name="M:Zyan.Communication.SerializationHandlerRepository.GetEnumerator">
            <summary>
            Gibt einen typisierten Enumerator zurück.
            </summary>
            <returns>Typisierter Enumerator</returns>
        </member>
        <member name="M:Zyan.Communication.SerializationHandlerRepository.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gibt einen Enumerator zurück.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="P:Zyan.Communication.SerializationHandlerRepository.Item(System.Type)">
            <summary>
            Gibt den registrierten Serialisierungshandler für einen bestimmten Typ zurück.
            </summary>
            <param name="handledType">Behandelter Typ</param>
            <returns>Serialisierungshandler</returns>        
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.CommonHeaderNames">
            <summary>
            Namen der von Client und Server gemeinsam genutzten Transportheader.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.CommonHeaderNames.SECURE_TRANSACTION_ID">
            <summary>
            Eindeutige Kennung der Sicherheitstransaktion.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.CommonHeaderNames.SECURE_TRANSACTION_STATE">
            <summary>
            Status der Sicherheitstransaktion.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.CommonHeaderNames.PUBLIC_KEY">
            <summary>
            Öffentlicher RSA Schlüssel.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.CommonHeaderNames.SHARED_KEY">
            <summary>
            Verschlüsselter gemeinsamer Schlüssel.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.CommonHeaderNames.SHARED_IV">
            <summary>
            Verschlüsselter gemeinsamer Inizialisierungsvektor.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.SecureTransactionStage">
            <summary>
            Aufzählung der einzelnen Verarbeitungsschritte einer Sicherheitstransaktion.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.SecureTransactionStage.Uninitialized">
            <summary>
            Uninizialisiert, noch nichts geschehen.
            </summary>		        
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.SecureTransactionStage.SendingPublicKey">
            <summary>
            Client sendet den öffentlichen Schlüssel an den Server.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.SecureTransactionStage.SendingSharedKey">
            <summary>
            Server sendet den verschlüsselten gemeinsamen Schlüssel zurück zum Client.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.SecureTransactionStage.SendingEncryptedMessage">
            <summary>
            Client sendet die verschlüsselte Anfragenachricht an den Server.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.SecureTransactionStage.SendingEncryptedResult">
            <summary>
            Server sendet die verschlüsselte Antwortnachricht an den Client zurück.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ChannelSinks.Encryption.SecureTransactionStage.UnknownTransactionID">
            <summary>
            Unbekannte Sicherheitstransaktionskennung.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData">
            <summary>
            Enthält Clientverbindungsinformation zu einer Sicherheitstransaktion.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData.#ctor(System.Guid,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>Erstellt eine neue Instanz von ClientConnectionData</summary>
            <param name="secureTransactionID">Sicherheitstransaktionskennung</param>
            <param name="cryptoProvider">Verschlüsselungsanbieter</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData.Finalize">
            <summary>
            Entsorgt die Verbindungsdaten.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData.UpdateTimestamp">
            <summary>
            Aktualisiert den Zeitstempel.
            </summary>		
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData.System#IDisposable#Dispose">
            <summary>
            Gibt verwaltete Ressourcen frei.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData.Dispose(System.Boolean)">
            <summary>
            Gibt verwaltete Ressourcen frei.
            </summary>
            <param name="disposing">Legt fest, ob der Destruktor nicht aufgerufen werden soll</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData.CheckDisposed">
            <summary>
            Wirft eine Ausnahme, wenn das Objekt bereits entsorgt wurde.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData.SecureTransactionID">
            <summary>
            Gibt die Sicherheitstransaktionskennung zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData.CryptoProvider">
            <summary>
            Gibt den verwendeten Kryptografieanbieter für symmetrische Verschlüsselung zurück.
            </summary>		
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.ClientConnectionData.Timestamp">
            <summary>
            Gibt den Zeitpunkt der letzten Kommunikation zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.InvalidSessionException">
            <summary>
            Ausnahme, die geworfen wird, wenn die Sitzung ungültig oder aufgelaufen ist.
            </summary>
        </member>
        <member name="M:Zyan.Communication.InvalidSessionException.#ctor">
            <summary>
            Erstellt eine neue Instanz von InvalidSessionException.
            </summary>
        </member>
        <member name="M:Zyan.Communication.InvalidSessionException.#ctor(System.String)">
            <summary>
            Erstellt eine neue Instanz von InvalidSessionException.
            </summary>
            <param name="message">Fehlermeldung</param>
        </member>
        <member name="M:Zyan.Communication.InvalidSessionException.#ctor(System.String,System.Exception)">
            <summary>
            Erstellt eine neue Instanz von InvalidSessionException.
            </summary>
            <param name="message">Fehlermeldung</param>
            <param name="innerException">Ausnahme, welche diese Ausnahme verursacht hat</param>
        </member>
        <member name="M:Zyan.Communication.InvalidSessionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Erstellt eine neue Instanz von InvalidSessionException.
            </summary>
            <param name="info">Serialisierungsinformationen</param>
            <param name="context">Streaming-Kontext der Serialisierung</param>
        </member>
        <member name="M:Zyan.Communication.InvalidSessionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gibt Objektdaten für die Serialisierung zurück.
            </summary>
            <param name="info">Serialisierungsinformationen</param>
            <param name="context">Streaming-Kontext der Serialisierung</param>
        </member>
        <member name="T:Zyan.Communication.CallInterceptorCollection">
            <summary>
            Auflistung von Aufrufabfangvorrichtungen.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorCollection.#ctor">
            <summary>
            Erzeugt eine neue Instanz der CallInterceptorCollection-Klasse.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorCollection.InsertItem(System.Int32,Zyan.Communication.CallInterceptor)">
            <summary>
            Wird aufgerufen, wenn ein neuer Eintrag eingefügt wird.
            </summary>
            <param name="index">Index</param>
            <param name="item">Objekt</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorCollection.RemoveItem(System.Int32)">
            <summary>
            Wird aufgerufen, wenn ein Eintrag entfernt wird.
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorCollection.SetItem(System.Int32,Zyan.Communication.CallInterceptor)">
            <summary>
            Wird aufgerufen, wenn ein Eintrag neu zugewiesen wird.
            </summary>
            <param name="index">Index</param>
            <param name="item">Objekt</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorCollection.ClearItems">
            <summary>
            Wird aufgerufen, wenn alle Einträge entfernt werden sollen.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorCollection.FindMatchingInterceptor(System.Type,System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Sucht eine passende Aufrufabfangvorrichtung für ein bestimmten Methodenaufruf.
            </summary>
            <param name="interfaceType">Typ der Dienstschnittstelle</param>
            <param name="remotingMessage">Remoting-Nachricht des Methodenaufrufs vom Proxy</param>
            <returns>Aufrufabfangvorrichtung oder null</returns>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorCollection.For``1">
            <summary>
            Creates call interceptor helper for the given interface
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.Asynchronizer`1">
            <summary>
            Führt die Verarbeitung einer Nachricht asynchron aus.
            </summary>    
        </member>
        <member name="M:Zyan.Communication.Toolbox.Asynchronizer`1.In(`0)">
            <summary>
            Bestimmte Nachricht mit der festgelegten Aktion asychron verarbeiten.
            </summary>
            <param name="message">Nachricht</param>
        </member>
        <member name="M:Zyan.Communication.Toolbox.Asynchronizer`1.WireUp(System.Action{`0})">
            <summary>
            Erstellt eine neue Instanz und verdrahtet damit zwei Pins.
            </summary>
            <param name="inputPin">Eingangs-Pin</param>
            <returns>Ausgangs-Pin</returns>
        </member>
        <member name="P:Zyan.Communication.Toolbox.Asynchronizer`1.Out">
            <summary>
            Aktion, die zur asynchronen Verarbeitung der Nachricht aufgerufen wird.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannelData">
            <summary>
            Describes configuration data of a TcpEx channel.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannelData.#ctor(Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel)">
            <summary>
            Creates a new instance of the TcpExChannelData class.
            </summary>
            <param name="channel">Remoting channel</param>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannelData.Port">
            <summary>
            Gets the TCP port number of the channel.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannelData.ChannelID">
            <summary>
            Gets or sets the unique identifier of the channel.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannelData.Addresses">
            <summary>
            Gets the registered addresses of the channel.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannelData.Item(System.Object)">
            <summary>
            Gets the value of a channel property by its name.
            </summary>
            <param name="key">Property name</param>
            <returns>Property value</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannelData.ChannelUris">
            <summary>
            Gets an array of all registered channel URIs.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.MessageException">
            <summary>
            Should be thrown when problems with sending or receiving a message occur.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.MessageException.#ctor(System.String,System.Exception,Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection)">
            <summary>
            Creates a new instance of the MessageException class.
            </summary>
            <param name="msg">Error message</param>
            <param name="innerException">Inner exception (can be null)</param>
            <param name="connection">Affected Duplex Channel Connection</param>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.MessageException.Connection">
            <summary>
            Gets or sets the affected Duplex Channel Connection.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.ConnectionRole">
            <summary>
            Defines connection roles. A connection may act as Server or as Client.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection">
            <summary>
            Encapsulates a connection, providing read/write locking for synchronisation.  
            Additionally, this should provide a useful position for adding reconnection abilities.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.GetConnection(System.String,Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel,System.Boolean,System.UInt64,System.UInt64,System.Int16,System.Int32)">
            <summary>
            Gets a specified connection.
            </summary>
            <param name="address">Address of the connection</param>
            <param name="channel">Channel of the connection</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
            <param name="maxRetries">Maximum number of connection retry attempts</param>
            <param name="retryDelay">Delay after connection retry in milliseconds</param>
            <returns>Connection</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.GetRunningConnectionsOfChannel(Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel)">
            <summary>
            Get all currently running connection of a specified channel.
            </summary>
            <param name="channel">TcpEx Channel</param>
            <returns>Running connections</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.CreateConnection(System.Net.Sockets.Socket,Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel,System.Boolean,System.UInt64,System.UInt64,System.Int16,System.Int32)">
            <summary>
            Creates a connection object.
            </summary>
            <param name="socket">Connection socket</param>
            <param name="channel">Connection channel</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
            <param name="maxRetries">Maximum number of connection retry attempts</param>
            <param name="retryDelay">Delay after connection retry in milliseconds</param>
            <returns>Connection</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.#ctor(System.String,Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel,System.Boolean,System.UInt64,System.UInt64,System.Int16,System.Int32)">
            <summary>
            Creates a new instance of the Connection class.
            </summary>
            <param name="address">Address (IP oder DNS based)</param>
            <param name="channel">Remoting channel</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
            <param name="maxRetries">Maximum number of connection retry attempts</param>
            <param name="retryDelay">Delay after connection retry in milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.#ctor(System.Net.Sockets.Socket,Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel,System.Boolean,System.UInt64,System.UInt64,System.Int16,System.Int32)">
            <summary>
            Creates a new instance of the Connection class.
            </summary>
            <param name="socket">Socket which sould be used</param>
            <param name="channel">Remoting channel</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
            <param name="maxRetries">Maximum number of connection retry attempts</param>
            <param name="retryDelay">Delay after connection retry in milliseconds</param>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.BufferSize">
            <summary>
            Defines the buffer size (Default = 10K).
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._connectionRole">
            <summary>
            Defines the connection role.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._socket">
            <summary>
            Socket used for TCP communication.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._socketRemoteAddress">
            <summary>
            Address of the remote socket endpoint.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._socketRemotePort">
            <summary>
            Port of the remote socket endpoint.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._stream">
            <summary>
            Networkstream for sending and receiving raw data.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._reader">
            <summary>
            Reader for reading binary raw data from network stream.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._writer">
            <summary>
            Writer for writing binary raw data to network stream.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._channel">
            <summary>
            Parent Remoting channel of this connection.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._remoteChannelData">
            <summary>
            Configuration data of the remoting channel.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._maxRetries">
            <summary>
            Maximum number of connection retry attempts.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection._retryDelay">
            <summary>
            Delay after retry attempt in milliseconds. 
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.CheckSocket">
            <summary>
            Tries to reconnect, if the socket was closed unexpected.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.SendChannelInfo">
            <summary>
            Sends channel data.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.ReceiveChannelInfo">
            <summary>
            Receives channel data.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.AddToConnectionList">
            <summary>
            Adds the connection to the connection list.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.IsLocalIP(System.Net.IPAddress)">
            <summary>
            Checks if a specified IP address is a local IP or not.
            </summary>
            <param name="remoteAddress">IP address to check</param>
            <returns>true, if local, otherwise false</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.LockRead">
            <summary>
            Locks the connection for reading through other threads.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.ReleaseRead">
            <summary>
            Releases the read lock.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.LockWrite">
            <summary>
            Locks the connection for writing through other threads.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.ReleaseWrite">
            <summary>
            Releases the write lock.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.SetTcpKeepAlive(System.Net.Sockets.Socket,System.UInt64,System.UInt64)">
            <summary>
            Sets TCP-KeepAlive option for a specified socket.
            </summary>        
            <param name="socket">Socket</param>
            <param name="time">Time in milliseconds</param>
            <param name="interval">Interval in milliseconds</param>
            <returns>True if successful, otherwiese false</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.Socket">
            <summary>
            Gets the underlying socket of the connection.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.Stream">
            <summary>
            Gets the Network stream.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.Reader">
            <summary>
            Gets a binary reader for reading raw data from the network stream.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.Writer">
            <summary>
            Gets a binary writer for writing raw data from the network stream.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.IsLocalHost">
            <summary>
            Checks, if the connection is a local connection or not.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.RemoteChannelID">
            <summary>
            Gets the unique identifier of the remote channel.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.RemoteAddresses">
            <summary>
            Gets a list of all registered addresses of the remote channel.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.LocalChannelID">
            <summary>
            Gets the unique identifier of the local channel.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.LocalAddress">
            <summary>
            Gets the address of the local channel.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.MaxRetries">
            <summary>
            Gets or sets the maximum number of connection retry attempts.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.RetryDelay">
            <summary>
            Gets or sets the delay after a retry attempt in milliseconds.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.TcpKeepAliveEnabled">
            <summary>
            Enables or disables TCP KeepAlive.        
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.TcpKeepAliveTime">
            <summary>
            Gets or sets the TCP KeepAlive time in milliseconds.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection.TcpKeepAliveInterval">
            <summary>
            Gets or sets the TCP KeepAlive interval in milliseconds
            </summary>
        </member>
        <member name="T:Zyan.Communication.BeforeInvokeEventArgs">
            <summary>
            Beschreibt Ereignisargumente für Aufrufereignisse mit Abbruchmöglichkeit.
            </summary>
        </member>
        <member name="M:Zyan.Communication.BeforeInvokeEventArgs.ToString">
            <summary>
            Gibt den Inhalt des Objekts als Zeichenkette ausgedrückt zurück.
            </summary>
            <returns>Zeichenkette</returns>
        </member>
        <member name="P:Zyan.Communication.BeforeInvokeEventArgs.TrackingID">
            <summary>
            Gibt den Nachverfolgungsschlüssel des Methodenaufrufs zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.BeforeInvokeEventArgs.Cancel">
            <summary>
            Gibt zurück, ob der Aufruf abgebrochen werden soll, oder legt diest fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.BeforeInvokeEventArgs.CancelException">
            <summary>
            Gibt die Ausnahme für den Abbruch zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.BeforeInvokeEventArgs.InterfaceName">
            <summary>
            Gibt den Namen der Komponentenschnittstelle zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.BeforeInvokeEventArgs.DelegateCorrelationSet">
            <summary>
            Gibt den Korrelationssatz für Ausgangs-Pins zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.BeforeInvokeEventArgs.MethodName">
            <summary>
            Gibt den Methodennamen zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.BeforeInvokeEventArgs.Arguments">
            <summary>
            Gibt die Methodenargumente zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.Extensions">
            <summary>
            Various extension methods
            TODO: Localize exceptions and trace messages
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.Extensions.Dump(System.Exception,System.String)">
            <summary>
            Converts exception and all of its inner exceptions to string
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.Extensions.IsOneWay(System.Reflection.MethodInfo)">
            <summary>
            Returns true if method in one-way
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.Extensions.Invoke(System.Reflection.MethodInfo,System.Object,System.Object[],System.Boolean)">
            <summary>
            Invokes the method represented by current instance using the supplied parameters in either one-way or normal mode
            </summary>
        </member>
        <member name="T:Zyan.Communication.ServerSession">
            <summary>
            Beschreibt eine Sitzung auf dem Server.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ServerSession.#ctor(System.Guid,System.Security.Principal.IIdentity,Zyan.Communication.SessionMgmt.SessionVariableAdapter)">
            <summary>
            Erzeugt eine neue Instanz von ServerSession.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
            <param name="identity">Identität</param>
            <param name="sessionVariableAdapter">Adapter für den Zugriff auf Sitzungsvariablen</param>
        </member>
        <member name="M:Zyan.Communication.ServerSession.#ctor(System.Guid,System.DateTime,System.Security.Principal.IIdentity,Zyan.Communication.SessionMgmt.SessionVariableAdapter)">
            <summary>
            Erzeugt eine neue Instanz von ServerSession.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
            <param name="timestamp">Zeitstempel der Sitzung</param>
            <param name="identity">Identität</param>
            <param name="sessionVariableAdapter">Adapter für den Zugriff auf Sitzungsvariablen</param>
        </member>
        <member name="F:Zyan.Communication.ServerSession.CurrentSession">
            <summary>
            Gibt die Sitzung des aktuellen Threads zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ServerSession.SessionID">
            <summary>
            Gibt den Sitzungsschlüssel zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ServerSession.Identity">
            <summary>
            Gibt die Identität des Beutzers der Sitzung zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ServerSession.Timestamp">
            <summary>
            Gibt den Zeitstempel der Sitzung zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ServerSession.SessionVariables">
            <summary>
            Gibt ein Adapter-Objekt für den Zugriff auf Sitzungsvariablen zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ServerSession.ClientAddress">
            <summary>
            Gets or sets the IP Address of the calling client.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.CryptoTools">
            <summary>
            Kryptographie-Werkzeuge.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoTools.CreateSymmetricCryptoProvider(System.String)">
            <summary>
            Erzeugt einen Kryptografieanbieter für symmetrische Verschlüsselung.         ///
            <remarks>
            Folgende Algorithmen weren unterstützt:
            
            "DES", "3DES", "RIJNDAEL" und "RC2"
            </remarks>
            </summary>
            <param name="algorithm">Name des zu verwendenden Verschlüsselungsalgorithmus (z.B. "3DES")</param>
            <returns>Kryptografieanbieter für symmetrische Verschlüsselung</returns>		
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoTools.GetEncryptedStream(System.IO.Stream,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Verschlüsselt einen bestimmten Datenstrom symmetrisch und gibt den verschlüsselten Datenstrom zurück.
            <remarks>
            Der verschlüsselte Datenstrom wird automatisch auf Position 0 zurückgesetzt.
            </remarks>
            </summary>
            <param name="inputStream">Unverschlüsselter Eingabedatenstrom</param>
            <param name="provider">Kryptografieanbieter für symmetrische Verschlüsselung</param>
            <returns>Verschlüsselter Datenstrom</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoTools.GetDecryptedStream(System.IO.Stream,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Entschlüsselt einen bestimmten symmetrisch verschlüsselten Datenstrom gibt den entschlüsselten Datenstrom zurück.
            <remarks>
            Der entschlüsselte Datenstrom wird automatisch auf Position 0 zurückgesetzt.
            </remarks>
            </summary>
            <param name="inputStream">Verschlüsselter Eingabedatenstrom</param>
            <param name="provider">Kryptografieanbieter für symmetrische Verschlüsselung</param>
            <returns>Entschlüsselter Datenstrom</returns>
        </member>
        <member name="T:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup">
            <summary>
            Protokolleinstellungen für serverseitige HTTP-Kommunikation mit benutzerdefinierter Authentifizierung und Verschlüsselung.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.#ctor">
            <summary>
            Erstellt eine neue Instanz von HttpCustomServerProtocolSetup.
            </summary>        
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider)">
            <summary>
            Erstellt eine neue Instanz von HttpCustomServerProtocolSetup.
            </summary>
            <param name="httpPort">HTTP-Anschlußnummer</param>
            <param name="authProvider">Authentifizierungsanbieter</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean)">
            <summary>
            Erzeugt eine neue Instanz von HttpCustomServerProtocolSetup.
            </summary>
            <param name="httpPort">HTTP-Anschlußnummer</param>
            <param name="authProvider">Authentifizierungsanbieter</param>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String)">
            <summary>
            Erzeugt eine neue Instanz von HttpCustomServerProtocolSetup.
            </summary>
            <param name="httpPort">HTTP-Anschlußnummer</param>
            <param name="authProvider">Authentifizierungsanbieter</param>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String,System.Boolean)">
            <summary>
            Erzeugt eine neue Instanz von HttpCustomServerProtocolSetup.
            </summary>
            <param name="httpPort">HTTP-Anschlußnummer</param>
            <param name="authProvider">Authentifizierungsanbieter</param>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>        
            <param name="oaep">Gibt an, ob OAEP Padding verwendet werden soll</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.CreateChannel">
            <summary>
            Erzeugt einen fertig konfigurierten Remoting-Kanal.
            <remarks>
            Wenn der Kanal in der aktuellen Anwendungsdomäne bereits registriert wurde, wird null zurückgegeben.
            </remarks>
            </summary>
            <returns>Remoting Kanal</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.HttpPort">
            <summary>
            Gibt die HTTP-Anschlußnummer zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.UseBinaryFormatter">
            <summary>
            Gibt zurück, ob binäre Formatierung aktivuert werden soll, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.Algorithm">
            <summary>
            Gibt den Namen des zu verwendenden symmetrischen Verschlüsselungsalgorithmus zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.Oeap">
            <summary>
            Gibt zurück, ob OEAP-Padding aktivuert werden soll, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Http.HttpCustomServerProtocolSetup.AuthenticationProvider">
            <summary>
            Gibt den Authentifizierungsanbieter zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup">
            <summary>
            Protokolleinstellungen für clientseitige HTTP-Kommunikation mit benutzerdefinierter Authentifizierung und Verschlüsselung.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor">
            <summary>
            Erzeugt eine neue Instanz von HttpCustomClientProtocolSetup.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(System.Boolean)">
            <summary>
            Erzeugt eine neue Instanz von HttpCustomClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(System.Boolean,System.String)">
            <summary>
            Erzeugt eine neue Instanz von HttpCustomClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(System.Boolean,System.String,System.Int32)">
            <summary>
            Erzeugt eine neue Instanz von HttpCustomClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>
            <param name="maxAttempts">Anzahl der maximalen Verbindungsversuche</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(System.Boolean,System.String,System.Boolean)">
            <summary>
            Erzeugt eine neue Instanz von HttpCustomClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>        
            <param name="oaep">Gibt an, ob OAEP Padding verwendet werden soll</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.#ctor(System.Boolean,System.String,System.Int32,System.Boolean)">
            <summary>
            Erzeugt eine neue Instanz von HttpCustomClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>
            <param name="maxAttempts">Anzahl der maximalen Verbindungsversuche</param>
            <param name="oaep">Gibt an, ob OAEP Padding verwendet werden soll</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.CreateChannel">
            <summary>
            Erzeugt einen fertig konfigurierten Remoting-Kanal.
            <remarks>
            Wenn der Kanal in der aktuellen Anwendungsdomäne bereits registriert wurde, wird null zurückgegeben.
            </remarks>
            </summary>
            <returns>Remoting Kanal</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.Algorithm">
            <summary>
            Gibt den Namen des zu verwendenden symmetrischen Verschlüsselungsalgorithmus zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.Oeap">
            <summary>
            Gibt zurück, ob OEAP-Padding aktiviert werden soll, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.UseBinaryFormatter">
            <summary>
            Gibt zurück, ob binäre Formatierung aktivuert werden soll, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Http.HttpCustomClientProtocolSetup.MaxAttempts">
            <summary>
            Gibt die Anzahl der Versuche zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Notification.NotificationEventArgs">
            <summary>
            Beschreibt Ereignisargumente für Benachrichtigungs-Ereignisse.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationEventArgs.#ctor(System.Object)">
            <summary>
            Erzeugt eine neue Instanz von NotificationEventArgs.
            </summary>
            <param name="message">Nachricht</param>
        </member>
        <member name="P:Zyan.Communication.Notification.NotificationEventArgs.Message">
            <summary>
            Gibt die Nachricht zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.AfterInvokeEventArgs">
            <summary>
            Beschreibt Ereignisargumente für Aufrufereignisse.
            </summary>
        </member>
        <member name="M:Zyan.Communication.AfterInvokeEventArgs.ToString">
            <summary>
            Gibt den Inhalt des Objekts als Zeichenkette ausgedrückt zurück.
            </summary>
            <returns>Zeichenkette</returns>
        </member>
        <member name="P:Zyan.Communication.AfterInvokeEventArgs.TrackingID">
            <summary>
            Gibt den Nachverfolgungsschlüssel des Methodenaufrufs zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.AfterInvokeEventArgs.InterfaceName">
            <summary>
            Gibt den Namen der Komponentenschnittstelle zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.AfterInvokeEventArgs.DelegateCorrelationSet">
            <summary>
            Gibt den Korrelationssatz für Delegaten zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.AfterInvokeEventArgs.MethodName">
            <summary>
            Gibt den Methodennamen zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.AfterInvokeEventArgs.Arguments">
            <summary>
            Gibt die Methodenargumente zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.AfterInvokeEventArgs.ReturnValue">
            <summary>
            Gibt den Rückgabewert der Methode zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.DelegateInterceptor">
            <summary>
            Abfangvorrichtung für Delegaten.
            </summary>
        </member>
        <member name="M:Zyan.Communication.DelegateInterceptor.#ctor">
            <summary>
            Erzeugt eine neue Instanz der DelegateInterceptor-Klasse.
            </summary>
        </member>
        <member name="M:Zyan.Communication.DelegateInterceptor.InvokeClientDelegate(System.Object[])">
            <summary>
            Ruft den verdrahteten Client-Delegaten dynamisch auf.
            </summary>
            <param name="args">Argumente</param>
        </member>
        <member name="M:Zyan.Communication.DelegateInterceptor.InitializeLifetimeService">
            <summary>
            Ensures unlimited Remoting lifetime.
            </summary>
            <returns>Always null</returns>
        </member>
        <member name="P:Zyan.Communication.DelegateInterceptor.ClientDelegate">
            <summary>
            Gibt den clientseitigen Empfängerdelegaten zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ComponentRegistration">
            <summary>
            Beschreibt eine Komponenten-Registrierung.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor">
            <summary>
            Standardkonstruktor.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Type)">
            <summary>
            Konstruktor.
            </summary>
            <param name="interfaceType">Schnittstellentyp der Komponente</param>
            <param name="implementationType">Implementierungstyp der Komponente</param>                
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Type,Zyan.Communication.ActivationType)">
            <summary>
            Konstruktor.
            </summary>
            <param name="interfaceType">Schnittstellentyp der Komponente</param>
            <param name="implementationType">Implementierungstyp der Komponente</param>                
            <param name="activationType">Aktivierungsart</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Func{System.Object})">
            <summary>
            Konstruktor.
            </summary>
            <param name="interfaceType">Schnittstellentyp der Komponente</param>
            <param name="intializationHandler">Delegat auf Inizialisierungsfunktion</param>        
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Func{System.Object},Zyan.Communication.ActivationType)">
            <summary>
            Konstruktor.
            </summary>
            <param name="interfaceType">Schnittstellentyp der Komponente</param>
            <param name="intializationHandler">Delegat auf Inizialisierungsfunktion</param>        
            <param name="activationType">Aktivierungsart</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Object)">
            <summary>
            Konstruktor.
            </summary>
            <param name="interfaceType">Schnittstellentyp der Komponente</param>
            <param name="singletonInstance">Singleton-Instanz der Komponente</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Konstruktor.
            </summary>
            <param name="interfaceType">Schnittstellentyp der Komponente</param>
            <param name="implementationType">Implementierungstyp der Komponente</param>        
            <param name="uniqueName">Eindeutiger Name</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Type,System.String,Zyan.Communication.ActivationType)">
            <summary>
            Konstruktor.
            </summary>
            <param name="interfaceType">Schnittstellentyp der Komponente</param>
            <param name="implementationType">Implementierungstyp der Komponente</param>        
            <param name="uniqueName">Eindeutiger Name</param>
            <param name="activationType">Aktivierungsart</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Func{System.Object},System.String)">
            <summary>
            Konstruktor.
            </summary>
            <param name="interfaceType">Schnittstellentyp der Komponente</param>
            <param name="intializationHandler">Delegat auf Inizialisierungsfunktion</param>        
            <param name="uniqueName">Eindeutiger Name</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Func{System.Object},System.String,Zyan.Communication.ActivationType)">
            <summary>
            Konstruktor.
            </summary>
            <param name="interfaceType">Schnittstellentyp der Komponente</param>
            <param name="intializationHandler">Delegat auf Inizialisierungsfunktion</param>        
            <param name="uniqueName">Eindeutiger Name</param>
            <param name="activationType">Aktivierungsart</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.#ctor(System.Type,System.Object,System.String)">
            <summary>
            Konstruktor.
            </summary>
            <param name="interfaceType">Schnittstellentyp der Komponente</param>
            <param name="singletonInstance">Singleton-Instanz der Komponente</param>
            <param name="uniqueName">Eindeutiger Name</param>
        </member>
        <member name="M:Zyan.Communication.ComponentRegistration.ToString">
            <summary>
            Gibt die Objektdaten als Zeichenkette zurück.
            </summary>
            <returns>Als Zeichenkette ausgedrückte Objektdaten</returns>
        </member>
        <member name="P:Zyan.Communication.ComponentRegistration.SyncLock">
            <summary>
            Gibt das Sperrobjekt für Threadsynchronisierung zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentRegistration.EventWirings">
            <summary>
            Gibt die Liste der Ereignisverdrahtungen zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentRegistration.UniqueName">
            <summary>
            Gibt den eindeutigen Namen zurück, oder legt ihn fest.        
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentRegistration.InterfaceType">
            <summary>
            Gibt den Typ der öffentlichen Komponenten-Schnittstelle zurück, oder legt ihn fest. 
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentRegistration.ImplementationType">
            <summary>
            Gibt den Implementierungstyp der Komponente zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentRegistration.InitializationHandler">
            <summary>
            Gibt einen Delegaten auf eine Methode zurück, die sich um die Erzeugung der Komponente und deren Inizialisierung kümmert,
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentRegistration.SingletonInstance">
            <summary>
            Gibt die Singleton-Instanz der Komponente zurück, oder legt diese fest.
            <remarks>
            Wenn keine Singleton-Instanz angegeben ist, erzeugt der Komponentenhost für jeden Client-Aufruf 
            automatisch eine Instanz, die nur für einen Methodenaufruf lebt.
            </remarks>
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentRegistration.ActivationType">
            <summary>
            Gibt die Aktivierungsart der Komponente zurück, oder lget sie fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSinkProvider">
            <summary>
            Anbieter für die serverseitige Kanalsenke zur verschlüsselten Kommunikation.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSinkProvider.#ctor">
            <summary>
            Erzeugt eine neue Instanz von CryptoServerChannelSinkProvider.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Erzeugt eine neue Instanz von CryptoServerChannelSinkProvider.
            </summary>
            <param name="properties">Konfigurationseinstellungen (z.B. aus der App.config)</param>
            <param name="providerData">Optionale Anbieterdaten</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelReceiver)">
            <summary>
            Erzeugt eine Senkenkette.
            </summary>
            <param name="channel">Kanal, für welchen die Senkenkette erstellt werden soll</param>
            <returns>Verkettete Kanalsenke, oder null, wenn keine erstellt wurde</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSinkProvider.GetChannelData(System.Runtime.Remoting.Channels.IChannelDataStore)">
            <summary>
            Ruft Einstellungen des zu Grunde liegenden Kanals ab.
            </summary>
            <param name="channelData">Kanal-Einstellungen</param>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSinkProvider.Algorithm">
            <summary>
            Gibt den Namen des zu verwendenden symmetrischen Verschlüsselungsalgorithmus zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSinkProvider.Oaep">
            <summary>
            Gibt zurück, ob OEAP-Padding aktivuert werden soll, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSinkProvider.RequireCryptoClient">
            <summary>
            Gibt zurück, ob der zwingend auch verschlüsseln muss, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSinkProvider.Next">
            <summary>
            Gibt den nächsten Senkenanbieter zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSinkProvider">
            <summary>
            Anbieter der clientseitigen Kanalsenke für verschlüsselte Übertragung.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSinkProvider.#ctor">
            <summary>
            Erzeugt eine neue Instanz von CryptoClientChannelSinkProvider.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Erzeugt eine neue Instanz von CryptoClientChannelSinkProvider.
            </summary>
            <param name="properties">Konfigurationseinstellungen (z.B. aus der App.config)</param>
            <param name="providerData">Optionale Anbieterdaten</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelSender,System.String,System.Object)">
            <summary>
            Erzeugt eine Senkenkette.
            </summary>
            <param name="channel">Kanal, welcher den aktuellen Senkenanbieter erzeugt hat</param>
            <param name="url">URL des entfernten Objekts</param>
            <param name="remoteChannelData">Beschreibung des Serverkanals</param>
            <returns>Verkettete Kanalsenke, oder null, wenn keine erstellt wurde</returns>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSinkProvider.Algorithm">
            <summary>
            Gibt den Namen des zu verwendenden symmetrischen Verschlüsselungsalgorithmus zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSinkProvider.Oaep">
            <summary>
            Gibt zurück, ob OEAP-Padding aktivuert werden soll, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSinkProvider.MaxAttempts">
            <summary>
            Gibt die Anzahl der Versuche zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSinkProvider.Next">
            <summary>
            Gibt den nächsten Senkenanbieter zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message">
            <summary>
            A message which can be sent or received over a Duplex Channel instance.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.#ctor">
            <summary>
            Creates a new instance of the Message class.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.#ctor(System.Guid,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            Creates a new instance of the Message class.
            </summary>
            <param name="guid">Unique identifier of the message</param>
            <param name="headers">Remoting transport headers</param>
            <param name="message">Stream for message raw data</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.Send(Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection)">
            <summary>
            Sends the message over a specified connection.
            </summary>
            <param name="connection">Duplex Channel Connection</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.Send(Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection,System.Guid,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            Sends a specified message over a specified connection.
            </summary>
            <param name="connection">Duplex Channel Connection</param>
            <param name="guid">Unique identifier of the Message</param>
            <param name="headers">Remoting transport headers</param>
            <param name="message">Stream with raw data of the message</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.BeginReceive(Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection,System.AsyncCallback,System.Object)">
            <summary>
            Begins receiving message data asynchronously.
            </summary>
            <param name="connection">Duplex Channel Connection</param>
            <param name="callback">Delegate to invoke, when asynchronous operation is completed</param>
            <param name="asyncState">Pass through state object</param>
            <returns>Result</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.EndReceive(Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection@,System.IAsyncResult)">
            <summary>
            Receives a message over a specified Duplex Channel Connection.
            </summary>
            <param name="connection">Duplex Channel Connection</param>
            <param name="ar">Result (for Async pattern)</param>
            <returns>Received message</returns>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns>Unique message identifier</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.MessageBody">
            <summary>
            Gets a stream for accessing the message´s body raw data.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult">
            <summary>
            State object needed to perform asynchronous receive operations.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.#ctor(Zyan.Communication.Protocols.Tcp.DuplexChannel.Connection,System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Creates a new instance of the AsyncResult class.
            </summary>
            <param name="connection">Duplex Channel Connection</param>
            <param name="buffer">Buffer</param>
            <param name="callback">Delegate to invoke, when asynchronous operation is completed</param>
            <param name="asyncState">Pass trough state object</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.Complete(System.IAsyncResult)">
            <summary>
            Marks the asynchronous receive operation as completed.
            </summary>
            <param name="ar">Result (for Async pattern)</param>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.Callback">
            <summary>
            Gets the callback delegate.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.Buffer">
            <summary>
            Gets the receive buffer.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.Connection">
            <summary>
            Get the affected Duplex Channel Connection.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.InternalAsyncResult">
            <summary>
            Gets the internal async. result.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.AsyncState">
            <summary>
            Gets the pass through state object.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.CompletedSynchronously">
            <summary>
            Gets if the operation is completed synchronously or not.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.AsyncWaitHandle">
            <summary>
            Gets a wait handle for the asynchronous operation.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.Message.AsyncResult.IsCompleted">
            <summary>
            Gets if the asynchronous operation is completed or not.
            </summary>
        </member>
        <member name="T:Zyan.Communication.InvokeCanceledEventArgs">
            <summary>
            Beschreibt Ereignisargumente für Aufrufabbruch-Ereignisse.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvokeCanceledEventArgs.TrackingID">
            <summary>
            Gibt den Nachverfolgungsschlüssel des Methodenaufrufs zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.InvokeCanceledEventArgs.CancelException">
            <summary>
            Gibt die Ausnahme für den Abbruch zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.DelegateCorrelationInfo">
            <summary>
            Beschreibt Korrelationsinformationen zur Verdrahtung eines Server-Delegaten mit einer Client-Methode.
            </summary>
        </member>
        <member name="M:Zyan.Communication.DelegateCorrelationInfo.#ctor">
            <summary>
            Erzeugt eine neue Instanz der DelegateCorrelationInfo-Klasse.
            </summary>
        </member>
        <member name="P:Zyan.Communication.DelegateCorrelationInfo.DelegateMemberName">
            <summary>
            Gibt den Name der serverseitigen Delegat-Eigenschaft oder der Ereignisses zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.DelegateCorrelationInfo.IsEvent">
            <summary>
            Gibt zurück, ob es sich um ein Ereignis handelt, oder legt diest fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.DelegateCorrelationInfo.CorrelationID">
            <summary>
            Gibt den eindeutigen Korrelationsschlüssel zurück oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.DelegateCorrelationInfo.ClientDelegateInterceptor">
            <summary>
            Gibt die clientseitige Delegaten-Abfangvorrichtung zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ZyanComponentHost">
            <summary>
            Host for publishing components with Zyan.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.#ctor(System.String,System.Int32)">
            <summary>
            Konstruktor.
            </summary>
            <param name="name">Name des Komponentenhosts</param>        
            <param name="tcpPort">TCP-Anschlussnummer</param>                
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.#ctor(System.String,System.Int32,Zyan.Communication.ComponentCatalog)">
            <summary>
            Konstruktor.
            </summary>
            <param name="name">Name des Komponentenhosts</param>        
            <param name="tcpPort">TCP-Anschlussnummer</param>                
            <param name="catalog">Komponenten-Katalog</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.#ctor(System.String,Zyan.Communication.Protocols.IServerProtocolSetup)">
            <summary>
            Konstruktor.
            </summary>
            <param name="name">Name des Komponentenhosts</param>        
            <param name="protocolSetup">Protokoll-Einstellungen</param>        
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.#ctor(System.String,Zyan.Communication.Protocols.IServerProtocolSetup,Zyan.Communication.ComponentCatalog)">
            <summary>
            Konstruktor.
            </summary>
            <param name="name">Name des Komponentenhosts</param>        
            <param name="protocolSetup">Protokoll-Einstellungen</param>        
            <param name="catalog">Komponenten-Katalog</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.#ctor(System.String,Zyan.Communication.Protocols.IServerProtocolSetup,Zyan.Communication.SessionMgmt.ISessionManager)">
            <summary>
            Konstruktor.
            </summary>
            <param name="name">Name des Komponentenhosts</param>        
            <param name="protocolSetup">Protokoll-Einstellungen</param>
            <param name="sessionManager">Sitzungsverwaltung</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.#ctor(System.String,Zyan.Communication.Protocols.IServerProtocolSetup,Zyan.Communication.SessionMgmt.ISessionManager,Zyan.Communication.ComponentCatalog)">
            <summary>
            Konstruktor.
            </summary>
            <param name="name">Name des Komponentenhosts</param>        
            <param name="protocolSetup">Protokoll-Einstellungen</param>        
            <param name="sessionManager">Sitzungsverwaltung</param>
            <param name="catalog">Komponenten-Katalog</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.Finalize">
            <summary>
            Destruktor.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ZyanComponentHost.Authenticate">
            <summary>
            Request for authentication.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.GetComponentInstance(Zyan.Communication.ComponentRegistration)">
            <summary>
            Gibt eine Instanz einer registrierten Komponente zurück.
            </summary>
            <param name="registration">Komponentenregistrierung</param>
            <returns>Komponenten-Instanz</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.UnregisterComponent``1">
            <summary>
            Hebt die Registrierung einer bestimmten Komponente auf.
            </summary>
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.UnregisterComponent(System.String)">
            <summary>
            Hebt die Registrierung einer bestimmten Komponente auf.
            </summary>
            <param name="uniqueName">Eindeutiger Name</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.RegisterComponent``2">
            <summary>
            Registriert eine bestimmte Komponente.
            </summary>        
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <typeparam name="T">Implementierungstyp der Komponente</typeparam>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.RegisterComponent``2(Zyan.Communication.ActivationType)">
            <summary>
            Registriert eine bestimmte Komponente.
            </summary>        
            <param name="activationType">Aktivierungsart</param>
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <typeparam name="T">Implementierungstyp der Komponente</typeparam>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.RegisterComponent``1(System.Func{System.Object})">
            <summary>
            Registriert eine bestimmte Komponente.
            </summary>
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <param name="factoryMethod">Delegat auf Fabrikmethode, die sich um die Erzeugung und Inizialisierung der Komponente kümmert</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.RegisterComponent``1(System.Func{System.Object},Zyan.Communication.ActivationType)">
            <summary>
            Registriert eine bestimmte Komponente.
            </summary>
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <param name="factoryMethod">Delegat auf Fabrikmethode, die sich um die Erzeugung und Inizialisierung der Komponente kümmert</param>
            <param name="activationType">Aktivierungstyp</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.RegisterComponent``2(``1)">
            <summary>
            Registriert eine bestimmte Komponenteninstanz.
            </summary>
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <typeparam name="T">Implementierungstyp der Komponente</typeparam>
            <param name="instance">Instanz</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.RegisterComponent``2(System.String)">
            <summary>
            Registriert eine bestimmte Komponente.
            </summary>        
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <typeparam name="T">Implementierungstyp der Komponente</typeparam>
            <param name="uniqueName">Eindeutiger Name</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.RegisterComponent``2(System.String,Zyan.Communication.ActivationType)">
            <summary>
            Registriert eine bestimmte Komponente.
            </summary>        
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <typeparam name="T">Implementierungstyp der Komponente</typeparam>
            <param name="uniqueName">Eindeutiger Name</param>
            <param name="activationType">Aktivierungstyp</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.RegisterComponent``1(System.String,System.Func{System.Object})">
            <summary>
            Registriert eine bestimmte Komponente.
            </summary>
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <param name="uniqueName">Eindeutiger Name</param>
            <param name="factoryMethod">Delegat auf Fabrikmethode, die sich um die Erzeugung und Inizialisierung der Komponente kümmert</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.RegisterComponent``1(System.String,System.Func{System.Object},Zyan.Communication.ActivationType)">
            <summary>
            Registriert eine bestimmte Komponente.
            </summary>
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <param name="uniqueName">Eindeutiger Name</param>
            <param name="factoryMethod">Delegat auf Fabrikmethode, die sich um die Erzeugung und Inizialisierung der Komponente kümmert</param>
            <param name="activationType">Aktivierungstyp</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.RegisterComponent``2(System.String,``1)">
            <summary>
            Registriert eine bestimmte Komponenteninstanz.
            </summary>
            <typeparam name="I">Schnittstellentyp der Komponente</typeparam>
            <typeparam name="T">Implementierungstyp der Komponente</typeparam>
            <param name="uniqueName">Eindeutiger Name</param>
            <param name="instance">Instanz</param>        
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.GetRegisteredComponents">
            <summary>
            Gibt eine Liste mit allen registrierten Komponenten zurück.
            </summary>
            <returns>Liste der registrierten Komponenten</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.StartListening">
            <summary>
            Startet das Horchen auf Client-Anfragen.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.StopListening">
            <summary>
            Beendet das Horchen auf Client-Anfragen.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.CloseChannel">
            <summary>
            Schließt den Kanal, falls dieser geöffent ist.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.HasBeforeInvokeSubscriptions">
            <summary>
            Gibt zurück, ob für das BeforeInvoke-Ereignis Abos registriert wurden.
            </summary>
            <returns>Wahr, wenn Abos vorhanden, ansonsten Falsch</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.HasAfterInvokeSubscriptions">
            <summary>
            Gibt zurück, ob für das AfterInvoke-Ereignis Abos registriert wurden.
            </summary>
            <returns>Wahr, wenn Abos vorhanden, ansonsten Falsch</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.HasInvokeCanceledSubscriptions">
            <summary>
            Gibt zurück, ob für das InvokeCanceled-Ereignis Abos registriert wurden.
            </summary>
            <returns>Wahr, wenn Abos vorhanden, ansonsten Falsch</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.OnBeforeInvoke(Zyan.Communication.BeforeInvokeEventArgs)">
            <summary>
            Feuert das BeforeInvoke-Ereignis.
            </summary>
            <param name="e">Ereignisargumente</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.OnAfterInvoke(Zyan.Communication.AfterInvokeEventArgs)">
            <summary>
            Feuert das AfterInvoke-Ereignis.
            </summary>
            <param name="e">Ereignisargumente</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.OnInvokeCanceled(Zyan.Communication.InvokeCanceledEventArgs)">
            <summary>
            Feuert das InvokeCanceled-Ereignis.
            </summary>
            <param name="e">Ereignisargumente</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.StartNotificationService">
            <summary>
            Startet den Benachrichtigungsdienst.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.StopNotificationService">
            <summary>
            Beendet den Benachrichtigungsdienst.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.PublishEvent(System.String)">
            <summary>
            Veröffentlicht ein Ereignis einer Serverkomponente.
            </summary>
            <param name="eventName">Ereignisname</param>
            <returns>Delegat für Benachrichtigungsversand an registrierte Clients</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.Dispose">
            <summary>
            Verwaltete Ressourcen freigeben.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.OnClientLoggedOn(Zyan.Communication.LoginEventArgs)">
            <summary>
            Fires "ClientLoggedOn" event.
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="M:Zyan.Communication.ZyanComponentHost.OnClientLoggedOff(Zyan.Communication.LoginEventArgs)">
            <summary>
            Fires "ClientLoggedOff" event.
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="P:Zyan.Communication.ZyanComponentHost.SessionManager">
            <summary>
            Returns the session manager used by this host.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanComponentHost.Hosts">
            <summary>
            Gibt eine Auflistung aller bekanten Komponenten Hosts zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanComponentHost.ComponentCatalog">
            <summary>
            Gibt den zu veröffentlichenden Komponenten-Katalog zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanComponentHost.ComponentRegistry">
            <summary>
            Gibt die Liste der Registrierten Komponenten zurück.
            <remarks>Falls die Liste noch nicht existiert, wird sie automatisch erstellt.</remarks>
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanComponentHost.Name">
            <summary>
            Gibt den Namen des Komponentenhosts zurück.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanComponentHost.BeforeInvoke">
            <summary>
            Ereignis: Bevor ein Komponentenaufruf durchgeführt wird.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanComponentHost.AfterInvoke">
            <summary>
            Ereignis: Nachdem ein Komponentenaufruf durchgeführt wurde.
            </summary>
        </member>
        <member name="E:Zyan.Communication.ZyanComponentHost.InvokeCanceled">
            <summary>
            Ereignis: Wenn ein Komponentenaufruf abgebrochen wurde.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanComponentHost.IsNotificationServiceRunning">
            <summary>
            Gibt zurück, ob der Benachrichtigungsdienst läuft, oder nicht.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanComponentHost.NotificationService">
            <summary>
            Gibt den Benachrichtigungsdienst zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanComponentHost.SerializationHandling">
            <summary>
            Gibt die Verwaltung für benutzerdefinierte Serialisierungsbehandlung zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Security.BasicWindowsAuthProvider">
            <summary>
            Authentifizierungsanbieter für einfache Authentifizierung mit Benutzername und Passwort im Klartext.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Security.BasicWindowsAuthProvider.ValidateWindowsCredentials(System.String,System.String,System.String)">
            <summary>
            Überprüft Windows-Anmeldeinformationen.
            </summary>
            <param name="username">Windows-Benutzername</param>
            <param name="password">Windows-Kennwort</param>
            <param name="domain">Windows-Computername oder Active Directory-Domäne</param>
            <returns>Wahr, wenn die Anmeldung erflgreich war, ansonsten Falsch</returns>
        </member>
        <member name="M:Zyan.Communication.Security.BasicWindowsAuthProvider.Authenticate(Zyan.Communication.Security.AuthRequestMessage)">
            <summary>
            Authentifiziert einen bestimmten Benutzer anhand seiner Anmeldeinformationen.
            </summary>
            <param name="authRequest">Authentifizierungs-Anfragenachricht mit Anmeldeinformationen</param>
            <returns>Antwortnachricht des Authentifizierungssystems</returns>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink">
            <summary>
            Serverseitige Kanalsenke für verschlüsselte Kommunikation.
            <remarks>
            Benötigt auf der Clientseite CryptoClientChannelSink als Gegenstück!
            </remarks>
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.#ctor(System.Runtime.Remoting.Channels.IServerChannelSink,System.String,System.Boolean,System.Double,System.Double,System.Boolean,System.Net.IPAddress[])">
            <summary>Erstellt eine neue Instanz von CryptoServerChannelSink.</summary>
            <param name="nextSink">Nächste Kanalsenke in der Senkenkette</param>
            <param name="algorithm">Name des symmetrischen Verschlüsselungsalgorithmus</param>
            <param name="oaep">Gibt an, ob OAEP-Padding verwendet werden soll, oder nicht</param>
            <param name="connectionAgeLimit">Lebenszeit einer Client-Verbindung in Sekunden</param>
            <param name="sweeperFrequency">Intervall des Aufräumvorgangs in Sekunden</param>
            <param name="requireCryptoClient">Gibt an, ob clientseitig eine Kanalsenke für verschlüsselte Kommunikation vorhanden sein muss</param>
            <param name="securityExemptionList">IP-Adressen Ausnahmeliste</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.MakeSharedKey(System.Guid,System.Runtime.Remoting.Channels.ITransportHeaders,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            Erzeugt den gemeinsamen Schlüssel und bereitet dessen Übertragung zum Client vor.
            </summary>
            <param name="transactID">Sicherheitstransaktionskennung</param>
            <param name="requestHeaders">Anfrage-Header vom Client</param>
            <param name="responseMsg">Antwortnachricht</param>
            <param name="responseHeaders">Antwort-Header</param>
            <param name="responseStream">Antwort-Datenstrom</param>
            <returns>Status</returns>		
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.ProcessEncryptedMessage(System.Guid,System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            Entschlüsselt die eingehende Nachricht vom Client.
            </summary>
            <param name="transactID">Sicherheitstransaktionskennung</param>
            <param name="sinkStack">Senkenstapel</param>
            <param name="requestMsg">Anfrage-Nachricht vom Client</param>
            <param name="requestHeaders">Anfrage-Header vom Cient</param>
            <param name="requestStream">Anfrage-Datenstrom</param>
            <param name="responseMsg">Antwort-Nachricht</param>
            <param name="responseHeaders">Antwort-Header</param>
            <param name="responseStream">Antwort-Datenstrom</param>
            <returns>Verarbeitungsstatus</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.IsExistingSecurityTransaction(System.Guid)">
            <summary>
            Prüft, ob eine bestimmte Sicherheitstransaktionskennung bereits bekannt ist.
            </summary>
            <param name="transactID">Sicherheitstransaktionskennung</param>
            <returns>Wahr, wenn die Sicherheitstransaktion bekannt ist, ansonsten Falsch</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.SendEmptyToClient(Zyan.Communication.ChannelSinks.Encryption.SecureTransactionStage,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            Erzeugt eine leere Antwortnachricht.
            </summary>
            <param name="transactionStage">Art des aktuellen Transaktionsschritts</param>
            <param name="responseMsg">Antwort-Nachricht</param>
            <param name="responseHeaders">Antwort-Header</param>
            <param name="responseStream">Antwort-Datenstrom</param>
            <returns>Verarbeitungsstatus</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            Verarbeitet eine einzele Clientanfrage
            </summary>
            <param name="sinkStack">Aufrufstapel der Kanalsenken</param>
            <param name="requestMsg">Anfrage-nachricht</param>
            <param name="requestHeaders">Anfrage-Header</param>
            <param name="requestStream">Anfrage-Datenstrom</param>
            <param name="responseMsg">Antwort-Nachricht</param>
            <param name="responseHeaders">Antwort-Header</param>
            <param name="responseStream">Antwort-Datenstrom</param>
            <returns>Status serverseitigen Verarbeitung der Nachricht insgesamt</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.RequireEncryption(System.Net.IPAddress)">
            <summary>
            Prüft, ob für die Kommunikation mit einem bestimmten Client zwingend Verschlüsselung erforderlich ist, oder nicht.
            </summary>
            <param name="clientAddress">IP-Adresse des Clients</param>
            <returns>Wahr, wenn Verschlüsselung erforderlich ist, ansonsten Falsch</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>
            Gibt den Antwort-Datenstrom zurück.
            </summary>
            <param name="sinkStack">Senkenstapel</param>
            <param name="state">Optionale Statusinformationen</param>
            <param name="msg">Remoting-Nachricht</param>
            <param name="headers">Header-Informationen</param>
            <returns>Antwort-Datenstrom</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            Fordert die Verarbeitung der Antwortnachricht von dieser Senke an, wenn die Anfragenachricht asynchron verarbeitet wurde.
            </summary>
            <param name="sinkStack">Senkenstapel</param>
            <param name="state">Zustand</param>
            <param name="msg">antwort-Nachricht</param>
            <param name="headers">Antwort-Header</param>
            <param name="stream">Antwort-Datenstrom</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.StartConnectionSweeper">
            <summary>
            Startet den Zeitgeber für den Aufräumvorgang.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.SweepConnections(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Räumt abgelaufende Client-Verbindungen weg.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoServerChannelSink.NextChannelSink">
            <summary>
            Gibt die nächste Kanalsenke in der Aufrufkette zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.CryptoRemotingException">
            <summary>
            Ausnahme, die geworfen wird, wenn bei dem ver- bzw. entschlüsseln der Remoting-Kommunikation etwas schief geht.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoRemotingException.#ctor">
            <summary>
            Erstellt eine neue Instanz von CryptoRemotingException.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoRemotingException.#ctor(System.String)">
            <summary>
            Erstellt eine neue Instanz von CryptoRemotingException.
            </summary>
            <param name="message">Fehlermeldung</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoRemotingException.#ctor(System.String,System.Exception)">
            <summary>
            Erstellt eine neue Instanz von CryptoRemotingException.
            </summary>
            <param name="message">Fehlermeldung</param>
            <param name="innerException">Ausnahme, welche diese Ausnahme verursacht hat</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoRemotingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Erstellt eine neue Instanz von CryptoRemotingException.
            </summary>
            <param name="info">Serialisirungsinformationen</param>
            <param name="context">Streaming-Kontext der Serialisierung</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoRemotingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gibt Objektdaten für die Serialisierung zurück.
            </summary>
            <param name="info">Serialisierungsinformationen</param>
            <param name="context">Streaming-Kontext der Serialisierung</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.Manager.StopListening(Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel)">
            <summary>
            Stops listening of a specified channel. 
            </summary>
            <param name="channel">TcpEx Channel</param>
        </member>
        <member name="T:Zyan.Communication.Toolbox.TransactionStarter`1">
            <summary>
            Stellt sicher, dass die durchlaufende Nachricht innerhalb einer Transaktion verarbeitet wird.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.TransactionStarter`1.#ctor">
            <summary>
            Erzeugt eine neue Instanz von TransactionStarter.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.TransactionStarter`1.#ctor(System.Transactions.IsolationLevel,System.Transactions.TransactionScopeOption,System.TimeSpan)">
            <summary>
            Erzeugt eine neue Instanz von TransactionStarter
            </summary>
            <param name="isolationLevel">Isolationsstufe</param>
            <param name="scopeOption">bereichsoption</param>
            <param name="timeout">Ablaufzeitspanne</param>
        </member>
        <member name="M:Zyan.Communication.Toolbox.TransactionStarter`1.In(`0)">
            <summary>
            Eingangs-Pin.
            </summary>
            <param name="message">Nachricht</param>
        </member>
        <member name="F:Zyan.Communication.Toolbox.TransactionStarter`1.Out">
            <summary>
            Ausgangs-Pin.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Toolbox.TransactionStarter`1.Out_TransactionAborted">
            <summary>
            Ausgangs-Pin, bei Transaktionsabbruch.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.TransactionStarter`1.WireUp(System.Action{`0})">
            <summary>
            Erstellt eine neue Instanz und verdrahtet damit zwei Pins.
            </summary>
            <param name="inputPin">Eingangs-Pin</param>
            <returns>Ausgangs-Pin</returns>
        </member>
        <member name="P:Zyan.Communication.Toolbox.TransactionStarter`1.IsolationLevel">
            <summary>
            Gibt die Isolationsstufe der Transaktion zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Toolbox.TransactionStarter`1.Timeout">
            <summary>
            Gibt die Ablaufzeitspanne zurück oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Toolbox.TransactionStarter`1.ScopeOption">
            <summary>
            Gibt die Bereichsoption zurück oder legt sie fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Notification.NotificationSender">
            <summary>
            Serverseitige Versendevorrichtung für Benachrichtigungen vom Server.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationSender.#ctor(Zyan.Communication.Notification.NotificationService,System.String)">
            <summary>
            Erzeugt eine neue Instanz von NotificationSender.
            </summary>
            <param name="service">Benachrichtigunsgdienst über welchen die Benachrichtigung(en) verschickt werden</param>
            <param name="eventName">Ereignisname</param>        
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationSender.HandleServerEvent(System.Object,Zyan.Communication.Notification.NotificationEventArgs)">
            <summary>
            Behandelt ein Ereignis einer Serverkomponente.
            </summary>
            <param name="sender">Herkunftsobjekt</param>
            <param name="e">Ereignisargumente</param>
        </member>
        <member name="T:Zyan.Communication.ComponentInfo">
            <summary>
            Schreibt eine veröffentlichte Komponente.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentInfo.InterfaceName">
            <summary>
            Gibt den Schnittstellennamen zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentInfo.UniqueName">
            <summary>
            Gibt den eindeutigen Namen der Komponente zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ComponentInfo.ActivationType">
            <summary>
            Gibt den Aktivierungstyp zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Security.AuthRequestMessage">
            <summary>
            Nachricht für Authentifizierungs-Anforderung.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Security.AuthRequestMessage.CREDENTIAL_USERNAME">
            <summary>
            Konstante für Anmeldeinformation Benutzername.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Security.AuthRequestMessage.CREDENTIAL_PASSWORD">
            <summary>
            Konstante für Anmeldeinformation Kennwort.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Security.AuthRequestMessage.CREDENTIAL_DOMAIN">
            <summary>
            Konstante für Anmeldeinformation Domäne.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Security.AuthRequestMessage.CREDENTIAL_WINDOWS_SECURITY_TOKEN">
            <summary>
            Konstante für Anmeldeinformation Windows-Sicherheitstoken.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Security.AuthRequestMessage.Credentials">
            <summary>
            Gibt die Anmeldeinformationen zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.InvokeRemoteMethodDelegate">
            <summary>
            Delegat für den Aufruf von InvokeRemoteMethod.
            </summary>
            <param name="methodCallMessage">Remoting-Nachricht</param>
            <param name="allowCallInterception">Gibt an, ob das Abfangen von Aufrufen zugelassen wird, oder nicht</param>
            <returns>Antwortnachricht</returns>
        </member>
        <member name="T:Zyan.Communication.ZyanProxy">
            <summary>
            Stellvertreterobjekt für den Zugriff auf eine entfernte Komponente.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanProxy.#ctor(System.String,System.Type,Zyan.Communication.ZyanConnection,System.Boolean,System.Guid,System.String,System.Boolean,System.Collections.Hashtable,Zyan.Communication.ActivationType)">
            <summary>
            Konstruktor.
            </summary>
            <param name="uniqueName">Eindeutiger Komponentenname</param>
            <param name="type">Schnittstelle der entfernten Komponente</param>
            <param name="connection">Verbindungsobjekt</param>
            <param name="implicitTransactionTransfer">Implizite Transaktionsübertragung</param>
            <param name="sessionID">Sitzungsschlüssel</param>
            <param name="componentHostName">Name des entfernten Komponentenhosts</param>
            <param name="autoLoginOnExpiredSession">Gibt an, ob sich der Proxy automatisch neu anmelden soll, wenn die Sitzung abgelaufen ist</param>
            <param name="autoLogoninCredentials">Optional! Anmeldeinformationen, die nur benötigt werden, wenn autoLoginOnExpiredSession auf Wahr eingestellt ist</param>              
            <param name="activationType">Aktivierungsart</param>
        </member>
        <member name="M:Zyan.Communication.ZyanProxy.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Entfernte Methode aufrufen.
            </summary>
            <param name="message">Remoting-Nachricht mit Details für den entfernten Methodenaufruf</param>
            <returns>Remoting Antwortnachricht</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanProxy.InvokeRemoteMethod(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Boolean)">
            <summary>
            Führt einen entfernten Methodenaufruf aus.
            </summary>
            <param name="methodCallMessage">Remoting-Nachricht mit Details für den entfernten Methodenaufruf</param>
            <param name="allowCallInterception">Gibt an, ob das Abfangen von Aufrufen zugelassen wird, oder nicht</param>
            <returns>Remoting Antwortnachricht</returns>
        </member>
        <member name="M:Zyan.Communication.ZyanProxy.InterceptDelegateParameters(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Ersetzt Delegaten-Parameter einer Remoting-Nachricht durch eine entsprechende Delegaten-Abfangvorrichtung.
            </summary>
            <param name="message">Remoting-Nachricht</param>
            <returns>argumentliste</returns>
        </member>
        <member name="P:Zyan.Communication.ZyanProxy.ComponentHostName">
            <summary>
            Gets the name of the remote Component Host.
            </summary>
        </member>
        <member name="T:Zyan.Communication.SessionMgmt.InProcSessionManager">
            <summary>
            Komponenten für prozessinterne Sitzungsverwaltung.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.InProcSessionManager.#ctor">
            <summary>
            Erzeugt eine neue Instanz von InProcSessionManager.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.InProcSessionManager.ExistSession(System.Guid)">
            <summary>
            Prüft, ob eine Sitzung mit einer bestimmten Sitzungskennung.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
            <returns>Wahr, wenn die Sitzung existiert, ansonsten Falsch</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.InProcSessionManager.GetSessionBySessionID(System.Guid)">
            <summary>
            Gibt eine bestimmte Sitzung zurück.
            </summary>
            <param name="sessionID">Sitzungskennung</param>
            <returns>Sitzung</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.InProcSessionManager.StoreSession(Zyan.Communication.ServerSession)">
            <summary>
            Speichert eine Sitzung.
            </summary>
            <param name="session">Sitzungsdaten</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.InProcSessionManager.RemoveSession(System.Guid)">
            <summary>
            Löscht eine bestimmte Sitzung.
            </summary>
            <param name="sessionID">Sitzungskennung</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.InProcSessionManager.StartSessionSweeper">
            <summary>
            Startet den Zeitgeber für den Sitzungs-Aufräumvorgang.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.InProcSessionManager.StopSessionSweeper">
            <summary>
            Stoppt den Zeitgeber für den Sitzungs-Aufräumvorgang.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.InProcSessionManager._sessionSweeper_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Bei Intervall abgelaufene Sitzungen löschen.
            </summary>
            <param name="sender">Herkunftsobjekt</param>
            <param name="e">Ereignisargumente</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.InProcSessionManager.Dispose">
            <summary>
            Verwaltete Ressourcen freigeben.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.InProcSessionManager.GetSessionVars(System.Guid)">
            <summary>
            Gibt die Variablen einer bestimmten Sitzung zurück.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
            <returns>Wörterbuch mit Variablen einer bestimmten Sitzung</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.InProcSessionManager.SetSessionVariable(System.Guid,System.String,System.Object)">
            <summary>
            Legt den Wert einer Sitzungsvariablen fest.
            </summary>
            <param name="sessionID">Sitzungskennung</param>
            <param name="name">Variablenname</param>
            <param name="value">Wert</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.InProcSessionManager.GetSessionVariable(System.Guid,System.String)">
            <summary>
            Gibt den Wert einer Sitzungsvariablen zurück.
            </summary>
            <param name="sessionID">Sitzungskennung</param>
            <param name="name">Variablenname</param>
            <returns>Wert</returns>
        </member>
        <member name="P:Zyan.Communication.SessionMgmt.InProcSessionManager.SessionAgeLimit">
            <summary>
            Gibt die maximale Sitzungslebensdauer (in Minuten) zurück oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.SessionMgmt.InProcSessionManager.SessionSweepInterval">
            <summary>
            Gibt den Intervall für den Sitzungs-Aufräumvorgang (in Minuten) zurück oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.SessionMgmt.InProcSessionManager.SessionVarStore">
            <summary>
            Gibt den Variablenspeicher zurück.
            <remarks>Zugriff ist threadsicher.</remarks>
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup">
            <summary>
            Beschreibt serverseitige Einstellungen für binäre TCP Kommunkation.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.#ctor">
            <summary>
            Erstellt eine neue Instanz von TcpBinaryServerProtocolSetup.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.#ctor(System.Int32)">
            <summary>
            Erstellt eine neue Instanz von BinaryTcpServerProtocolSetup.
            </summary>
            <param name="tcpPort">TCP-Anschlußnummer</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.CreateChannel">
            <summary>
            Erzeugt einen fertig konfigurierten Remoting-Kanal.
            <remarks>
            Wenn der Kanal in der aktuellen Anwendungsdomäne bereits registriert wurde, wird null zurückgegeben.
            </remarks>
            </summary>
            <returns>Remoting Kanal</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.TcpPort">
            <summary>
            Gibt die TCP-Anschlußnummer zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.UseWindowsSecurity">
            <summary>
            Gibt zurück, ob integrierte Windows-Sicherheit verwendet werden soll, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.ImpersonationLevel">
            <summary>
            Gibt die Impersonierungsstufe zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.ProtectionLevel">
            <summary>
            Gibt den Absicherungsgrad zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.SocketCachingEnabled">
            <summary>
            Gibt zurück, ob Socket-Caching aktiviert ist, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryServerProtocolSetup.AuthenticationProvider">
            <summary>
            Gibt den Authentifizierungsanbieter zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.TcpBinaryClientProtocolSetup">
            <summary>
            Beschreibt clientseitige Einstellungen für binäre TCP Kommunkation.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpBinaryClientProtocolSetup.#ctor">
            <summary>
            Erstellt eine neue Instanz von TcpBinaryClientProtocolSetup.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpBinaryClientProtocolSetup.CreateChannel">
            <summary>
            Erzeugt einen fertig konfigurierten Remoting-Kanal.
            <remarks>
            Wenn der Kanal in der aktuellen Anwendungsdomäne bereits registriert wurde, wird null zurückgegeben.
            </remarks>
            </summary>
            <returns>Remoting Kanal</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryClientProtocolSetup.UseWindowsSecurity">
            <summary>
            Gibt zurück, ob integrierte Windows-Sicherheit verwendet werden soll, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryClientProtocolSetup.ImpersonationLevel">
            <summary>
            Gibt die Impersonierungsstufe zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryClientProtocolSetup.ProtectionLevel">
            <summary>
            Gibt den Absicherungsgrad zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpBinaryClientProtocolSetup.SocketCachingEnabled">
            <summary>
            Gibt zurück, ob Socket-Caching aktiviert ist, oder legt dies fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup">
            <summary>
            Protokolleinstellungen für serverseitige TCP-Kommunikation mit benutzerdefinierter Authentifizierung und Verschlüsselung.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.#ctor">
            <summary>
            Erstellt eine neue Instanz von TcpCustomServerProtocolSetup.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider)">
            <summary>
            Erstellt eine neue Instanz von TcpCustomServerProtocolSetup.
            </summary>
            <param name="tcpPort">TCP-Anschlußnummer</param>
            <param name="authProvider">Authentifizierungsanbieter</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean)">
            <summary>
            Erzeugt eine neue Instanz von TcpCustomServerProtocolSetup.
            </summary>
            <param name="tcpPort">TCP-Anschlußnummer</param>
            <param name="authProvider">Authentifizierungsanbieter</param>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String)">
            <summary>
            Erzeugt eine neue Instanz von TcpCustomServerProtocolSetup.
            </summary>
            <param name="tcpPort">TCP-Anschlußnummer</param>
            <param name="authProvider">Authentifizierungsanbieter</param>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String,System.Boolean)">
            <summary>
            Erzeugt eine neue Instanz von TcpCustomServerProtocolSetup.
            </summary>
            <param name="tcpPort">TCP-Anschlußnummer</param>
            <param name="authProvider">Authentifizierungsanbieter</param>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>        
            <param name="oaep">Gibt an, ob OAEP Padding verwendet werden soll</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.CreateChannel">
            <summary>
            Erzeugt einen fertig konfigurierten Remoting-Kanal.
            <remarks>
            Wenn der Kanal in der aktuellen Anwendungsdomäne bereits registriert wurde, wird null zurückgegeben.
            </remarks>
            </summary>
            <returns>Remoting Kanal</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.TcpPort">
            <summary>
            Gibt die TCP-Anschlußnummer zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.Algorithm">
            <summary>
            Gibt den Namen des zu verwendenden symmetrischen Verschlüsselungsalgorithmus zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.Oeap">
            <summary>
            Gibt zurück, ob OEAP-Padding aktivuert werden soll, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.SocketCachingEnabled">
            <summary>
            Gibt zurück, ob Socket-Caching aktiviert ist, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomServerProtocolSetup.AuthenticationProvider">
            <summary>
            Gibt den Authentifizierungsanbieter zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup">
            <summary>
            Protokolleinstellungen für clientseitige TCP-Kommunikation mit benutzerdefinierter Authentifizierung und Verschlüsselung.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.#ctor">
            <summary>
            Erzeugt eine neue Instanz von TcpCustomClientProtocolSetup.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.#ctor(System.Boolean)">
            <summary>
            Erzeugt eine neue Instanz von TcpCustomClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.#ctor(System.Boolean,System.String)">
            <summary>
            Erzeugt eine neue Instanz von TcpCustomClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.#ctor(System.Boolean,System.String,System.Int32)">
            <summary>
            Erzeugt eine neue Instanz von TcpCustomClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>
            <param name="maxAttempts">Anzahl der maximalen Verbindungsversuche</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.#ctor(System.Boolean,System.String,System.Boolean)">
            <summary>
            Erzeugt eine neue Instanz von TcpCustomClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>        
            <param name="oaep">Gibt an, ob OAEP Padding verwendet werden soll</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.#ctor(System.Boolean,System.String,System.Int32,System.Boolean)">
            <summary>
            Erzeugt eine neue Instanz von TcpCustomClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>
            <param name="maxAttempts">Anzahl der maximalen Verbindungsversuche</param>
            <param name="oaep">Gibt an, ob OAEP Padding verwendet werden soll</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.CreateChannel">
            <summary>
            Erzeugt einen fertig konfigurierten Remoting-Kanal.
            <remarks>
            Wenn der Kanal in der aktuellen Anwendungsdomäne bereits registriert wurde, wird null zurückgegeben.
            </remarks>
            </summary>
            <returns>Remoting Kanal</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.Algorithm">
            <summary>
            Gibt den Namen des zu verwendenden symmetrischen Verschlüsselungsalgorithmus zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.Oeap">
            <summary>
            Gibt zurück, ob OEAP-Padding aktivuert werden soll, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.MaxAttempts">
            <summary>
            Gibt die Anzahl der Versuche zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpCustomClientProtocolSetup.SocketCachingEnabled">
            <summary>
            Gibt zurück, ob Socket-Caching aktiviert ist, oder legt dies fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Security.IntegratedWindowsAuthProvider">
            <summary>
            Authentifizierungsanbieter für Windows-Sicherheitstoken-Authentifizierung.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Security.IntegratedWindowsAuthProvider.Authenticate(Zyan.Communication.Security.AuthRequestMessage)">
            <summary>
            Authentifiziert einen bestimmten Benutzer anhand seiner Anmeldeinformationen.
            </summary>
            <param name="authRequest">Authentifizierungs-Anfragenachricht mit Anmeldeinformationen</param>
            <returns>Antwortnachricht des Authentifizierungssystems</returns>
        </member>
        <member name="T:Zyan.Communication.Notification.NotificationService">
            <summary>
            Benachrichtigungsdienst.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationService.#ctor">
            <summary>
            Erzeugt eine neue Instanz von NotificationService.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationService.Subscribe(System.String,System.EventHandler{Zyan.Communication.Notification.NotificationEventArgs})">
            <summary>
            Registriert einen Client für den Empfang von Benachrichtigungen bei einem bestimmten Ereignis.
            </summary>
            <param name="eventName">Ereignisname</param>
            <param name="handler">Delegat auf Client-Ereignisprozedur</param>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationService.Unsubscribe(System.String,System.EventHandler{Zyan.Communication.Notification.NotificationEventArgs})">
            <summary>
            Hebt eine Registrierung für den Empfang von Benachrichtigungen eines bestimmten Ereignisses auf.
            </summary>
            <param name="eventName"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationService.RaiseEvent(System.String,System.Object)">
            <summary>
            Feuert ein bestimmtes Ereignis.
            </summary>
            <param name="eventName">Ereignisname</param>
            <param name="message">Nachricht</param>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationService.OnServerEvent(System.String,Zyan.Communication.Notification.NotificationEventArgs)">
            <summary>
            Versendet Benachrichtigungen über ein bestimmtes Ereignis an alle Registrierten Clients.
            </summary>
            <param name="eventName">Ereignisname</param>
            <param name="e">Ereignisargumente</param>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationService.BeginSend(System.String,Zyan.Communication.Notification.NotificationEventArgs,System.EventHandler{Zyan.Communication.Notification.NotificationEventArgs})">
            <summary>
            Sendet eine Ereignisbenachrichtigung asynchron.
            </summary>
            <param name="eventName">Ereignisname</param>
            <param name="e">Ereignisargumente</param>
            <param name="eventDelegate">Delegat auf registrierte Client-Ereignisprozedur</param>
        </member>
        <member name="T:Zyan.Communication.InvokeCanceledException">
            <summary>
            Ausnahme, die geworfen wird, wenn ein Methodenaufruf abgebrochen wurde.
            </summary>
        </member>
        <member name="M:Zyan.Communication.InvokeCanceledException.#ctor">
            <summary>
            Erstellt eine neue Instanz von InvokeCanceledException.
            </summary>
        </member>
        <member name="M:Zyan.Communication.InvokeCanceledException.#ctor(System.String)">
            <summary>
            Erstellt eine neue Instanz von InvokeCanceledException.
            </summary>
            <param name="message">Fehlermeldung</param>
        </member>
        <member name="M:Zyan.Communication.InvokeCanceledException.#ctor(System.String,System.Exception)">
            <summary>
            Erstellt eine neue Instanz von InvokeCanceledException.
            </summary>
            <param name="message">Fehlermeldung</param>
            <param name="innerException">Ausnahme, welche diese Ausnahme verursacht hat</param>
        </member>
        <member name="M:Zyan.Communication.InvokeCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Erstellt eine neue Instanz von InvokeCanceledException.
            </summary>
            <param name="info">Serialisierungsinformationen</param>
            <param name="context">Streaming-Kontext der Serialisierung</param>
        </member>
        <member name="M:Zyan.Communication.InvokeCanceledException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gibt Objektdaten für die Serialisierung zurück.
            </summary>
            <param name="info">Serialisierungsinformationen</param>
            <param name="context">Streaming-Kontext der Serialisierung</param>
        </member>
        <member name="T:Zyan.Communication.CallInterceptorHelper`1">
            <summary>
            Allows building call interceptors with strong-typed fluent interface
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.#ctor(Zyan.Communication.CallInterceptorCollection)">
            <summary>
            Creates CallInterceptorHelper instance
            </summary>
            <param name="interceptors">Collection of call interceptors to add to</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.Add(System.Linq.Expressions.Expression{System.Action{`0}},Zyan.Communication.CallInterceptionDelegate)">
            <summary>
            Creates new CallInterceptor for the given method and adds it to the interceptors collection
            </summary>
            <param name="expression">LINQ expression</param>
            <param name="handler">Interception handler</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Zyan.Communication.CallInterceptionData,``0})">
            <summary>
            Creates new CallInterceptor for the given method and adds it to the interceptors collection
            </summary>
            <param name="expression">LINQ expression</param>
            <param name="handler">Interception handler</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.Add``1(System.Linq.Expressions.Expression{System.Action{`0,``0}},System.Action{Zyan.Communication.CallInterceptionData,``0})">
            <summary>
            Creates new CallInterceptor for the given method and adds it to the interceptors collection
            </summary>
            <param name="expression">LINQ expression</param>
            <param name="handler">Interception handler</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.Add``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1}},System.Func{Zyan.Communication.CallInterceptionData,``0,``1})">
            <summary>
            Creates new CallInterceptor for the given method and adds it to the interceptors collection
            </summary>
            <param name="expression">LINQ expression</param>
            <param name="handler">Interception handler</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.Add``2(System.Linq.Expressions.Expression{System.Action{`0,``0,``1}},System.Action{Zyan.Communication.CallInterceptionData,``0,``1})">
            <summary>
            Creates new CallInterceptor for the given method and adds it to the interceptors collection
            </summary>
            <param name="expression">LINQ expression</param>
            <param name="handler">Interception handler</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.Add``3(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2}},System.Func{Zyan.Communication.CallInterceptionData,``0,``1,``2})">
            <summary>
            Creates new CallInterceptor for the given method and adds it to the interceptors collection
            </summary>
            <param name="expression">LINQ expression</param>
            <param name="handler">Interception handler</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.Add``3(System.Linq.Expressions.Expression{System.Action{`0,``0,``1,``2}},System.Action{Zyan.Communication.CallInterceptionData,``0,``1,``2})">
            <summary>
            Creates new CallInterceptor for the given method and adds it to the interceptors collection
            </summary>
            <param name="expression">LINQ expression</param>
            <param name="handler">Interception handler</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.Add``4(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3}},System.Func{Zyan.Communication.CallInterceptionData,``0,``1,``2,``3})">
            <summary>
            Creates new CallInterceptor for the given method and adds it to the interceptors collection
            </summary>
            <param name="expression">LINQ expression</param>
            <param name="handler">Interception handler</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.CheckNotNull``1(``0)">
            <summary>
            Checks whether argument is not null
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.Parse(System.Linq.Expressions.LambdaExpression,System.Reflection.MemberTypes@,System.String@)">
            <summary>
            Parse lambda expression and extract memberType and memberName
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.ExtractMethodCallExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Try to extract MethodCallExpression from lambda expression
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.ExtractMemberExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Try to extract MemberExpression from lambda expression
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.GetEnumerator">
            <summary>
            Returns call interceptors for the given interface
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptorHelper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns call interceptors for the given interface
            </summary>
        </member>
        <member name="T:Zyan.Communication.ActivationType">
            <summary>
            Aufzählung der verfügbaren Aktivierungsarten.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ActivationType.SingleCall">
            <summary>
            Komponenteninstanz lebt nur einen Aufruf lang. Für jeden Aufruf wird eine separate Instanz erzeugt.
            <remarks>SingleCallaktivierte Komponenten müssen nicht threadsicher sein.</remarks>
            </summary>
        </member>
        <member name="F:Zyan.Communication.ActivationType.Singleton">
            <summary>
            Komponenteninstanz wird bei erstem Aufruf erzeugt und wird für alle weiteren Aufrufe wiederverwendet.
            <remarks>Singltonaktivierte Komponenten müssen threadsicher sein.</remarks>
            </summary>
        </member>
        <member name="T:Zyan.Communication.ZyanErrorAction">
            <summary>
            Possible actions for cought error.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ZyanErrorAction.ThrowException">
            <summary>
            Throws the exception.
            </summary>
        </member>
        <member name="F:Zyan.Communication.ZyanErrorAction.Retry">
            <summary>
            Retry the request.
            </summary>        
        </member>
        <member name="F:Zyan.Communication.ZyanErrorAction.Ignore">
            <summary>
            Ignore the error.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ZyanErrorEventArgs">
            <summary>
            Provides specific data for ZyanError-Events.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanErrorEventArgs.#ctor">
            <summary>
            Creates a new instance of the ZyanErrorEventArgs class.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanErrorEventArgs.Exception">
            <summary>
            Gets the exception that occured.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanErrorEventArgs.Action">
            <summary>
            Gets or sets, the action to handle this error.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanErrorEventArgs.RemotingMessage">
            <summary>
            Gets the remoting message of the request.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanErrorEventArgs.ServerComponentType">
            <summary>
            Gets the type of the called server component.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanErrorEventArgs.RemoteMemberName">
            <summary>
            Gets the name of the remote called member.
            </summary>
        </member>
        <member name="T:Zyan.Communication.SessionMgmt.SqlSessionManager">
            <summary>
            Komponenten für Sitzungsverwaltung in einer SQL Server-Datenbank.
            <remarks>
            Folgendes Tabellenschema wird vorausgesetzt:
            
            SessionID           uniqueidentifier
            SessionTimestamp    datetime
            IdentityName        nvarchar(255)
            </remarks>
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Erzeugt eine neue Instanz von InProcSessionManager.
            </summary>
            <param name="connectionString">Verbindungszeichenfolge zur SQL Server Datenbank</param>
            <param name="sqlSchema">Name des Datenbankschemas (z.B.: "dbo")</param>
            <param name="sqlSessionTableName">Name der Sitzungstabelle</param>
            <param name="sqlVariablesTableName">Name der Tabelle für Sitzungsvariablen</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.ExistSqlTable(System.String,System.String)">
            <summary>
            Gibt zurück, ob eine bestimmte Tabelle in der Verbundenen SQL Server Datenbank bereits angelegt wurde, oder nicht.
            </summary>
            <param name="schema">SQL Server-Schema (z.B. dbo)</param>
            <param name="tableName">Tabellenname</param>
            <returns>Wahr, wenn die Tabelle existiert, ansonsten Falsch</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.EnsureSessionTableCreated">
            <summary>
            Stellt sicher, dass die Sitzungstabelle in der SQL Server Datenbank existiert.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.EnsureVariablesTableCreated">
            <summary>
            Stellt sicher, dass die Variablentabelle in der SQL Server Datenbank existiert.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.GetSessionFromSqlServer(System.Guid)">
            <summary>
            Ruft eine bestimmte Sitzung aus der SQL Server Datenbank ab.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
            <returns>Sitzungsobjekt</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.GetVariableFromSqlServer(System.Guid,System.String)">
            <summary>
            Ruft den Wert einer bestimmten Sitzungsvariable aus der SQL Server Datenbank ab.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
            <param name="variableName">Variablenname</param>
            <returns>Wert der Variable</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.SetVariableOnSqlServer(System.Guid,System.String,System.Object)">
            <summary>
            Legt den Wert einer bestimmten Sitzungsvariable in der SQL Server Datenbank fest.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
            <param name="variableName">Variablenname</param>
            <param name="variableValue">Wert der Variable</param>        
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.ExistSessionOnSqlServer(System.Guid)">
            <summary>
            Gibt zurück, ob eine bestimmte Sitzung in der SQL Server Datenbank existiert, oder nicht.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
            <returns>Wahr, wenn die Sitzung existiert, ansonsten Falsch</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.StoreSessionOnSqlServer(Zyan.Communication.ServerSession)">
            <summary>
            Speichert eine Sitzung in der SQL Server Datenbank ab.
            </summary>
            <param name="session">Sitzungsobjekt</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.RemoveSessionFromSqlServer(System.Guid)">
            <summary>
            Löscht eine bestimmte Sitzung aus der SQL Server Datenbank.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.SweepExpiredSessionsFromSqlServer">
            <summary>
            Entfernt abgelaufene Sitzungen aus der SQL Server Datenbank.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.ExistSession(System.Guid)">
            <summary>
            Prüft, ob eine Sitzung mit einer bestimmten Sitzungskennung.
            </summary>
            <param name="sessionID">Sitzungsschlüssel</param>
            <returns>Wahr, wenn die Sitzung existiert, ansonsten Falsch</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.GetSessionBySessionID(System.Guid)">
            <summary>
            Gibt eine bestimmte Sitzung zurück.
            </summary>
            <param name="sessionID">Sitzungskennung</param>
            <returns>Sitzung</returns>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.StoreSession(Zyan.Communication.ServerSession)">
            <summary>
            Speichert eine Sitzung.
            </summary>
            <param name="session">Sitzungsdaten</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.RemoveSession(System.Guid)">
            <summary>
            Löscht eine bestimmte Sitzung.
            </summary>
            <param name="sessionID">Sitzungskennung</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.StartSessionSweeper">
            <summary>
            Startet den Zeitgeber für den Sitzungs-Aufräumvorgang.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.StopSessionSweeper">
            <summary>
            Stoppt den Zeitgeber für den Sitzungs-Aufräumvorgang.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager._sessionSweeper_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Bei Intervall abgelaufene Sitzungen löschen.
            </summary>
            <param name="sender">Herkunftsobjekt</param>
            <param name="e">Ereignisargumente</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.Dispose">
            <summary>
            Verwaltete Ressourcen freigeben.
            </summary>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.SetSessionVariable(System.Guid,System.String,System.Object)">
            <summary>
            Legt den Wert einer Sitzungsvariablen fest.
            </summary>
            <param name="sessionID">Sitzungskennung</param>
            <param name="name">Variablenname</param>
            <param name="value">Wert</param>
        </member>
        <member name="M:Zyan.Communication.SessionMgmt.SqlSessionManager.GetSessionVariable(System.Guid,System.String)">
            <summary>
            Gibt den Wert einer Sitzungsvariablen zurück.
            </summary>
            <param name="sessionID">Sitzungskennung</param>
            <param name="name">Variablenname</param>
            <returns>Wert</returns>
        </member>
        <member name="P:Zyan.Communication.SessionMgmt.SqlSessionManager.SessionAgeLimit">
            <summary>
            Gibt die maximale Sitzungslebensdauer (in Minuten) zurück oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.SessionMgmt.SqlSessionManager.SessionSweepInterval">
            <summary>
            Gibt den Intervall für den Sitzungs-Aufräumvorgang (in Minuten) zurück oder legt ihn fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Scripting.ScriptEngine">
            <summary>
            Compiles C# source code on runtime.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Scripting.ScriptEngine.CompileScriptToAssembly(System.String,System.String[])">
            <summary>
            Creates a compiled assembly from source code.
            </summary>
            <param name="scriptCode">C# source code</param>
            <param name="referenceAsseblies">Array with assembly file paths to reference</param>
            <returns>Compiled assembly</returns>
        </member>
        <member name="M:Zyan.Communication.Scripting.ScriptEngine.GetCSharpNameOfType(System.Type)">
            <summary>
            Gets the C# name of a specified type.
            </summary>
            <param name="type">Type</param>
            <returns>C# name</returns>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup">
            <summary>
            Protokolleinstellungen für serverseitige bi-direktionale TCP-Kommunikation mit benutzerdefinierter Authentifizierung und Verschlüsselung.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor">
            <summary>
            Erstellt eine neue Instanz von TcpDuplexServerProtocolSetup.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider)">
            <summary>
            Erstellt eine neue Instanz von TcpDuplexServerProtocolSetup.
            </summary>
            <param name="tcpPort">TCP-Anschlußnummer</param>
            <param name="authProvider">Authentifizierungsanbieter</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Erstellt eine neue Instanz von TcpDuplexServerProtocolSetup.
            </summary>
            <param name="tcpPort">TCP-Anschlußnummer</param>
            <param name="authProvider">Authentifizierungsanbieter</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean)">
            <summary>
            Erzeugt eine neue Instanz von TcpDuplexServerProtocolSetup.
            </summary>
            <param name="tcpPort">TCP-Anschlußnummer</param>
            <param name="authProvider">Authentifizierungsanbieter</param>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Erzeugt eine neue Instanz von TcpDuplexServerProtocolSetup.
            </summary>
            <param name="tcpPort">TCP-Anschlußnummer</param>
            <param name="authProvider">Authentifizierungsanbieter</param>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String)">
            <summary>
            Erzeugt eine neue Instanz von TcpDuplexServerProtocolSetup.
            </summary>
            <param name="tcpPort">TCP-Anschlußnummer</param>
            <param name="authProvider">Authentifizierungsanbieter</param>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Erzeugt eine neue Instanz von TcpDuplexServerProtocolSetup.
            </summary>
            <param name="tcpPort">TCP-Anschlußnummer</param>
            <param name="authProvider">Authentifizierungsanbieter</param>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String,System.Boolean)">
            <summary>
            Erzeugt eine neue Instanz von TcpDuplexServerProtocolSetup.
            </summary>
            <param name="tcpPort">TCP-Anschlußnummer</param>
            <param name="authProvider">Authentifizierungsanbieter</param>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>        
            <param name="oaep">Gibt an, ob OAEP Padding verwendet werden soll</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.#ctor(System.Int32,Zyan.Communication.Security.IAuthenticationProvider,System.Boolean,System.String,System.Boolean,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Erzeugt eine neue Instanz von TcpDuplexServerProtocolSetup.
            </summary>
            <param name="tcpPort">TCP-Anschlußnummer</param>
            <param name="authProvider">Authentifizierungsanbieter</param>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>        
            <param name="oaep">Gibt an, ob OAEP Padding verwendet werden soll</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.CreateChannel">
            <summary>
            Erzeugt einen fertig konfigurierten Remoting-Kanal.
            <remarks>
            Wenn der Kanal in der aktuellen Anwendungsdomäne bereits registriert wurde, wird null zurückgegeben.
            </remarks>
            </summary>
            <returns>Remoting Kanal</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.TcpKeepAliveEnabled">
            <summary>
            Enables or disables TCP KeepAlive.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.TcpKeepAliveTime">
            <summary>
            Gets or sets the TCP KeepAlive time in milliseconds.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.TcpKeepAliveInterval">
            <summary>
            Gets or sets the TCP KeepAlive interval in milliseconds
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.TcpPort">
            <summary>
            Gibt die TCP-Anschlußnummer zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.Algorithm">
            <summary>
            Gibt den Namen des zu verwendenden symmetrischen Verschlüsselungsalgorithmus zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.Oeap">
            <summary>
            Gibt zurück, ob OEAP-Padding aktivuert werden soll, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexServerProtocolSetup.AuthenticationProvider">
            <summary>
            Gibt den Authentifizierungsanbieter zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup">
            <summary>
            Protokolleinstellungen für clientseitige bi-direktionale TCP-Kommunikation mit benutzerdefinierter Authentifizierung und Verschlüsselung.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor">
            <summary>
            Erzeugt eine neue Instanz von TcpDuplexClientProtocolSetup.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean)">
            <summary>
            Erzeugt eine neue Instanz von TcpDuplexClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Erzeugt eine neue Instanz von TcpDuplexClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean,System.String)">
            <summary>
            Erzeugt eine neue Instanz von TcpDuplexClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean,System.String,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Erzeugt eine neue Instanz von TcpDuplexClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean,System.String,System.Int32)">
            <summary>
            Erzeugt eine neue Instanz von TcpDuplexClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>
            <param name="maxAttempts">Anzahl der maximalen Verbindungsversuche</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean,System.String,System.Int32,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Erzeugt eine neue Instanz von TcpDuplexClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>
            <param name="maxAttempts">Anzahl der maximalen Verbindungsversuche</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean,System.String,System.Boolean)">
            <summary>
            Erzeugt eine neue Instanz von TcpDuplexClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>        
            <param name="oaep">Gibt an, ob OAEP Padding verwendet werden soll</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean,System.String,System.Boolean,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Erzeugt eine neue Instanz von TcpDuplexClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>        
            <param name="oaep">Gibt an, ob OAEP Padding verwendet werden soll</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean,System.String,System.Int32,System.Boolean)">
            <summary>
            Erzeugt eine neue Instanz von TcpDuplexClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>
            <param name="maxAttempts">Anzahl der maximalen Verbindungsversuche</param>
            <param name="oaep">Gibt an, ob OAEP Padding verwendet werden soll</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.#ctor(System.Boolean,System.String,System.Int32,System.Boolean,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Erzeugt eine neue Instanz von TcpDuplexClientProtocolSetup.
            </summary>
            <param name="encryption">Gibt an, ob die Kommunikation verschlüssel werden soll</param>
            <param name="algorithm">Verschlüsselungsalgorithmus (z.B. "3DES")</param>
            <param name="maxAttempts">Anzahl der maximalen Verbindungsversuche</param>
            <param name="oaep">Gibt an, ob OAEP Padding verwendet werden soll</param>
            <param name="keepAlive">Enables or disables TCP KeepAlive for the new connection</param>
            <param name="keepAliveTime">Time for TCP KeepAlive in Milliseconds</param>
            <param name="KeepAliveInterval">Interval for TCP KeepAlive in Milliseconds</param>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.CreateChannel">
            <summary>
            Erzeugt einen fertig konfigurierten Remoting-Kanal.
            <remarks>
            Wenn der Kanal in der aktuellen Anwendungsdomäne bereits registriert wurde, wird null zurückgegeben.
            </remarks>
            </summary>
            <returns>Remoting Kanal</returns>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.TcpKeepAliveEnabled">
            <summary>
            Enables or disables TCP KeepAlive.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.TcpKeepAliveTime">
            <summary>
            Gets or sets the TCP KeepAlive time in milliseconds.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.TcpKeepAliveInterval">
            <summary>
            Gets or sets the TCP KeepAlive interval in milliseconds
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.Algorithm">
            <summary>
            Gibt den Namen des zu verwendenden symmetrischen Verschlüsselungsalgorithmus zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.Oeap">
            <summary>
            Gibt zurück, ob OEAP-Padding aktivuert werden soll, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.TcpDuplexClientProtocolSetup.MaxAttempts">
            <summary>
            Gibt die Anzahl der Versuche zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink">
            <summary>
            Clientseitige Kanalsenke für verschlüsselte Kommunikation.
            <remarks>
            Benötigt auf der Serverseite CryptoServerChannelSink als Gegenstück!
            </remarks>
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.#ctor(System.Runtime.Remoting.Channels.IClientChannelSink,System.String,System.Boolean,System.Int32)">
            <summary>Erstellt eine neue Instanz von CryptoClientChannelSink</summary>
            <param name="nextSink">Nächste Kanalsenke in der Senkenkette</param>
            <param name="algorithm">Name des symmetrischen Verschlüsselungsalgorithmus</param>
            <param name="oaep">Gibt an, ob OAEP-Padding verwendet werden soll, oder nicht</param>
            <param name="maxAttempts">Maximale Anzahl der Verarbeitungsversuche</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.StartSecureTransaction(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>Startet eine neue Sicherheitstransaktion</summary>
            <param name="msg">Remoting-Nachricht</param>
            <param name="requestHeaders">Anfrage-Header-Auflistung</param>
            <returns>Eindeutige Kennung der Sicherheitstransaktion</returns>		
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.ObtainSharedKey(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Fordert einen gemeinsamen Schlüssel vom Server an.
            </summary>
            <param name="msg">Original-Remoting-Nachricht</param>
            <returns>Verschlüsselungsanbieter</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.ClearSharedKey">
            <summary>
            Löscht den gemeinsamen Schlüssel und die eindeutige Sicherheitstransaktionskennung.
            </summary>		
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.CreateSharedKeyRequest(System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>Erzeugt eine Anfrage nach einem gemeinsamen Schlüssel</summary>
            <param name="requestHeaders">Transport-Header-Auflistung</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.DecryptResponse(System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>Entschlüsselt den eingehenden Antwort-Datenstrom</summary>
            <param name="responseStream">Antwort-Datenstrom</param>
            <param name="responseHeaders">Antwort-Transportheader</param>
            <returns>Entschlüsselter Datenstrom (oder null, wenn die Verschlüsselung fehlgeschlagen ist)</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.ProcessSharedKeyResponse(System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>Verarbeitet die Antwort der Servers einer Anfrage nach einen Gemeinsamen Schlüssel</summary>
            <param name="responseHeaders">Transport-Header-Auflistung</param>
            <returns>Verschlüsselungsanbieter</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.EncryptMessage(System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>Verschlüsselt eine bestimmte Remoting-Nachricht</summary>
            <param name="requestHeaders">Anfrage-Transport-Header-Auflistung</param>
            <param name="requestStream">Anfrage-Datenstrom</param>
            <returns>Verschlüsselter Datenstrom</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.ProcessEncryptedMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            Verarbeitet die verschlüsselte Nachricht.
            </summary>
            <param name="msg">Original Remotingnachricht</param>
            <param name="requestHeaders">Original Anfrage-Header</param>
            <param name="requestStream">Original Anfrage-Datenstrom (unverschlüsselt)</param>
            <param name="responseHeaders">Antwort-Header</param>
            <param name="responseStream">Antwort-Datenstrom (unverschlüsselt nach Verarbeitung!)</param>
            <returns>Wahr, wenn Verarbeitung erfolgreich, ansonsten Falsch</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.ProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>Verarbeitet eine bestimmte Remoting-Nachricht</summary>
            <param name="msg">Remoting-Nachricht</param>
            <param name="requestHeaders">Anfrage-Header-Auflistung</param>
            <param name="requestStream">Anfrage-Datenstrom</param>
            <param name="responseHeaders">Antwort-Header-Auflistung</param>
            <param name="responseStream">Antwort-Datenstrom</param>		
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.GetRequestStream(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>
            Gibt den Anfrage-Datenstrom zurück.
            </summary>
            <param name="msg">Remoting-Nachricht</param>
            <param name="headers">Header-Informationen</param>
            <returns>Anfrage-Datenstrom</returns>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.AsyncProcessRequest(System.Runtime.Remoting.Channels.IClientChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            Verarbeitet eine Anfragenachricht asynchron.
            </summary>
            <param name="sinkStack">Senkenstapel</param>
            <param name="msg">Remoting-Nachricht</param>
            <param name="headers">Anfrage-Header-Auflistung</param>
            <param name="stream">Anfrage-Datenstrom</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            Verarbeitet eine Antwort-Nachricht asynchron.
            </summary>
            <param name="sinkStack">Senkenstapel</param>
            <param name="state">Asynchroner Verarbeitungsstatus</param>
            <param name="headers">Anfrage-Header-Auflistung</param>
            <param name="stream">Anfrage-Datenstrom</param>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.NextChannelSink">
            <summary>
            Gibt die nächste Kanalsenke in der Senkenkette zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.AsyncProcessingState">
            <summary>
            Speichert Informationen über den asynchronen Verarbeitungsstatus.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.AsyncProcessingState.#ctor(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream@,System.Guid)">
            <summary>Erzeugt eine neue Instanz von AsyncProcessingState</summary>
            <param name="msg">Remoting-Nachricht</param>
            <param name="headers">Header-Auflistung</param>
            <param name="stream">Eingabe-Datenstrom</param>
            <param name="id">Eindeutige Kennung der Sicherheitstransaktion</param>
        </member>
        <member name="M:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.AsyncProcessingState.DuplicateStream(System.IO.Stream@)">
            <summary>Kopiert einen bestimmten Datenstrom</summary>
            <param name="stream">Datenstrom</param>
            <returns>Kopie des Datenstroms</returns>			
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.AsyncProcessingState.Stream">
            <summary>
            Gibt den Eingabedatenstrom zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.AsyncProcessingState.Headers">
            <summary>
            Gibt die Header-Auflistung zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.AsyncProcessingState.Message">
            <summary>
            Gibt die Remoting-Nachricht zurück.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ChannelSinks.Encryption.CryptoClientChannelSink.AsyncProcessingState.SecureTransactionID">
            <summary>
            Gibt die eindeutige Kennung der Sicherheitstransaktion zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel">
            <!-- Der enthaltene XML-Abschnitt konnte nur teilweise oder gar nicht eingefügt werden. --><include file="TcpExChannel.docs" path="TcpExChannel/summary[@name=&quot;TcpExChannel&quot;]"/>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.TcpKeepAliveEnabled">
            <summary>
            Enables or disables TCP KeepAlive.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.TcpKeepAliveTime">
            <summary>
            Gets or sets the TCP KeepAlive time in milliseconds.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.TcpExChannel.TcpKeepAliveInterval">
            <summary>
            Gets or sets the TCP KeepAlive interval in milliseconds
            </summary>
        </member>
        <member name="T:Zyan.Communication.Notification.NotificationReceiver">
            <summary>
            Clientseitige Empfangsvorrichtung für Benachrichtigungen vom Server.
            </summary>
        </member>
        <member name="F:Zyan.Communication.Notification.NotificationReceiver._clientHandler">
            <summary>
            Ereignis: Bei Benachrichtigung vom Server.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationReceiver.#ctor(System.String,System.EventHandler{Zyan.Communication.Notification.NotificationEventArgs})">
            <summary>
            Erzeugt eine neue Instanz von NotificationReceiver.
            </summary>
            <param name="eventName">Ereignisname</param>
            <param name="clientHandler">Delegat auf Client-Ereignisprozedur</param>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationReceiver.FireNotifyEvent(System.Object,Zyan.Communication.Notification.NotificationEventArgs)">
            <summary>
            Feuert das Notify-Ereignis auf dem Client.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationReceiver.InitializeLifetimeService">
            <summary>
            Inizialisiert die Lebenszeitsteuerung der Instanz.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zyan.Communication.Notification.NotificationReceiver.Dispose">
            <summary>
            Gibt verwendete Ressourcen frei.
            </summary>
        </member>
        <member name="P:Zyan.Communication.Notification.NotificationReceiver.EventName">
            <summary>
            Gibt den Ereignisnamen zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.LoginEventArgs">
            <summary>
            Event arguments for login events.
            </summary>
        </member>
        <member name="T:Zyan.Communication.LoginEventType">
            <summary>
            Available types of login events.
            </summary>
        </member>
        <member name="T:Zyan.Communication.LanguageResource">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ApplicationException_MultipleModuleControlersNotAllowed">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Multiple module controlers per module are not allowed. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ApplicationException_NoChannel">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die No channel was created. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ApplicationException_NotificationServiceNotRunning">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Notification service is not running on the host. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_AddressMustNotBeEmpty">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Address must not be empty. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_ComponentHostNameMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Component host name missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_EmptySessionIDIsNotAllowed">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Empty session ID is not allowed. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_FactoryMethodDelegateMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Delegate to factory method missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_InterfaceNameMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Interface name missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_InvalidConfigSetting">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Invalid configuration setting: {0} ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_InvalidConnectionAgeLimitSetting">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Setting &apos;connectionAgeLimit&apos; must be 0 or greater. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_InvalidSweepFrequencySetting">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Setting &apos;sweepFrequency&apos; must be 0 or greater. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_MaxAttempts">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Parameter &apos;maxRetries&apos; must be 1 or greater. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_MethodNameMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Method name missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_OutPutPinNameMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Outpit pin property name missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_ServerUrlMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Server URL missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_TypeHasAlreadyAHandler">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die For type &apos;{0}&apos; is already a serialization handler registered. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_TypeIsNotAClass">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The provided implementation type is not a class. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentException_TypeIsNotAInterface">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The provided interface type is not a interface. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentOutOfRangeException_InvalidHttpPortRange">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The HTTP port must be set within the range 0-65535 liegen. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.ArgumentOutOfRangeException_InvalidTcpPortRange">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The TCP port must be set within the range 0-65535 liegen. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.CryptoRemotingException_ClientConnectionInfoMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Client connection info missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.CryptoRemotingException_InvalidClientRequest">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Invalid client request: {0}. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.CryptoRemotingException_InvalidTransactionID">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Invalid secure transaction ID. May be caused by timeout. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.CryptoRemotingException_IVMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Initialization Vector from server missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.CryptoRemotingException_KeyChanged">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Public key changed since the message was encrypted. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.CryptoRemotingException_PublicKeyNotFound">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Public key missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.CryptoRemotingException_ServerRequiresEncryption">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Server requires encrypted connection for this client. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.CryptoRemotingException_SharedKeyMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die No public key transmitted. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.Format_Exception_InvalidAddressFormat">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Invalid format for &apos;address&apos; parameter: {0} ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.InvalidCredentials">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Invalid user name or password. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.InvalidSessionException_SessionIDInvalid">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Session ID &apos;{0}&apos; is invalid. Please log on first. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.KeyNotFoundException_CannotFindComponentForInterface">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Cannot find component for interface &apos;{0}&apos;. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.KeyNotFoundException_SerializationHandlerNotFound">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die No serialization handler is registered for type &apos;{0}&apos;. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.RemotingException_ConnectionError">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Error connecting remote host: {0}. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.RemotingException_NoAddressForReconnect">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die No remote address specified for reconnect. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.SecurityException_ContextInfoMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Es wurden keine Kontextinformationen übertragen. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.SecurityException_CredentialsMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Credentials missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.SecurityException_PasswordMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Password missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.SecurityException_UserNameMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die User name missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.SecurityException_WindowsTokenMissing">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Windows security token credential missing. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.SocketException_LostConnectionToServer">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Lost connection to server &apos;{0}&apos;. ähnelt.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LanguageResource.UserNotAuthenicatedByWindows">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die User is not authenticated by operating system. ähnelt.
            </summary>
        </member>
        <member name="T:Zyan.Communication.ISerializationHandler">
            <summary>
            Implementieren Sie diese Schnittstelle, um eine benutzerdefinierte Serialisierung für einen bestimmten Typen zu erstellen.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ISerializationHandler.Serialize(System.Object)">
            <summary>
            Serailisiert ein Objekt.
            </summary>
            <param name="data">Objekt</param>
            <returns>Rohdaten</returns>
        </member>
        <member name="M:Zyan.Communication.ISerializationHandler.Deserialize(System.Type,System.Byte[])">
            <summary>
            Deserialisiert Rohdaten in ein Objekt eines bestimmten Typs.
            </summary>
            <param name="dataType">Typ der Daten</param>
            <param name="data">Rohdaten</param>
            <returns>Objekt</returns>
        </member>
        <member name="T:Zyan.Communication.CustomSerializationContainer">
            <summary>
            Container für Objekte die mit benutzerdefinierter Serialisierung verarbeitet werden.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CustomSerializationContainer.#ctor">
            <summary>
            Erstellt eine neue Instanz der CustomSerializationContainer-Klasse.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CustomSerializationContainer.#ctor(System.Type,System.Type,System.Byte[])">
            <summary>
            Erstellt eine neue Instanz der CustomSerializationContainer-Klasse.
            </summary>
            <param name="handledType">Behandelter Typ</param>
            <param name="dataType">Tatsächlicher der Daten</param>
            <param name="data">Rohdaten</param>
        </member>
        <member name="P:Zyan.Communication.CustomSerializationContainer.HandledType">
            <summary>
            Gibt den behandelten Typ zurück, oder legt ih nfest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CustomSerializationContainer.DataType">
            <summary>
            Gibt den tatsächlichen Typ der Daten zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CustomSerializationContainer.Data">
            <summary>
            Gibt die Rohdaten zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.LogicalCallContextData">
            <summary>
            Speichert Daten, die über Prozessgrenzen hinweg implizit im Aufrufkontext übertragen werden können.
            </summary>
        </member>
        <member name="M:Zyan.Communication.LogicalCallContextData.#ctor">
            <summary>
            Erstellt eine neue Instanz von LogicalCallContextData.
            </summary>
        </member>
        <member name="P:Zyan.Communication.LogicalCallContextData.Store">
            <summary>
            Gibt den Datenspeicher zurück.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Protocols.Tcp.DuplexChannel.DuplicateConnectionException">
            <summary>
            This exception should be thrown, when an attempt to create a duplicate connection is detected.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Protocols.Tcp.DuplexChannel.DuplicateConnectionException.#ctor(System.Guid)">
            <summary>
            Creates a new instance of the DuplicateConnectionException class.
            </summary>
            <param name="channelID">Unique channel identifier</param>
        </member>
        <member name="P:Zyan.Communication.Protocols.Tcp.DuplexChannel.DuplicateConnectionException.ChannelID">
            <summary>
            Gets the unique channel identifier.
            </summary>
        </member>
        <member name="T:Zyan.Communication.Toolbox.SyncContextSwitcher`1">
            <summary>
            Stellt sicher, dass die Verarbeitung von Nachrichten im ursprünglichen Thread stattfinden.
            </summary>    
        </member>
        <member name="F:Zyan.Communication.Toolbox.SyncContextSwitcher`1.Out">
            <summary>
            Aktion, die ausgeführt wird, wenn eine Nachricht verarbeitet werden soll.
            </summary>
        </member>
        <member name="M:Zyan.Communication.Toolbox.SyncContextSwitcher`1.In(`0)">
            <summary>
            Verarbeitet eine Nachricht und berücksichtigt dabei den Synchronisierungskontext.
            </summary>
            <param name="message">Nachricht</param>
        </member>
        <member name="M:Zyan.Communication.Toolbox.SyncContextSwitcher`1.WireUp(System.Action{`0})">
            <summary>
            Erstellt eine neue Instanz und verdrahtet damit zwei Pins.
            </summary>
            <param name="inputPin">Eingangs-Pin</param>
            <returns>Ausgangs-Pin</returns>
        </member>
        <member name="T:Zyan.Communication.ZyanConnectionSetup">
            <summary>
            Beschreibt Konfigurationseinstellungen für eine einzelne Zyan-Verbindung.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanConnectionSetup.#ctor">
            <summary>
            Ersellt eine neue Instanz von ZyanConnectionSetup.
            </summary>
        </member>
        <member name="M:Zyan.Communication.ZyanConnectionSetup.AddCredential(System.String,System.String)">
            <summary>
            Fügt ein neue Anmeldeinformation hinzu.
            </summary>
            <param name="name">Name</param>
            <param name="value">Wert</param>
        </member>
        <member name="P:Zyan.Communication.ZyanConnectionSetup.ServerUrl">
            <summary>
            Gibt den Server-URL (z.B. "tcp://server1:46123/host1") zurück oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnectionSetup.ProtocolSetup">
            <summary>
            Gibt die Protokollkonfiguration zurück oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnectionSetup.Credentials">
            <summary>
            Gibt die Anmeldeinformationen zurück, oder legt sie fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnectionSetup.AutoLoginOnExpiredSession">
            <summary>
            Gibt zurück, ob sich die Verbindung automatisch neu anmelden soll, wenn die Sitzung abgelaufen ist, oder legt diest fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.ZyanConnectionSetup.KeepSessionAlive">
            <summary>
            Gibt zurück, ob die Sitzung automatisch turnusgemäß verlängert werden soll, oder legt dies fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.CallInterceptionData">
            <summary>
            Beschreibt eine konkretee Aufrufabfangaktion.
            </summary>
        </member>
        <member name="M:Zyan.Communication.CallInterceptionData.#ctor(System.Object[],Zyan.Communication.InvokeRemoteMethodDelegate,System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Erstellt eine neue Instanz der CallInterceptionData-Klasse.
            </summary>        
            <param name="parameters">Parameterwerte des abgefangenen Aufrufs</param>
            <param name="remoteInvoker">Delegat für den Aufruf von InvokeRemoteMethod (bei Bedarf)</param>
            <param name="remotingMessage">Remoting-nachricht</param>
        </member>
        <member name="M:Zyan.Communication.CallInterceptionData.MakeRemoteCall">
            <summary>
            Führt den entfernten Methodenaufruf aus.
            </summary>
            <returns>Rückgabewert</returns>
        </member>
        <member name="P:Zyan.Communication.CallInterceptionData.Intercepted">
            <summary>
            Gibt zurück, ob der Aufruf abgefangen wurde, oder legt dies fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CallInterceptionData.ReturnValue">
            <summary>
            Gibt den zu verwendenden Rückgabewert zurück, oder legt ihn fest.
            </summary>
        </member>
        <member name="P:Zyan.Communication.CallInterceptionData.Parameters">
            <summary>
            Gibt ein Array der Parameterwerten zurück, mit welchen die abzufangende Methode aufgerufen wurde, oder legt sie fest.
            </summary>
        </member>
        <member name="T:Zyan.Communication.MonoCheck">
            <summary>
            Werkzeug zur Prüfung auf mono Laufzeitumgebung.
            </summary>
        </member>
        <member name="P:Zyan.Communication.MonoCheck.IsRunningOnMono">
            <summary>
            Gibt zurück, ob Zyan mit mono ausgewführt wird, oder nicht.
            </summary>
        </member>
    </members>
</doc>
